{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/firework.js","path":"js/firework.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"source/images/CNS.jpg","path":"images/CNS.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/clicklove.js","path":"js/src/clicklove.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/dynamic_bg.js","path":"js/src/dynamic_bg.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/muse.js","path":"js/src/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/googleapis/css/Lato.css","path":"vendors/googleapis/css/Lato.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Bold.woff","path":"vendors/googleapis/fonts/Lato/Lato-Bold.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Bold.woff2","path":"vendors/googleapis/fonts/Lato/Lato-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Italic.woff","path":"vendors/googleapis/fonts/Lato/Lato-Italic.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Italic.woff2","path":"vendors/googleapis/fonts/Lato/Lato-Italic.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Light.woff2","path":"vendors/googleapis/fonts/Lato/Lato-Light.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Regular.eot","path":"vendors/googleapis/fonts/Lato/Lato-Regular.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Regular.woff","path":"vendors/googleapis/fonts/Lato/Lato-Regular.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Regular.woff2","path":"vendors/googleapis/fonts/Lato/Lato-Regular.woff2","modified":1,"renderable":1},{"_id":"source/images/background.jpg","path":"images/background.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/images/background.jpg","path":"images/background.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Bold.ttf","path":"vendors/googleapis/fonts/Lato/Lato-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Light.ttf","path":"vendors/googleapis/fonts/Lato/Lato-Light.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Light.woff","path":"vendors/googleapis/fonts/Lato/Lato-Light.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Regular.svg","path":"vendors/googleapis/fonts/Lato/Lato-Regular.svg","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Regular.ttf","path":"vendors/googleapis/fonts/Lato/Lato-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Italic.ttf","path":"vendors/googleapis/fonts/Lato/Lato-Italic.ttf","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.all-contributorsrc","hash":"0ca0200bb5cba4cd157f2cb74703c4cb4c29cda5","modified":1548114484512},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1548114484513},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1548114484514},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1548114484514},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1548114484515},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1548114484522},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1548114484523},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1548114484522},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1548114484524},{"_id":"themes/next/_config.yml","hash":"eb295b120546b1efcf8485a0c3b0f006399a5df0","modified":1556853937544},{"_id":"themes/next/bower.json","hash":"b17bf6ad5dd98d60129a0827b48b59f2f349b7be","modified":1548114484529},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1548114484530},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1548114484562},{"_id":"themes/next/package.json","hash":"159d8e0a65ad1f9457745e4864d6a882238d1df7","modified":1548114484955},{"_id":"themes/next/README.md","hash":"943f9fd6ed1781350cdd05a26a1cfad24d035c8b","modified":1548114484526},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1548114484470},{"_id":"themes/next/.git/config","hash":"7f8b507977a695e25b27d4c2e8aaed71410536bf","modified":1548114484480},{"_id":"themes/next/.git/packed-refs","hash":"63d6a31d43e08bb351153303c6155a9147e28052","modified":1548114484463},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"22f2ccc5522563b67c8663849fc1d6cbae93a8ff","modified":1548114484517},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"40b0fd9fdb8586fab98e23f713940e7a2f80e2f9","modified":1548114484518},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1548114484519},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"557cc83af06b46418fd4d18e2ddcfd56bd5d69c6","modified":1548114484519},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1548114484520},{"_id":"themes/next/.github/stale.yml","hash":"a24e464fa77d6687010ffe89af9aa10cb1270efe","modified":1548114484521},{"_id":"themes/next/.git/index","hash":"88c28ead685d288fdf0901bf705f78b3be03c61e","modified":1556855236026},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1548114484533},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1548114467239},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1548114484534},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1548114484535},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1548114484536},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1548114484537},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1548114484541},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1548114484542},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1548114484543},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1548114484544},{"_id":"themes/next/layout/_layout.swig","hash":"e08df2bb1aeb3690a91e0c17a46b2e0a0e176e5b","modified":1551762948166},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1548114484950},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1548114484951},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1548114484951},{"_id":"themes/next/layout/page.swig","hash":"1d28997ec69d3c236c0dac86cc7a8fbcfdbbb03f","modified":1548114484952},{"_id":"themes/next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1548114484953},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1548114484954},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1548114484954},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1548114484564},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1548114484565},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1548114484564},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1548114484565},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1548114484567},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1548114484566},{"_id":"themes/next/languages/ja.yml","hash":"82afb0a5637ad67065fa5b2624fa56c7c240c3c6","modified":1548114484567},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1548114484568},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1548114484569},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1548114484569},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1548114484570},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1548114484570},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1548114484571},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1548114484572},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1548114484572},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1548114484573},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1548114484574},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1548114484574},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1548114484960},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1548114484963},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1548114485148},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1548114485148},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1548114485149},{"_id":"source/_posts/BZOJ1001.md","hash":"70f55ee9e890903c539a27f3ddec1da47d62bef8","modified":1552080273248},{"_id":"source/_posts/BZOJ1002.md","hash":"543929ce2b4f82c6139a45db34f17c8c6e193155","modified":1552080191277},{"_id":"source/_posts/BZOJ1003.md","hash":"04f898f0607f258d8eabb06a19916e51c1c0bc0b","modified":1551618560303},{"_id":"source/_posts/BZOJ1016.md","hash":"b501bab76475c195413da7ada5b74faa511c823c","modified":1552952287395},{"_id":"source/_posts/BZOJ3534.md","hash":"d5f197f03a4358b7c8668a37e73dc72b045d6c95","modified":1552056598735},{"_id":"source/_posts/LCT.md","hash":"ab51714eacac60c3207b1cf9f7bc36f6b6bbe40c","modified":1532772060867},{"_id":"source/_posts/SCOI2014-Luogu-P3288-方伯伯运椰子.md","hash":"b27413664109dbb60618d1f3216cbdb7f7646dc3","modified":1555981621246},{"_id":"source/_posts/YNOI做题记录.md","hash":"ce211e0d51c62b642cdf4acd68f1e18a616fc26e","modified":1551883991565},{"_id":"source/_posts/ZJOI2016-书架.md","hash":"4526c0285d462ae1ff21da8ea011781bdad6fd04","modified":1552886382380},{"_id":"source/_posts/hello-world.md","hash":"77ab046043d778f2942086990187a572d619e9f7","modified":1556854342662},{"_id":"source/_posts/luogu-P3994-高速公路.md","hash":"be3e731d401e4dc722c79a53175824bb06bd1e65","modified":1556463929138},{"_id":"source/_posts/luogu-P4027-NOI-2007-货币兑换.md","hash":"e8599b09afec341f79d8875fbea82d731f9cd4a4","modified":1556680852359},{"_id":"source/_posts/todolist.md","hash":"dcabe42998586d7a0a52e69033716aaf804ac51b","modified":1556256760411},{"_id":"source/_posts/一些有趣的结论.md","hash":"c4a0c12858e47ea841d75589e1205d733a9a5bce","modified":1554049440369},{"_id":"source/_posts/主席树-可持久化线段树.md","hash":"d3e62f0edf70d5649b7605907538c1af2897a765","modified":1532162593165},{"_id":"source/_posts/九省联考2018-相逢是问候.md","hash":"68e1daa8dab8744f489631651f1c207ae927fc60","modified":1552920761770},{"_id":"source/_posts/多项式算法做题记录.md","hash":"029f26004e356a9dac8af65dd96400aa714a665f","modified":1550872772859},{"_id":"source/_posts/可持久化平衡树.md","hash":"fd36682b1241134cdac14e7d7ea2b6722ddbe5f0","modified":1532162580033},{"_id":"source/_posts/多项式算法小结.md","hash":"c5692a38161670afa3805868b17f093b78d20512","modified":1551020601016},{"_id":"source/_posts/替罪羊树.md","hash":"4c136f63a89d982b2a502df62be8e020f94efa7d","modified":1548113732187},{"_id":"source/_posts/点分治.md","hash":"d0c0b307096ea3951f8f34db483e42a68c915f49","modified":1532162585803},{"_id":"source/_posts/矩阵树定理总结.md","hash":"c0331b2a03ff60fdf169638ac158da6c57cf277f","modified":1552218087426},{"_id":"source/_posts/蒟蒻_WA自动机的模板库.md","hash":"8ce5daea921b34edb7e524fc54a5a8f699a01f27","modified":1556353353200},{"_id":"source/_posts/虚树.md","hash":"0de742d90e9ff4a30bc1ac8ce7777a495f183784","modified":1532162568158},{"_id":"source/about/index.md","hash":"9f74925d4d9ae032c8478b23c774af3955171e9c","modified":1552952263873},{"_id":"source/tags/index.md","hash":"914aacb8cd416e1511528779b96f7184300f2cdc","modified":1532043406527},{"_id":"source/links/index.md","hash":"e81faf78d59fa4b51ee6b05290b62b1bd615517a","modified":1554042573990},{"_id":"source/categories/index.md","hash":"beb51d27367b19c65d18fc76d41d341021ca3225","modified":1532043433644},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548114485082},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1548114467241},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1548114467241},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1548114467242},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1548114467242},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1548114467243},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1548114467244},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1548114467244},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1548114467246},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1548114467247},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1548114467248},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1548114467248},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1548114467249},{"_id":"themes/next/.git/logs/HEAD","hash":"ac70caf7b53f1327131a72f6595c94ebb4060384","modified":1548114484474},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1548114484546},{"_id":"themes/next/docs/ru/README.md","hash":"0b69e831b4617f801d9b49e8ce810daacbbee6c1","modified":1548114484548},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1548114484547},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1548114484549},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1548114484551},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1548114484552},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"6ea741f380dc3e90661d12db7e115a94b77643a4","modified":1548114484555},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1548114484557},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1548114484557},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1548114484559},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"734b371a0dd910eb9fe087f50c95ce35340bb832","modified":1548114484560},{"_id":"themes/next/docs/zh-CN/README.md","hash":"7fb215a0a633384948ac9228ac14617b4a974dbd","modified":1548114484561},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1548114484562},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1548114484576},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1548114484576},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1548114484577},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1548114484580},{"_id":"themes/next/layout/_macro/post.swig","hash":"799bd11921682c51db6cb92ed57b6a8679c93ee1","modified":1548114484581},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"838686a5d2c3ae5c03b69842e931d9efe276e55a","modified":1548114484582},{"_id":"themes/next/layout/_partials/comments.swig","hash":"54afb7b78509ed8fac5d23daecc147b0fe615d1d","modified":1548114484583},{"_id":"themes/next/layout/_partials/footer.swig","hash":"6d56acdcdc12ebca9c1d90f8a2b52ad17aafca6e","modified":1548114484584},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"710ae10cb6cafc21e40c57dd9b31f0980b030f4b","modified":1548114484584},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1548114484591},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1548114484592},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"6337747816219616916e73bdfd6961a164f872cf","modified":1548114484602},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"c31d54154eed347f603009d2d65f7bf8d9a6885a","modified":1548114484603},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1548114484604},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"68ad21aef6481d014e7ec0b674e469f2f82ea231","modified":1548114484609},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1548114484928},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"c80b04aabdeef0e03a08284c82324089710abd45","modified":1548114484935},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"9e00cb9b3fdfe2e2c4877a874d0d3ecb7fd0f3ee","modified":1548114484936},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1548114484940},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1548114484940},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"d66dec72ea7ad5026260914e3545551645e0ab37","modified":1548114484941},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1548114484941},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"85ca359866325ce82f5f0f88576fae13a763b5eb","modified":1548114484942},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"f58463133bf8cfef5ff07f686b834ff8cbbe492f","modified":1548114484942},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1548114484958},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"3db90c52bc8af57c6fa4a9dbdc524e1ecdc8b7b1","modified":1548114484960},{"_id":"themes/next/scripts/tags/button.js","hash":"dba55534ef4a11fb6723ec73e3ef4dcf7589ed9f","modified":1548114484965},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1548114484965},{"_id":"themes/next/scripts/tags/exturl.js","hash":"e9dab948e6327b22b4fc0c66cf97f6600a444dd5","modified":1548114484966},{"_id":"themes/next/scripts/tags/full-image.js","hash":"b2ed8de4065c302fac1654f0d3d3ecb5fa6e0f80","modified":1548114484967},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"03575b534303f42c81ba6187ec601a5578913a39","modified":1548114484967},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1548114484968},{"_id":"themes/next/scripts/tags/label.js","hash":"48f68ab33d42e638c2ab5f89f40c34fc2fa1e6dc","modified":1548114484969},{"_id":"themes/next/scripts/tags/note.js","hash":"f1b560d6e63d1b06fd80e12bbac32660125c223c","modified":1548114484969},{"_id":"themes/next/scripts/tags/tabs.js","hash":"ca885c8fa46a76a7b8977730575551622497410b","modified":1548114484970},{"_id":"themes/next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1548114485081},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1548114485083},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1548114485084},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1548114485085},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1548114485087},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1548114485088},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1548114485090},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1548114485089},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1548114485090},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1548114485091},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1548114485092},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1548114485093},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1548114485094},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548114485094},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1548114485095},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548114485096},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1548114485096},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1548114485098},{"_id":"themes/next/source/js/firework.js","hash":"2ab908ba3852e341dc58eee855d202c134a17e3e","modified":1550670852099},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1548114485097},{"_id":"source/_posts/多项式算法小结/LCHAK.jpg","hash":"7cf561bc6f7711c363a83314c6fc7607c7fd4ed5","modified":1550288544942},{"_id":"source/_posts/矩阵树定理总结/Matrix1.jpg","hash":"e2bb27b3e6da591c40e88d88bb84aa2f84049ecb","modified":1551867176161},{"_id":"source/images/CNS.jpg","hash":"75408841bb5a05daea3bf63f3d166fcc6448b023","modified":1552314781597},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548114485027},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548114485028},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548114485030},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548114485079},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548114485081},{"_id":"themes/next/.git/refs/heads/master","hash":"22506479f1cf8616ce303d23ede20f7534f82955","modified":1548114484474},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1548114484579},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1548114484579},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1548114484585},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"4b53a0659a7e800871d8e9a4bd20f7b892a8e29b","modified":1548114484586},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"187316a1d565f98eac138b5ce2180b52a190028c","modified":1552205303611},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"daa6e5b7dbc409d6bf8a031d5413d8229e9c0995","modified":1548114484590},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1548114484590},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"2177da1d3c64abb6b3398f90885cf543ae6fe6da","modified":1548114484587},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1548114484588},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"e92154bf3d46127aa51858734da3a295944cf883","modified":1548114484588},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1548114484589},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"55de88525c05af6053524c78ef4b42b46c3bfb6d","modified":1548114484593},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1548114484594},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"b6e7d0af24b4d52d168a4eb0fb29bffa69621395","modified":1548114484595},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"0949c72a944b9abd5e5cc654b5556ac9450d431b","modified":1548114484595},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1548114484597},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1548114484597},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1548114484598},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1548114484599},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1548114484600},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1548114484601},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"0110cdf5233de4d26ccddd1e84497b0fd18d16fa","modified":1548114484601},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"e0f0a753d4920ffb37ddbc8270515654a0b9b92a","modified":1548114484605},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1548114484606},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1548114484607},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"84018384d00e4a584d613589adae6674a3060a36","modified":1548114484608},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"23c6d15aa2a305f9d29caee1b60cfae84d32fa09","modified":1548114484608},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1548114484611},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1548114484611},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1548114484612},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1548114484613},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1548114484614},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"53202062267391353d49f269e7eb74eb87d30921","modified":1548114484923},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1548114484924},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"69d7697cbf423efad54d47dad038a5afc2e02695","modified":1548114484925},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"42a2f9e708100d63dac55bb8e1ca5f024e4e1162","modified":1548114484925},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1548114484926},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"a4d752d17ddfc579730401ff3e3dfd4ec290c8de","modified":1548114484926},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1548114484927},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1548114484927},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"6143aa0ed0d9bbe24c5859f66ea0a5611d73ecd2","modified":1548114484928},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1548114484930},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1548114484930},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"8bcc3430241e267a06abfbb4e9ca125838bc5a71","modified":1548114484931},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"3302e650ccf2d32b37f4d364e972eb65008f7e4c","modified":1548114937272},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"bd529bf26f28745eb8ded3be7652d33d55fec8d4","modified":1548114484932},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1548114484933},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"bd6d763c1233cd89512c323ce0992daf7f9fd0e5","modified":1548114484934},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1548114484937},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1548114484938},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"6f7217ff64cf67ee239954d3499a3c9e76bad061","modified":1548114484938},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1548114484945},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1548114484947},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1548114484948},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"ce101432cca9cc174730eb75ca65185b2cb2e456","modified":1548114484949},{"_id":"themes/next/scripts/filters/after_post_render/exturl.js","hash":"bfa8e5a91d22a5ba22e8f3da337fdb5e8b2600fd","modified":1548114484957},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1548114485027},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1548114485029},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"d1deb849e697cfb6258b8ab7bfb47e219210ccd9","modified":1548114485030},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"675ea1d46837719262d8b71abda352c624374a21","modified":1551763187789},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1548114485079},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1548114485079},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1548114485078},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e37aab667be94576f6145b61a78cfe87836c68b6","modified":1548114485080},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1548114485111},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1548114485112},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1548114485112},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1548114485112},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1548114485113},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1548114485100},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1548114485101},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1548114485102},{"_id":"themes/next/source/js/src/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1550669279674},{"_id":"themes/next/source/js/src/dynamic_bg.js","hash":"7faf0de918a6cdb45f28b3eed9d66d568d1cd8d1","modified":1550669942055},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1548114485103},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1548114485103},{"_id":"themes/next/source/js/src/post-details.js","hash":"d94a98b335fd3db61164cab6977cd1228d4a72fc","modified":1550049333643},{"_id":"themes/next/source/js/src/motion.js","hash":"e70f961d24e4e61a2df5bf640ab51acee8f1ffbd","modified":1548114485105},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1548114485108},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1548114485109},{"_id":"themes/next/source/js/src/utils.js","hash":"e1dc6941b3c545dd0c1f71b49ac277673dfca61a","modified":1548114485110},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1548114485144},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1548114485146},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1548114485147},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"ac70caf7b53f1327131a72f6595c94ebb4060384","modified":1548114484476},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1548114484468},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"89e41d4c298d8d70b4d1c833c7e599d089f2b3d4","modified":1548114484944},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1548114484945},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"bbb788b453236e5b4af7c81df8efcfc6bde08903","modified":1548114484972},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1548114484972},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1548114484973},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1548114484974},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1548114484974},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1548114484988},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1548114485007},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1548114485019},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"c0e8647244e1ef106e94c3c8ac4a64bca2677159","modified":1548114485021},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"cb2c0beb69bfc56c0ed86e609bc1c35edb799b99","modified":1548114485021},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"33a74fcd6c38cea356f6d2994a19f46dcfd5d8a4","modified":1548114485022},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1548114485024},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1548114485023},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"fc491fd2d53d338f63e1be7d3ed312f8065c7b93","modified":1548114485025},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"5f1e5d7b9d44ef3e6ad442e083753fee76d3b112","modified":1548114485032},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1548114485033},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"eecb2081ee1eef1e2152c7fea9310366e33b1eac","modified":1548114485035},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1548114485035},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"a80782a6eb3b40da2e14251da49069aff3115d8a","modified":1548114485035},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"15254414a52f05618c54a2ac7f4635f99077ec30","modified":1548114485038},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"9f35b95beb344f4eeca5ca584fbe7206f791372e","modified":1548114485037},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1548114485040},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1548114485041},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4ed12bf17eeb7cd4f22dd01fdd486cda68d169a8","modified":1548114485042},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"9f35b95beb344f4eeca5ca584fbe7206f791372e","modified":1548114485042},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1548114485043},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"30d61fa31e405fcfe3d2ff6174ccad60be1745f9","modified":1548114485045},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"28f0444ccdc85a34ada651d8ee52479e16311167","modified":1548114485045},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1548114485046},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"11fcaaf7524445a194801e1048ea2fb84b316414","modified":1548114485046},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"a5395766dfdda81285d0cd3ddebe8e8bc924fa2a","modified":1548114485047},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1548114485047},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1548114485077},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1548114485115},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1548114485116},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1548114485117},{"_id":"themes/next/source/js/src/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1548114485107},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1548114485107},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1548114485135},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1548114485135},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1548114485133},{"_id":"themes/next/source/vendors/googleapis/css/Lato.css","hash":"55a0ba3afaa637a1bfc3e375552b1e45d359a37f","modified":1551785709560},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1548114485036},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1548114485128},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1548114485130},{"_id":"themes/next/images/background.jpg","hash":"19c6769309139b99a1be0e5c3930d4a98ffcc4dd","modified":1551624381446},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1548114485143},{"_id":"themes/next/.git/objects/pack/pack-bfde4d5059c8487332346b86515e3cce1f8d4aee.idx","hash":"54e36305c5df3c5ee5a67ba316a98577853e8dd4","modified":1548114484306},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"ac70caf7b53f1327131a72f6595c94ebb4060384","modified":1548114484468},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1548114484976},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"48bb741f6bda73b322a25a8fbe37fd3d5e0ff601","modified":1548114484977},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1548114484977},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1548114484978},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1ec3102ee8f5b8cc0877da1fd109d37470401e7b","modified":1548114484978},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1548114484979},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1548114484980},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1548114484981},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"32bbf059c57677e754a918c927ac63e2d843108f","modified":1548114484981},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1548114484982},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1548114484984},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1548114484984},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1548114484985},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1548114484986},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1548114484986},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"db1df0186a4572844d69d0d7bb974bd120cb64d5","modified":1548114484987},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1548114484989},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3241c9ae85ca11b6c4e125ac471aa4342ba1ce9c","modified":1548114484990},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1548114484991},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"77da38898bdd99cf8fd3e0ae8cc4d2ac943bcb60","modified":1548114484991},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"8478b51892b663f39f7eb830476315e804cbf037","modified":1548114484992},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1548114484994},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1548114484993},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"7b69c1ad392f8a386854e318d4c8ddeb9ba8d793","modified":1548114484994},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"2ea91d7b75966d471bf857a9f3fbf87fd01aea90","modified":1548114484995},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"989b7d718914b5242506947aa5767b3f2480d8f9","modified":1548114484996},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1548114484996},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1548114484996},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1548114484997},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1548114484997},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1548114484998},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"2e36956c5f8802f703c7ce3893d16323a0e09d4c","modified":1548114484999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1548114484999},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"2e26e4429c2457b8ca12555426659c2fc65a5cea","modified":1548114485000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"41858f2dfd34a57d0a2016b1bce08efb61943b7a","modified":1548114485001},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1548114485001},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"4c1705e5c3fbf0e3f5d3fb29edec4a29c87b4c95","modified":1548114485002},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1548114485004},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"dd5f7057680faefc9306fab3172106f762c1a517","modified":1548114485005},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"b9a19654b6a2685b5426afac8b09cdbd80fae00c","modified":1548114485005},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"4ec203c52db47bca67c229ef1f3693c9d40b4ef9","modified":1548114485006},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"f1fdfd0bc6b66a38581a4fbe096b25aadfc53246","modified":1548114485007},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1548114485008},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1548114485009},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1548114485009},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1548114485010},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"2937e566ad0f3d9adc0865b269fdca62b7576fdd","modified":1548114485011},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"72cabf6edfd64697e37950cc3e66fbea6ba47b66","modified":1548114485010},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"30ccc107061dc23943198f087759079161ee24e9","modified":1548114485012},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"f1640253cbbf71d0c04c34c25bd61045894f98bc","modified":1548114485013},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f26c32a0c3045e5ae826b983abc3a3c139456663","modified":1548114485014},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1548114485014},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"49913bb2b702d52d77528cd9378126aa67c0082c","modified":1548114485015},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1548114485015},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1548114485016},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1548114485017},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"74412b0bf4ec0d28aedd2e60b27affd4d5cd1452","modified":1548114485017},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3529aae283864fa0f09925ee8217905632e9a930","modified":1548114485018},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1548114485038},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1548114485039},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1548114485044},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Bold.woff","hash":"d95b4d87031597b29d973d67cdc789985c01cc9c","modified":1551785710216},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Bold.woff2","hash":"f9f75a2fe3acd236ad17392cd47b3851216e15cd","modified":1551785710088},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Italic.woff","hash":"0784888c48d1eb328958113f729269f9643b60f8","modified":1551785710088},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Italic.woff2","hash":"e80115e2987120b6f2741c1cca647aa177719384","modified":1551785710085},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Light.woff2","hash":"f8144e0c7432378d9255a6638ebf408c7f716227","modified":1551785710064},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Regular.eot","hash":"e91846f6afb123ef01d5c249798ff560fc824999","modified":1551785710090},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Regular.woff","hash":"2c386a2ddb0176263b6c9c9371b4227434c0bc56","modified":1551785710216},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Regular.woff2","hash":"9ec1e9cf92fd9c7b700fcef4d52dcca4a3996f0e","modified":1551785710165},{"_id":"source/images/background.jpg","hash":"19c6769309139b99a1be0e5c3930d4a98ffcc4dd","modified":1551624381446},{"_id":"themes/next/source/images/background.jpg","hash":"19c6769309139b99a1be0e5c3930d4a98ffcc4dd","modified":1551624381446},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1548114485126},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Bold.ttf","hash":"4c2ed371db850934ad83b2d830abbf6bda9bb5a0","modified":1551785710218},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Light.ttf","hash":"488b12ffb5e1ac5e140381653b00426d90ce87b9","modified":1551785710263},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Light.woff","hash":"0669dad4fbddb667cd1f8a774d99b8ef1e70588e","modified":1551785710164},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Regular.svg","hash":"b45bb4b30e028e6aaefcbc29060d572a4a1744e7","modified":1551785710263},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Regular.ttf","hash":"dd31faf30e23b2b573df522447a1a360c0620cc5","modified":1551785710218},{"_id":"themes/next/source/vendors/googleapis/fonts/Lato/Lato-Italic.ttf","hash":"39a1e9bec479cc4bea80cd2fcd00e883ac6f7ffb","modified":1551785710262},{"_id":"themes/next/.git/objects/pack/pack-bfde4d5059c8487332346b86515e3cce1f8d4aee.pack","hash":"d673059d63dd3ab094023534fbedae8c51614c5b","modified":1548114484367},{"_id":"source/_posts/多项式算法小结/国家集训队2016论文集.pdf","hash":"9636f1a0f1b52fb3ae1474774345d37922665ab9","modified":1550871200586},{"_id":"public/about/index.html","hash":"4dcca27a41effeb96b92fc0b02fbf00c6903ad9d","modified":1556855467447},{"_id":"public/tags/index.html","hash":"9903a08a6968aa501cef4743613cae2e8ca63a2e","modified":1556855467447},{"_id":"public/links/index.html","hash":"409a4a84a7a139fc63c0f285a77c357fa550bcd0","modified":1556855467447},{"_id":"public/categories/index.html","hash":"32854da79bcdb5f59eb32bd20bf68138a05c347e","modified":1556855467447},{"_id":"public/2333/03/03/todolist/index.html","hash":"996d15d3c39fc637b12489ef0497037dd7996a8f","modified":1556855467447},{"_id":"public/2033/03/05/一些有趣的结论/index.html","hash":"6e4a6507328e88f73496d631d659f03dd5434054","modified":1556855467447},{"_id":"public/2022/01/21/蒟蒻_WA自动机的模板库/index.html","hash":"5847456b5d01c227f75c93ed8899922713abeea0","modified":1556855467447},{"_id":"public/2019/04/29/luogu-P4027-NOI-2007-货币兑换/index.html","hash":"36888730fe52b45370a6fc23b26f60c61910303d","modified":1556855467447},{"_id":"public/2019/04/28/luogu-P3994-高速公路/index.html","hash":"dcd4a5311532a0cef345138b6ec55dba414691c6","modified":1556855467448},{"_id":"public/2019/04/22/SCOI2014-Luogu-P3288-方伯伯运椰子/index.html","hash":"b7ad6a18f22e307d151e126b5b8f2a89c9991fbb","modified":1556855467448},{"_id":"public/2019/03/18/ZJOI2016-书架/index.html","hash":"9f022542c1ce252ed21527c52265c634d07711b2","modified":1556855467448},{"_id":"public/2019/03/18/九省联考2018-相逢是问候/index.html","hash":"94d5576b14fe199ef6a752c974ed4d231771330f","modified":1556855467448},{"_id":"public/2019/03/08/BZOJ1016/index.html","hash":"0ba6f2291192aaec11f3862244f9cc41731bc94d","modified":1556855467448},{"_id":"public/2019/03/07/BZOJ3534/index.html","hash":"dad108977a6c2ee4c531cedde7a4ce28470165b6","modified":1556855467448},{"_id":"public/2019/03/06/矩阵树定理总结/index.html","hash":"e989c5633479b41f149765f83a8bb80fa8cca49a","modified":1556855467448},{"_id":"public/2019/03/03/BZOJ1003/index.html","hash":"ba16c49edf228b944339941a3b3dc9cd57f95d42","modified":1556855467448},{"_id":"public/2019/03/03/BZOJ1002/index.html","hash":"203aef7bc2519e76a55bff36294ce97e2789f7f5","modified":1556855467449},{"_id":"public/2019/03/03/BZOJ1001/index.html","hash":"ae1d18d7e00ad2d2864bca94299be4212444358d","modified":1556855467449},{"_id":"public/2019/02/18/多项式算法小结/index.html","hash":"20a9d544977ff2c105fe58473aa0bb6100bb9db8","modified":1556855467449},{"_id":"public/2019/02/15/多项式算法做题记录/index.html","hash":"be8f439045511210d608838482780e0114885b10","modified":1556855467449},{"_id":"public/2019/02/06/YNOI做题记录/index.html","hash":"1c2e37902cb2fc44053681fc46e4b26ba96d655d","modified":1556855467449},{"_id":"public/2018/07/23/LCT/index.html","hash":"a83c9a208b0b99f4c4201f45fed6181070a1da47","modified":1556855467449},{"_id":"public/2018/07/21/替罪羊树/index.html","hash":"c37c7e191cb65a3a1c8d1dfca03cb5cd91a8c441","modified":1556855467449},{"_id":"public/2018/07/21/可持久化平衡树/index.html","hash":"e4cedd84dc395f221b88bf02020388befd078d7b","modified":1556855467449},{"_id":"public/2018/07/21/主席树-可持久化线段树/index.html","hash":"611fdfd4165fbe1884a454a66ac97f04c822db67","modified":1556855467449},{"_id":"public/2018/07/21/虚树/index.html","hash":"c603804f98ec598cd9464590d6b0f76a79778748","modified":1556855467449},{"_id":"public/2018/07/20/点分治/index.html","hash":"abea4202ea1faee9fca621eb671776b33e8950fa","modified":1556855467449},{"_id":"public/2018/07/15/hello-world/index.html","hash":"289632181aadb4099877602b4e95ed1a495ed3cb","modified":1556855467449},{"_id":"public/archives/index.html","hash":"f404d79682513cd5433cc50d818be32c9a4708b1","modified":1556855467449},{"_id":"public/archives/page/2/index.html","hash":"e1947cbc27a29881f8ca295ddb06d181b6d9a1bd","modified":1556855467449},{"_id":"public/archives/page/3/index.html","hash":"4c9fa0d326eebeaad231118abd8ed95c8fe63192","modified":1556855467450},{"_id":"public/archives/2018/index.html","hash":"e40f750bfbd16dece3f36f0baee44734ed04b0e6","modified":1556855467450},{"_id":"public/archives/2018/07/index.html","hash":"411c189b8963ffb369f27bd8a3068e6cc5955078","modified":1556855467450},{"_id":"public/archives/2019/index.html","hash":"25c3cd8a1a2345113690b3348a1acf49997b2efd","modified":1556855467450},{"_id":"public/archives/2019/page/2/index.html","hash":"b65789b39b3e7f255f413e3143864ba3a77d62bf","modified":1556855467450},{"_id":"public/archives/2019/02/index.html","hash":"efb2dfce8fa9d157851e585bb742ad2da7a69dfc","modified":1556855467450},{"_id":"public/archives/2019/03/index.html","hash":"b1a4dda47889b1d8d511f0b415827be1b091a0f6","modified":1556855467450},{"_id":"public/archives/2019/04/index.html","hash":"97b43aca424d62c848ab50c562d7d3d6c547eede","modified":1556855467450},{"_id":"public/archives/2022/index.html","hash":"eea41f04780da03f87e5fae8a6c4852b8f9aca19","modified":1556855467450},{"_id":"public/archives/2022/01/index.html","hash":"0a04c2debf6cb5d76bf82ef80d6e8711c1687549","modified":1556855467450},{"_id":"public/archives/2033/index.html","hash":"6d9e5f1b7ec9157ad509bc79b34b07904539fe2d","modified":1556855467450},{"_id":"public/archives/2033/03/index.html","hash":"3be068f335e5225621d75471a429298ea9feac29","modified":1556855467450},{"_id":"public/archives/2333/index.html","hash":"17922832f921cd15709f0c1fce1f64122523e38f","modified":1556855467450},{"_id":"public/archives/2333/03/index.html","hash":"8449e2a7566759283707ed3c7ef664c43a5d1cbb","modified":1556855467450},{"_id":"public/categories/题解/index.html","hash":"8b72bc627e44c9f8e34c3392b25e5ee44034a7c8","modified":1556855467450},{"_id":"public/categories/题解/BZOJ百题计划/index.html","hash":"4f3a08b14536d68fb7e96476fa6ef5bbd7fdd077","modified":1556855467450},{"_id":"public/categories/学习笔记/index.html","hash":"1ff1af2ce67ae117b9ea5b7c69e294e9ca827c23","modified":1556855467450},{"_id":"public/categories/任务计划/index.html","hash":"16c766af8d59fdb0796f93f570ebe3c2bb79b404","modified":1556855467451},{"_id":"public/categories/随笔/index.html","hash":"2ff6921ea353b5528c5dac30d26289ad84c842cb","modified":1556855467451},{"_id":"public/categories/模板/index.html","hash":"621542908e86042d660f81258b7f01a8384118a2","modified":1556855467451},{"_id":"public/tags/网络流/index.html","hash":"faa375b26558f7ff3d16fa81290744c7365cc99b","modified":1556855467451},{"_id":"public/tags/矩阵树定理/index.html","hash":"76ae8363f2066ae023b7e2148331b8cae8fdf002","modified":1556855467451},{"_id":"public/tags/数学/index.html","hash":"18c62d11b2a53087a612e4187f4c2ec785217f97","modified":1556855467451},{"_id":"public/tags/计数问题/index.html","hash":"e15cab48ab2737aba4c2854a66d2c406891cea2f","modified":1556855467451},{"_id":"public/tags/生成树/index.html","hash":"56512ad49eac2c34e53f048b8ac77a6b3f990462","modified":1556855467451},{"_id":"public/tags/概率期望/index.html","hash":"f62fe55b169939a62b2dba3eb880f93a0124295d","modified":1556855467451},{"_id":"public/tags/LCT/index.html","hash":"66473bdc5289cea34d7132c5a83461f6f8b60900","modified":1556855467451},{"_id":"public/tags/动态规划/index.html","hash":"1b664092ffd21a5df32d9dfa0578da71b39fd58a","modified":1556855467451},{"_id":"public/tags/斜率优化/index.html","hash":"441e637b0966d8f16e328bfc850086307003dcce","modified":1556855467452},{"_id":"public/tags/单调栈/index.html","hash":"aebaaffc0bdc71c29b62be6a1473898258e8d606","modified":1556855467452},{"_id":"public/tags/Todolist/index.html","hash":"d4907d98b810d0c1fb10dbb37e98de75fb431979","modified":1556855467452},{"_id":"public/tags/颓废/index.html","hash":"8da339b6e88c0d924b885b48f3624a585312f8a0","modified":1556855467452},{"_id":"public/tags/套路/index.html","hash":"a19d4e9e735171812716f07659250875f31ca5dc","modified":1556855467452},{"_id":"public/tags/主席树/index.html","hash":"0aa50c096e2559c4e1d090abf93c9d7be522dff7","modified":1556855467452},{"_id":"public/tags/可持久化/index.html","hash":"7529f774ac808b2fcb347da0293729c84fc58743","modified":1556855467452},{"_id":"public/tags/线段树/index.html","hash":"050ef6544140da2feaa29edfe7e1d2369ef6015d","modified":1556855467452},{"_id":"public/tags/欧拉定理/index.html","hash":"bc7c6cc5288db25dc0990cd290297f8ab13a64d0","modified":1556855467452},{"_id":"public/tags/平衡树/index.html","hash":"2427e2d4e405a3d4bc3d7b62af054753ca1cbd37","modified":1556855467452},{"_id":"public/tags/可持久化平衡树/index.html","hash":"403486f70c5f8fa5525ebc9ccd1cd93e0a3b8fbc","modified":1556855467452},{"_id":"public/tags/点分治/index.html","hash":"0781cec468cca1f55163c336dba92d1878894de4","modified":1556855467453},{"_id":"public/tags/分治/index.html","hash":"8c6a3c5061e1dd8ee271ea892ab5b312c7f5f300","modified":1556855467453},{"_id":"public/tags/虚树/index.html","hash":"a731aa35927323573edd87ae4d74b6d458a0f31b","modified":1556855467453},{"_id":"public/tags/暴力/index.html","hash":"4063aedc1d8e9dbdeb5f81e161195d5882fc7082","modified":1556855467453},{"_id":"public/tags/替罪羊树/index.html","hash":"3e437950983cf26ea13b95d5ac1cd117310f7623","modified":1556855467454},{"_id":"public/tags/splay/index.html","hash":"19cfb10558b4f8a2c8a0f790a9fff926dce77874","modified":1556855467454},{"_id":"public/tags/treap/index.html","hash":"ca7e27ea20ef897ec6106b82d2d3db087740f274","modified":1556855467455},{"_id":"public/tags/多项式算法/index.html","hash":"90cd10ed62476a1e72af181819f7e353e8ce0537","modified":1556855467455},{"_id":"public/tags/数论/index.html","hash":"34c71f1e9b7f22fd55e81f65ced1647d1b9c623b","modified":1556855467455},{"_id":"public/tags/计数/index.html","hash":"631062ee76f9a32959e6e3f40ff67569e7b6cabe","modified":1556855467455},{"_id":"public/tags/线性代数/index.html","hash":"0f8470aa6d6c052ca91362a77a671a5bbe6c54be","modified":1556855467455},{"_id":"public/tags/高斯消元/index.html","hash":"6aef62e65657e1061b2e3e42dc3f480647a5f92c","modified":1556855467455},{"_id":"public/tags/分块/index.html","hash":"2b98be2fc69b72103bbe691679ddf36a47479dde","modified":1556855467455},{"_id":"public/tags/莫队/index.html","hash":"fd8f9e8e6de2e20d9d5893b228b2777932c08c06","modified":1556855467455},{"_id":"public/tags/YNOI/index.html","hash":"1fd4cb455207007f4f1a84a8d0757fd53397d818","modified":1556855467455},{"_id":"public/tags/毒瘤/index.html","hash":"1ebeb15207367a425f894bc118eccdd85e818014","modified":1556855467456},{"_id":"public/tags/数据结构/index.html","hash":"36d4333d91e3b0be5f7a01de84f9c4a415cc189e","modified":1556855467456},{"_id":"public/index.html","hash":"929cfe222cb15f85ba7932c2fd1b924c5b4f3354","modified":1556855467456},{"_id":"public/page/2/index.html","hash":"5a2b7ea299f0bfbfbe2b0d2bc443e997d10d89c4","modified":1556855467456},{"_id":"public/page/3/index.html","hash":"24ae1d9d2a8363b0338c37ad94eddf82129885ca","modified":1556855467456},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1556855467490},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1556855467490},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1556855467490},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1556855467490},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1556855467490},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1556855467491},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1556855467491},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1556855467491},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1556855467491},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1556855467491},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1556855467491},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1556855467491},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1556855467491},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1556855467491},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1556855467491},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1556855467491},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1556855467491},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1556855467491},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1556855467491},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1556855467492},{"_id":"public/vendors/googleapis/fonts/Lato/Lato-Bold.woff","hash":"d95b4d87031597b29d973d67cdc789985c01cc9c","modified":1556855467492},{"_id":"public/vendors/googleapis/fonts/Lato/Lato-Bold.woff2","hash":"f9f75a2fe3acd236ad17392cd47b3851216e15cd","modified":1556855467492},{"_id":"public/vendors/googleapis/fonts/Lato/Lato-Italic.woff","hash":"0784888c48d1eb328958113f729269f9643b60f8","modified":1556855467492},{"_id":"public/vendors/googleapis/fonts/Lato/Lato-Italic.woff2","hash":"e80115e2987120b6f2741c1cca647aa177719384","modified":1556855467492},{"_id":"public/vendors/googleapis/fonts/Lato/Lato-Light.woff2","hash":"f8144e0c7432378d9255a6638ebf408c7f716227","modified":1556855467492},{"_id":"public/vendors/googleapis/fonts/Lato/Lato-Regular.eot","hash":"e91846f6afb123ef01d5c249798ff560fc824999","modified":1556855467492},{"_id":"public/vendors/googleapis/fonts/Lato/Lato-Regular.woff2","hash":"9ec1e9cf92fd9c7b700fcef4d52dcca4a3996f0e","modified":1556855467492},{"_id":"public/vendors/googleapis/fonts/Lato/Lato-Regular.woff","hash":"2c386a2ddb0176263b6c9c9371b4227434c0bc56","modified":1556855467492},{"_id":"public/vendors/googleapis/fonts/Lato/Lato-Bold.ttf","hash":"4c2ed371db850934ad83b2d830abbf6bda9bb5a0","modified":1556855467492},{"_id":"public/vendors/googleapis/fonts/Lato/Lato-Light.woff","hash":"0669dad4fbddb667cd1f8a774d99b8ef1e70588e","modified":1556855467492},{"_id":"public/vendors/googleapis/fonts/Lato/Lato-Regular.ttf","hash":"dd31faf30e23b2b573df522447a1a360c0620cc5","modified":1556855467492},{"_id":"public/2019/03/06/矩阵树定理总结/Matrix1.jpg","hash":"e2bb27b3e6da591c40e88d88bb84aa2f84049ecb","modified":1556855467492},{"_id":"public/2019/02/18/多项式算法小结/LCHAK.jpg","hash":"7cf561bc6f7711c363a83314c6fc7607c7fd4ed5","modified":1556855467493},{"_id":"public/live2dw/assets/config.mlve","hash":"8a2696566b9a8eac4d2bcfb077dd7ab6e20e9707","modified":1556855467493},{"_id":"public/live2dw/assets/kutori/expressions/f01.exp.json","hash":"04dc56f3eea170a3194ac91b10db4761160d8045","modified":1556855467493},{"_id":"public/live2dw/assets/kutori/expressions/f02.exp.json","hash":"6010edd096b932f319243c73ec522c6d7697b852","modified":1556855467493},{"_id":"public/live2dw/assets/kutori/expressions/f03.exp.json","hash":"3fd4100bb7976280413c8ad6d653fcde6b80c7e8","modified":1556855467493},{"_id":"public/live2dw/assets/kutori/kutori.model.json","hash":"a89cca122922a712348c3c43bc3ce40ca1739bae","modified":1556855467493},{"_id":"public/live2dw/assets/kutori/motions/idle/haru_idle_03.mtn","hash":"ae4d644bb0a50fa0416283b80fd0a63020594fe1","modified":1556855467493},{"_id":"public/live2dw/assets/kutori/motions/idle/haru_idle_01.mtn","hash":"f9793b5bf50daca7de9a70ce780a790a6123166e","modified":1556855467493},{"_id":"public/live2dw/assets/kutori/motions/tap/08%2000_07_55-00_07_59.mtn","hash":"300de3ef03f46ce0173d3971ffa54cbe10813a05","modified":1556855467493},{"_id":"public/live2dw/assets/kutori/motions/tap/08%2000_07_38.30-00_07_40.90.mtn","hash":"f3c8a55f985ac39385ab97cb2f0fb58b38a27ece","modified":1556855467493},{"_id":"public/live2dw/assets/kutori/motions/tap/08%2000_08_02.50-00_08_06.mtn","hash":"4e00b1c1cafbcb4bc1e323e6105d5deee54e545c","modified":1556855467493},{"_id":"public/live2dw/assets/kutori/physics.json","hash":"5619df77ad224ddbf7f72174e5d1fdae7bf99c01","modified":1556855467493},{"_id":"public/live2dw/assets/last.mlve","hash":"8a2696566b9a8eac4d2bcfb077dd7ab6e20e9707","modified":1556855467493},{"_id":"public/live2dw/assets/read%20me.txt","hash":"297c81d961a036f21be8291bea6134792ec55c2a","modified":1556855467493},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1556855467493},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1556855467943},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1556855467944},{"_id":"public/vendors/googleapis/fonts/Lato/Lato-Light.ttf","hash":"488b12ffb5e1ac5e140381653b00426d90ce87b9","modified":1556855467944},{"_id":"public/vendors/googleapis/fonts/Lato/Lato-Regular.svg","hash":"b45bb4b30e028e6aaefcbc29060d572a4a1744e7","modified":1556855467944},{"_id":"public/vendors/googleapis/fonts/Lato/Lato-Italic.ttf","hash":"39a1e9bec479cc4bea80cd2fcd00e883ac6f7ffb","modified":1556855467945},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1556855467945},{"_id":"public/js/firework.js","hash":"f4db481a0422afb08b10d8189fa92a1433da46b0","modified":1556855467954},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1556855467954},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1556855467955},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1556855467955},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1556855467955},{"_id":"public/js/src/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1556855467955},{"_id":"public/js/src/dynamic_bg.js","hash":"e0d13b838e6d91d975d1eb69a76a4b974539cf8d","modified":1556855467955},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1556855467955},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1556855467955},{"_id":"public/js/src/post-details.js","hash":"38edab4e63e6f8b0193f25088245bb8b72647376","modified":1556855467955},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1556855467955},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1556855467955},{"_id":"public/js/src/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1556855467956},{"_id":"public/vendors/googleapis/css/Lato.css","hash":"55a0ba3afaa637a1bfc3e375552b1e45d359a37f","modified":1556855467956},{"_id":"public/js/src/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1556855467956},{"_id":"public/css/main.css","hash":"b8adf724eb1501982bb9e6bdc3e4061dfe50e155","modified":1556855467956},{"_id":"public/images/CNS.jpg","hash":"75408841bb5a05daea3bf63f3d166fcc6448b023","modified":1556855467956},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1556855467956},{"_id":"public/live2dw/assets/kutori/kutori.moc","hash":"af19f81a50e8f0a5703c71656ee70b7e5b86d19d","modified":1556855467956},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1556855467956},{"_id":"public/js/src/motion.js","hash":"7933a30382a84b655238f6e78d42ea1b99af4de6","modified":1556855467963},{"_id":"public/js/src/utils.js","hash":"f1394d64977439ec569d2777b1ac304905e043f1","modified":1556855467963},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1556855467963},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1556855467963},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1556855467963},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1556855467973},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1556855468001},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1556855468001},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1556855468001},{"_id":"public/live2dw/assets/kutori/motions/tap/08%2000_07_38.30-00_07_40.90.wav","hash":"26406734f9484cf0d06d00d36d7cafa7264484dd","modified":1556855468005},{"_id":"public/images/background.jpg","hash":"19c6769309139b99a1be0e5c3930d4a98ffcc4dd","modified":1556855468013},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1556855468024},{"_id":"public/live2dw/assets/kutori/motions/tap/08%2000_08_02.50-00_08_06.wav","hash":"5aeccb96a20306320bd072670c2091b0871b680f","modified":1556855468031},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1556855468037},{"_id":"public/live2dw/assets/kutori/motions/tap/08%2000_07_55-00_07_59.wav","hash":"0d885bfcf066c403541b8999a7faeb41c1dfad9a","modified":1556855468044},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1556855468053},{"_id":"public/live2dw/assets/kutori/kutori.2048/texture_00.png","hash":"e5af1a30fd4385f1fa73215bb69d2810cbfaba74","modified":1556855468066},{"_id":"public/2019/02/18/多项式算法小结/国家集训队2016论文集.pdf","hash":"9636f1a0f1b52fb3ae1474774345d37922665ab9","modified":1556855468093}],"Category":[{"name":"题解","_id":"cjv7jjm180004v4ty4oyh5cmk"},{"name":"BZOJ百题计划","parent":"cjv7jjm180004v4ty4oyh5cmk","_id":"cjv7jjm1r000kv4tyf239od9l"},{"name":"学习笔记","_id":"cjv7jjm1u000ov4tyb38pu0dv"},{"name":"任务计划","_id":"cjv7jjm230018v4tyyiuc6z4w"},{"name":"随笔","_id":"cjv7jjm27001ev4tyx9fci0c7"},{"name":"模板","_id":"cjv7jjm8y0040v4tybcfn1u9w"}],"Data":[],"Page":[{"title":"About","date":"2018-07-19T03:11:24.000Z","comments":1,"_content":">  ~~即得易见平凡，由上自证显然，留作习题答案略，读者自证不难。~~  \n> ~~反之亦然同理，推论自然成立，略去过程Q.E.D，由上可知证毕。~~\n> \n您好！欢迎来到我的blog。博主是个蒟蒻。坐标HA,郑州外国语学校.现在高一，啥都不会，文竞两爆炸，没学上，在退役的边缘疯狂试探。欢迎来我的博客爆踩我T_T...\n\n支持中文的OJ上，我的ID都是\\_WA自动机.不支持中文的OJ上，我的ID是\\_WAautomaton.既不支持中文也不支持下划线的OJ上叫WA-automaton。（强行分类讨论\n\n喜欢二次元呀，但是窝太忙了qwq.等到大学再补番吧qwq.\n\n可能直到我退役之后，我的博客也不会有多少人看吧。但是没关系呀，写给自己看嘛qwq.如果能顺便给其他人带来帮助，那就更好了鸭！\n\n我的QQ：1548363105.(虽然可能并没有人能看到)（如果真的有人看到了并且想加好友的话，请备注省份和IDqwq..\n\n我的OI进程:\n\n| 比赛名称       | 结果 | 备注                             |\n| -------------- | ---- | -------------------------------- |\n| NOIP2017       | 省二 | OI第一战...                      |\n| NOI2018-Online | Fe   | 算上笔试也没到Cu线..             |\n| NOIP2018       | 省一 | HA rank30                        |\n| WC2019         | Fe   | 第一次线下参加NOI系列...被爆踩.. |\n\n能不能完整打完2018-2019，2019-2020两个赛季呢..?\n\n与诸君共勉！","source":"about/index.md","raw":"---\ntitle: About\ndate: 2018-07-19 11:11:24  \ncomments: true\n---\n>  ~~即得易见平凡，由上自证显然，留作习题答案略，读者自证不难。~~  \n> ~~反之亦然同理，推论自然成立，略去过程Q.E.D，由上可知证毕。~~\n> \n您好！欢迎来到我的blog。博主是个蒟蒻。坐标HA,郑州外国语学校.现在高一，啥都不会，文竞两爆炸，没学上，在退役的边缘疯狂试探。欢迎来我的博客爆踩我T_T...\n\n支持中文的OJ上，我的ID都是\\_WA自动机.不支持中文的OJ上，我的ID是\\_WAautomaton.既不支持中文也不支持下划线的OJ上叫WA-automaton。（强行分类讨论\n\n喜欢二次元呀，但是窝太忙了qwq.等到大学再补番吧qwq.\n\n可能直到我退役之后，我的博客也不会有多少人看吧。但是没关系呀，写给自己看嘛qwq.如果能顺便给其他人带来帮助，那就更好了鸭！\n\n我的QQ：1548363105.(虽然可能并没有人能看到)（如果真的有人看到了并且想加好友的话，请备注省份和IDqwq..\n\n我的OI进程:\n\n| 比赛名称       | 结果 | 备注                             |\n| -------------- | ---- | -------------------------------- |\n| NOIP2017       | 省二 | OI第一战...                      |\n| NOI2018-Online | Fe   | 算上笔试也没到Cu线..             |\n| NOIP2018       | 省一 | HA rank30                        |\n| WC2019         | Fe   | 第一次线下参加NOI系列...被爆踩.. |\n\n能不能完整打完2018-2019，2019-2020两个赛季呢..?\n\n与诸君共勉！","updated":"2019-03-18T23:37:43.873Z","path":"about/index.html","layout":"page","_id":"cjv7jjm140001v4tyz4hs96nt","content":"<blockquote>\n<p> <del>即得易见平凡，由上自证显然，留作习题答案略，读者自证不难。</del><br><del>反之亦然同理，推论自然成立，略去过程Q.E.D，由上可知证毕。</del></p>\n</blockquote>\n<p>您好！欢迎来到我的blog。博主是个蒟蒻。坐标HA,郑州外国语学校.现在高一，啥都不会，文竞两爆炸，没学上，在退役的边缘疯狂试探。欢迎来我的博客爆踩我T_T…</p>\n<p>支持中文的OJ上，我的ID都是_WA自动机.不支持中文的OJ上，我的ID是_WAautomaton.既不支持中文也不支持下划线的OJ上叫WA-automaton。（强行分类讨论</p>\n<p>喜欢二次元呀，但是窝太忙了qwq.等到大学再补番吧qwq.</p>\n<p>可能直到我退役之后，我的博客也不会有多少人看吧。但是没关系呀，写给自己看嘛qwq.如果能顺便给其他人带来帮助，那就更好了鸭！</p>\n<p>我的QQ：1548363105.(虽然可能并没有人能看到)（如果真的有人看到了并且想加好友的话，请备注省份和IDqwq..</p>\n<p>我的OI进程:</p>\n<table>\n<thead>\n<tr>\n<th>比赛名称</th>\n<th>结果</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NOIP2017</td>\n<td>省二</td>\n<td>OI第一战…</td>\n</tr>\n<tr>\n<td>NOI2018-Online</td>\n<td>Fe</td>\n<td>算上笔试也没到Cu线..</td>\n</tr>\n<tr>\n<td>NOIP2018</td>\n<td>省一</td>\n<td>HA rank30</td>\n</tr>\n<tr>\n<td>WC2019</td>\n<td>Fe</td>\n<td>第一次线下参加NOI系列…被爆踩..</td>\n</tr>\n</tbody>\n</table>\n<p>能不能完整打完2018-2019，2019-2020两个赛季呢..?</p>\n<p>与诸君共勉！</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p> <del>即得易见平凡，由上自证显然，留作习题答案略，读者自证不难。</del><br><del>反之亦然同理，推论自然成立，略去过程Q.E.D，由上可知证毕。</del></p>\n</blockquote>\n<p>您好！欢迎来到我的blog。博主是个蒟蒻。坐标HA,郑州外国语学校.现在高一，啥都不会，文竞两爆炸，没学上，在退役的边缘疯狂试探。欢迎来我的博客爆踩我T_T…</p>\n<p>支持中文的OJ上，我的ID都是_WA自动机.不支持中文的OJ上，我的ID是_WAautomaton.既不支持中文也不支持下划线的OJ上叫WA-automaton。（强行分类讨论</p>\n<p>喜欢二次元呀，但是窝太忙了qwq.等到大学再补番吧qwq.</p>\n<p>可能直到我退役之后，我的博客也不会有多少人看吧。但是没关系呀，写给自己看嘛qwq.如果能顺便给其他人带来帮助，那就更好了鸭！</p>\n<p>我的QQ：1548363105.(虽然可能并没有人能看到)（如果真的有人看到了并且想加好友的话，请备注省份和IDqwq..</p>\n<p>我的OI进程:</p>\n<table>\n<thead>\n<tr>\n<th>比赛名称</th>\n<th>结果</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NOIP2017</td>\n<td>省二</td>\n<td>OI第一战…</td>\n</tr>\n<tr>\n<td>NOI2018-Online</td>\n<td>Fe</td>\n<td>算上笔试也没到Cu线..</td>\n</tr>\n<tr>\n<td>NOIP2018</td>\n<td>省一</td>\n<td>HA rank30</td>\n</tr>\n<tr>\n<td>WC2019</td>\n<td>Fe</td>\n<td>第一次线下参加NOI系列…被爆踩..</td>\n</tr>\n</tbody>\n</table>\n<p>能不能完整打完2018-2019，2019-2020两个赛季呢..?</p>\n<p>与诸君共勉！</p>\n"},{"title":"Tags","date":"2018-07-19T03:05:09.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\ndate: 2018-07-19 11:05:09\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-07-19T23:36:46.527Z","path":"tags/index.html","layout":"page","_id":"cjv7jjm170003v4tywlifrwt2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"links","date":"2019-03-08T02:17:22.000Z","_content":"这里是**萌萌哒**^_^的友情链接！也是爆踩我的大佬名单T^T...  \n有想要换友链的小可爱请在下面的评论区评论一下呀，我看到了就会添加上去的(咕咕咕)\n### 本校大佬\n$$\\href{https://williampetermatthew.github.io/}{\\mathrm{\\color{black}{P}\\color{red}{eter\\_Matthew}}}$$\n$$\\href{https://syr_steven.coding.me/}{\\mathrm{\\color{black}{S}\\color{red}{teven7}}}$$\n$$\\href{http://micardi.github.io}{\\mathrm{\\color{black}{M}\\color{red}{icardi}}}$$\n$$\\href{https://cs18.coding.me/}{\\mathrm{\\color{black}{c}\\color{red}{s18}}}$$\n$$\\href{https://www.zybuluo.com/Bei-S/note/1381469}{\\mathrm{\\color{black}{Y}\\color{red}{ue-S}}}$$\n$$\\href{http://zzy2002.coding.me}{\\mathrm{\\color{black}{V}\\color{red}{ectory}}}$$\n$$\\href{https://ctp314.github.io}{\\mathrm{\\color{black}{C}\\color{red}{TP\\_314}}}$$\n$$\\href{https://cnblogs.com/wmq12138}{\\mathrm{\\color{black}{R}\\color{red}{obin12138}}}$$\n$$\\href{https://pb0207.github.io/}{\\mathrm{\\color{black}{p}\\color{red}{b0207}}}$$\n$$\\href{https://prostkhala.github.io/}{\\mathrm{\\color{black}{P}\\color{red}{roSTKhala}}}$$\n$$\\href{https://zhangche0526.github.io/}{\\mathrm{\\color{black}{V}\\color{red}{irgil}}}$$\n$$\\href{https://www.zybuluo.com/KirinBill/note/878927}{\\mathrm{\\color{black}{K}\\color{red}{irinBill}}}$$ \n$$\\href{https://www.zybuluo.com/zzzc18/note/789450}{\\mathrm{\\color{black}{z}\\color{red}{zzc18}}}$$\n$$\\href{https://fancypei.github.io/}{\\mathrm{\\color{black}{F}\\color{red}{ancy}}}$$\n### 省内巨佬\n#### zzyz\n$$\\href{https://www.cnblogs.com/--BLUESKY007/}{\\mathrm{\\color{black}{B}\\color{red}{LUESKY007}}}$$\n$$\\href{https://www.cnblogs.com/fengxunling}{\\mathrm{\\small \\color{black}{风\\ \\ }\\color{red}{浔\\ \\ 凌\\ \\ }}}$$\n\n### 外省神犇\n$$\\href{https://www.cnblogs.com/chhokmah/}{\\mathrm{\\color{black}{c}\\color{red}{hhokmah}}}$$ ","source":"links/index.md","raw":"---\ntitle: links\ndate: 2019-03-08 10:17:22\n---\n这里是**萌萌哒**^_^的友情链接！也是爆踩我的大佬名单T^T...  \n有想要换友链的小可爱请在下面的评论区评论一下呀，我看到了就会添加上去的(咕咕咕)\n### 本校大佬\n$$\\href{https://williampetermatthew.github.io/}{\\mathrm{\\color{black}{P}\\color{red}{eter\\_Matthew}}}$$\n$$\\href{https://syr_steven.coding.me/}{\\mathrm{\\color{black}{S}\\color{red}{teven7}}}$$\n$$\\href{http://micardi.github.io}{\\mathrm{\\color{black}{M}\\color{red}{icardi}}}$$\n$$\\href{https://cs18.coding.me/}{\\mathrm{\\color{black}{c}\\color{red}{s18}}}$$\n$$\\href{https://www.zybuluo.com/Bei-S/note/1381469}{\\mathrm{\\color{black}{Y}\\color{red}{ue-S}}}$$\n$$\\href{http://zzy2002.coding.me}{\\mathrm{\\color{black}{V}\\color{red}{ectory}}}$$\n$$\\href{https://ctp314.github.io}{\\mathrm{\\color{black}{C}\\color{red}{TP\\_314}}}$$\n$$\\href{https://cnblogs.com/wmq12138}{\\mathrm{\\color{black}{R}\\color{red}{obin12138}}}$$\n$$\\href{https://pb0207.github.io/}{\\mathrm{\\color{black}{p}\\color{red}{b0207}}}$$\n$$\\href{https://prostkhala.github.io/}{\\mathrm{\\color{black}{P}\\color{red}{roSTKhala}}}$$\n$$\\href{https://zhangche0526.github.io/}{\\mathrm{\\color{black}{V}\\color{red}{irgil}}}$$\n$$\\href{https://www.zybuluo.com/KirinBill/note/878927}{\\mathrm{\\color{black}{K}\\color{red}{irinBill}}}$$ \n$$\\href{https://www.zybuluo.com/zzzc18/note/789450}{\\mathrm{\\color{black}{z}\\color{red}{zzc18}}}$$\n$$\\href{https://fancypei.github.io/}{\\mathrm{\\color{black}{F}\\color{red}{ancy}}}$$\n### 省内巨佬\n#### zzyz\n$$\\href{https://www.cnblogs.com/--BLUESKY007/}{\\mathrm{\\color{black}{B}\\color{red}{LUESKY007}}}$$\n$$\\href{https://www.cnblogs.com/fengxunling}{\\mathrm{\\small \\color{black}{风\\ \\ }\\color{red}{浔\\ \\ 凌\\ \\ }}}$$\n\n### 外省神犇\n$$\\href{https://www.cnblogs.com/chhokmah/}{\\mathrm{\\color{black}{c}\\color{red}{hhokmah}}}$$ ","updated":"2019-03-31T14:29:33.990Z","path":"links/index.html","comments":1,"layout":"page","_id":"cjv7jjm1b0007v4tyah2023z1","content":"<p>这里是<strong>萌萌哒</strong>^_^的友情链接！也是爆踩我的大佬名单T^T…<br>有想要换友链的小可爱请在下面的评论区评论一下呀，我看到了就会添加上去的(咕咕咕)</p>\n<h3 id=\"本校大佬\"><a href=\"#本校大佬\" class=\"headerlink\" title=\"本校大佬\"></a>本校大佬</h3><p>$$\\href{<a href=\"https://williampetermatthew.github.io/}{\\mathrm{\\color{black}{P}\\color{red}{eter\\_Matthew}}}$$\" target=\"_blank\" rel=\"noopener\">https://williampetermatthew.github.io/}{\\mathrm{\\color{black}{P}\\color{red}{eter\\_Matthew}}}$$</a><br>$$\\href{<a href=\"https://syr_steven.coding.me/}{\\mathrm{\\color{black}{S}\\color{red}{teven7}}}$$\" target=\"_blank\" rel=\"noopener\">https://syr_steven.coding.me/}{\\mathrm{\\color{black}{S}\\color{red}{teven7}}}$$</a><br>$$\\href{<a href=\"http://micardi.github.io}{\\mathrm{\\color{black}{M}\\color{red}{icardi}}}$$\" target=\"_blank\" rel=\"noopener\">http://micardi.github.io}{\\mathrm{\\color{black}{M}\\color{red}{icardi}}}$$</a><br>$$\\href{<a href=\"https://cs18.coding.me/}{\\mathrm{\\color{black}{c}\\color{red}{s18}}}$$\" target=\"_blank\" rel=\"noopener\">https://cs18.coding.me/}{\\mathrm{\\color{black}{c}\\color{red}{s18}}}$$</a><br>$$\\href{<a href=\"https://www.zybuluo.com/Bei-S/note/1381469}{\\mathrm{\\color{black}{Y}\\color{red}{ue-S}}}$$\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/Bei-S/note/1381469}{\\mathrm{\\color{black}{Y}\\color{red}{ue-S}}}$$</a><br>$$\\href{<a href=\"http://zzy2002.coding.me}{\\mathrm{\\color{black}{V}\\color{red}{ectory}}}$$\" target=\"_blank\" rel=\"noopener\">http://zzy2002.coding.me}{\\mathrm{\\color{black}{V}\\color{red}{ectory}}}$$</a><br>$$\\href{<a href=\"https://ctp314.github.io}{\\mathrm{\\color{black}{C}\\color{red}{TP\\_314}}}$$\" target=\"_blank\" rel=\"noopener\">https://ctp314.github.io}{\\mathrm{\\color{black}{C}\\color{red}{TP\\_314}}}$$</a><br>$$\\href{<a href=\"https://cnblogs.com/wmq12138}{\\mathrm{\\color{black}{R}\\color{red}{obin12138}}}$$\" target=\"_blank\" rel=\"noopener\">https://cnblogs.com/wmq12138}{\\mathrm{\\color{black}{R}\\color{red}{obin12138}}}$$</a><br>$$\\href{<a href=\"https://pb0207.github.io/}{\\mathrm{\\color{black}{p}\\color{red}{b0207}}}$$\" target=\"_blank\" rel=\"noopener\">https://pb0207.github.io/}{\\mathrm{\\color{black}{p}\\color{red}{b0207}}}$$</a><br>$$\\href{<a href=\"https://prostkhala.github.io/}{\\mathrm{\\color{black}{P}\\color{red}{roSTKhala}}}$$\" target=\"_blank\" rel=\"noopener\">https://prostkhala.github.io/}{\\mathrm{\\color{black}{P}\\color{red}{roSTKhala}}}$$</a><br>$$\\href{<a href=\"https://zhangche0526.github.io/}{\\mathrm{\\color{black}{V}\\color{red}{irgil}}}$$\" target=\"_blank\" rel=\"noopener\">https://zhangche0526.github.io/}{\\mathrm{\\color{black}{V}\\color{red}{irgil}}}$$</a><br>$$\\href{<a href=\"https://www.zybuluo.com/KirinBill/note/878927}{\\mathrm{\\color{black}{K}\\color{red}{irinBill}}}$$\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/KirinBill/note/878927}{\\mathrm{\\color{black}{K}\\color{red}{irinBill}}}$$</a><br>$$\\href{<a href=\"https://www.zybuluo.com/zzzc18/note/789450}{\\mathrm{\\color{black}{z}\\color{red}{zzc18}}}$$\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/zzzc18/note/789450}{\\mathrm{\\color{black}{z}\\color{red}{zzc18}}}$$</a><br>$$\\href{<a href=\"https://fancypei.github.io/}{\\mathrm{\\color{black}{F}\\color{red}{ancy}}}$$\" target=\"_blank\" rel=\"noopener\">https://fancypei.github.io/}{\\mathrm{\\color{black}{F}\\color{red}{ancy}}}$$</a></p>\n<h3 id=\"省内巨佬\"><a href=\"#省内巨佬\" class=\"headerlink\" title=\"省内巨佬\"></a>省内巨佬</h3><h4 id=\"zzyz\"><a href=\"#zzyz\" class=\"headerlink\" title=\"zzyz\"></a>zzyz</h4><p>$$\\href{<a href=\"https://www.cnblogs.com/--BLUESKY007/}{\\mathrm{\\color{black}{B}\\color{red}{LUESKY007}}}$$\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/--BLUESKY007/}{\\mathrm{\\color{black}{B}\\color{red}{LUESKY007}}}$$</a><br>$$\\href{<a href=\"https://www.cnblogs.com/fengxunling}{\\mathrm{\\small\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/fengxunling}{\\mathrm{\\small</a> \\color{black}{风\\ \\ }\\color{red}{浔\\ \\ 凌\\ \\ }}}$$</p>\n<h3 id=\"外省神犇\"><a href=\"#外省神犇\" class=\"headerlink\" title=\"外省神犇\"></a>外省神犇</h3><p>$$\\href{<a href=\"https://www.cnblogs.com/chhokmah/}{\\mathrm{\\color{black}{c}\\color{red}{hhokmah}}}$$\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chhokmah/}{\\mathrm{\\color{black}{c}\\color{red}{hhokmah}}}$$</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<p>这里是<strong>萌萌哒</strong>^_^的友情链接！也是爆踩我的大佬名单T^T…<br>有想要换友链的小可爱请在下面的评论区评论一下呀，我看到了就会添加上去的(咕咕咕)</p>\n<h3 id=\"本校大佬\"><a href=\"#本校大佬\" class=\"headerlink\" title=\"本校大佬\"></a>本校大佬</h3><p>$$\\href{<a href=\"https://williampetermatthew.github.io/}{\\mathrm{\\color{black}{P}\\color{red}{eter\\_Matthew}}}$$\" target=\"_blank\" rel=\"noopener\">https://williampetermatthew.github.io/}{\\mathrm{\\color{black}{P}\\color{red}{eter\\_Matthew}}}$$</a><br>$$\\href{<a href=\"https://syr_steven.coding.me/}{\\mathrm{\\color{black}{S}\\color{red}{teven7}}}$$\" target=\"_blank\" rel=\"noopener\">https://syr_steven.coding.me/}{\\mathrm{\\color{black}{S}\\color{red}{teven7}}}$$</a><br>$$\\href{<a href=\"http://micardi.github.io}{\\mathrm{\\color{black}{M}\\color{red}{icardi}}}$$\" target=\"_blank\" rel=\"noopener\">http://micardi.github.io}{\\mathrm{\\color{black}{M}\\color{red}{icardi}}}$$</a><br>$$\\href{<a href=\"https://cs18.coding.me/}{\\mathrm{\\color{black}{c}\\color{red}{s18}}}$$\" target=\"_blank\" rel=\"noopener\">https://cs18.coding.me/}{\\mathrm{\\color{black}{c}\\color{red}{s18}}}$$</a><br>$$\\href{<a href=\"https://www.zybuluo.com/Bei-S/note/1381469}{\\mathrm{\\color{black}{Y}\\color{red}{ue-S}}}$$\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/Bei-S/note/1381469}{\\mathrm{\\color{black}{Y}\\color{red}{ue-S}}}$$</a><br>$$\\href{<a href=\"http://zzy2002.coding.me}{\\mathrm{\\color{black}{V}\\color{red}{ectory}}}$$\" target=\"_blank\" rel=\"noopener\">http://zzy2002.coding.me}{\\mathrm{\\color{black}{V}\\color{red}{ectory}}}$$</a><br>$$\\href{<a href=\"https://ctp314.github.io}{\\mathrm{\\color{black}{C}\\color{red}{TP\\_314}}}$$\" target=\"_blank\" rel=\"noopener\">https://ctp314.github.io}{\\mathrm{\\color{black}{C}\\color{red}{TP\\_314}}}$$</a><br>$$\\href{<a href=\"https://cnblogs.com/wmq12138}{\\mathrm{\\color{black}{R}\\color{red}{obin12138}}}$$\" target=\"_blank\" rel=\"noopener\">https://cnblogs.com/wmq12138}{\\mathrm{\\color{black}{R}\\color{red}{obin12138}}}$$</a><br>$$\\href{<a href=\"https://pb0207.github.io/}{\\mathrm{\\color{black}{p}\\color{red}{b0207}}}$$\" target=\"_blank\" rel=\"noopener\">https://pb0207.github.io/}{\\mathrm{\\color{black}{p}\\color{red}{b0207}}}$$</a><br>$$\\href{<a href=\"https://prostkhala.github.io/}{\\mathrm{\\color{black}{P}\\color{red}{roSTKhala}}}$$\" target=\"_blank\" rel=\"noopener\">https://prostkhala.github.io/}{\\mathrm{\\color{black}{P}\\color{red}{roSTKhala}}}$$</a><br>$$\\href{<a href=\"https://zhangche0526.github.io/}{\\mathrm{\\color{black}{V}\\color{red}{irgil}}}$$\" target=\"_blank\" rel=\"noopener\">https://zhangche0526.github.io/}{\\mathrm{\\color{black}{V}\\color{red}{irgil}}}$$</a><br>$$\\href{<a href=\"https://www.zybuluo.com/KirinBill/note/878927}{\\mathrm{\\color{black}{K}\\color{red}{irinBill}}}$$\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/KirinBill/note/878927}{\\mathrm{\\color{black}{K}\\color{red}{irinBill}}}$$</a><br>$$\\href{<a href=\"https://www.zybuluo.com/zzzc18/note/789450}{\\mathrm{\\color{black}{z}\\color{red}{zzc18}}}$$\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/zzzc18/note/789450}{\\mathrm{\\color{black}{z}\\color{red}{zzc18}}}$$</a><br>$$\\href{<a href=\"https://fancypei.github.io/}{\\mathrm{\\color{black}{F}\\color{red}{ancy}}}$$\" target=\"_blank\" rel=\"noopener\">https://fancypei.github.io/}{\\mathrm{\\color{black}{F}\\color{red}{ancy}}}$$</a></p>\n<h3 id=\"省内巨佬\"><a href=\"#省内巨佬\" class=\"headerlink\" title=\"省内巨佬\"></a>省内巨佬</h3><h4 id=\"zzyz\"><a href=\"#zzyz\" class=\"headerlink\" title=\"zzyz\"></a>zzyz</h4><p>$$\\href{<a href=\"https://www.cnblogs.com/--BLUESKY007/}{\\mathrm{\\color{black}{B}\\color{red}{LUESKY007}}}$$\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/--BLUESKY007/}{\\mathrm{\\color{black}{B}\\color{red}{LUESKY007}}}$$</a><br>$$\\href{<a href=\"https://www.cnblogs.com/fengxunling}{\\mathrm{\\small\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/fengxunling}{\\mathrm{\\small</a> \\color{black}{风\\ \\ }\\color{red}{浔\\ \\ 凌\\ \\ }}}$$</p>\n<h3 id=\"外省神犇\"><a href=\"#外省神犇\" class=\"headerlink\" title=\"外省神犇\"></a>外省神犇</h3><p>$$\\href{<a href=\"https://www.cnblogs.com/chhokmah/}{\\mathrm{\\color{black}{c}\\color{red}{hhokmah}}}$$\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chhokmah/}{\\mathrm{\\color{black}{c}\\color{red}{hhokmah}}}$$</a> </p>\n"},{"title":"Categories","date":"2018-07-19T03:06:04.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: Categories\ndate: 2018-07-19 11:06:04\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-07-19T23:37:13.644Z","path":"categories/index.html","layout":"page","_id":"cjv7jjm3f002tv4tyk1mpyec4","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"[BZOJ1001][BeiJing2006]狼抓兔子","date":"2019-03-03T13:09:02.000Z","comments":1,"_content":"网格图求最小割？据说这题正解是平面图最小割转对偶图最短路。但是不知为啥~~数据太水~~最大流就可以直接过了..\n很久以前的代码了，将就着看吧（虽然这种水题也没人会去看题解...\n也许我以后会更一篇正解的题解吧（flag\n\n<!-- more -->\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#include<queue>\nusing namespace std;\nconst int inf=1e9;\nconst int maxm=1e6+5000;\nint n,m,maxflow,deep[maxm*6];//deep深度 \nstruct edge{\n    int next,to,dis;\n}e[maxm*6];\nint tot=-1,head[maxm*6],cur[maxm*6];//cur用于复制head \n \nvoid add(int x,int y,int z)\n{\n    e[++tot].to=y;\n    e[tot].dis=z;\n    e[tot].next=head[x];\n    head[x]=tot;\n}\n \ninline bool bfs(int s,int t)\n{\n    memset(deep,0x3f,sizeof(deep));\n    deep[s]=0;\n    memcpy(cur,head,sizeof(head));\n    queue<int>q;\n    q.push(s);\n    while(q.size())\n    {\n        int x=q.front();q.pop();\n        for(int i=head[x];~i;i=e[i].next)\n        {\n            int y=e[i].to;\n            if(deep[y]<=inf||e[i].dis<=0)continue;\n            deep[y]=deep[x]+1;\n            q.push(y);\n        }\n    }\n    return deep[t]<inf;\n}\n \nint dfs(int now,int t,int limit)\n{\n    if(!limit||now==t)return limit;\n    int f=0,flow=0;\n    for(int i=cur[now];~i;i=e[i].next)\n    {\n        cur[now]=i;\n        int y=e[i].to;\n        if(deep[y]==deep[now]+1&&(f=dfs(y,t,min(e[i].dis,limit))))\n        {\n            limit-=f;\n            flow+=f;\n            e[i].dis-=f;\n            e[i^1].dis+=f;\n            if(!limit)break;\n        }\n    }\n    return flow;\n}\nvoid Dinic(int s,int t)\n{\n    while(bfs(s,t))\n        maxflow+=dfs(s,t,inf);\n}\n \ninline int id(int x,int y)\n{\n    return (x-1)*m+y;\n}\n \nint main()\n{\n    memset(head,-1,sizeof(head));\n    int w;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)//横向道路\n        for(int j=1;j<m;j++)\n        {\n            scanf(\"%d\",&w);\n            add(id(i,j),id(i,j+1),w);\n            add(id(i,j+1),id(i,j),w);\n        }\n    for(int i=1;i<n;i++)\n        for(int j=1;j<=m;j++)\n        {\n            scanf(\"%d\",&w);\n            add(id(i,j),id(i+1,j),w);\n            add(id(i+1,j),id(i,j),w);\n        }\n    for(int i=1;i<n;i++)\n        for(int j=1;j<m;j++)\n        {\n            scanf(\"%d\",&w);\n            add(id(i,j),id(i+1,j+1),w);\n            add(id(i+1,j+1),id(i,j),w);\n        }\n    Dinic(id(1,1),id(n,m));\n    cout<<maxflow;\n}\n```","source":"_posts/BZOJ1001.md","raw":"---\ntitle: '[BZOJ1001][BeiJing2006]狼抓兔子'\ndate: 2019-03-03 21:09:02\ntags:\n    - 网络流\ncategories:\n    - 题解\n    - BZOJ百题计划\ncomments:\n---\n网格图求最小割？据说这题正解是平面图最小割转对偶图最短路。但是不知为啥~~数据太水~~最大流就可以直接过了..\n很久以前的代码了，将就着看吧（虽然这种水题也没人会去看题解...\n也许我以后会更一篇正解的题解吧（flag\n\n<!-- more -->\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<iostream>\n#include<queue>\nusing namespace std;\nconst int inf=1e9;\nconst int maxm=1e6+5000;\nint n,m,maxflow,deep[maxm*6];//deep深度 \nstruct edge{\n    int next,to,dis;\n}e[maxm*6];\nint tot=-1,head[maxm*6],cur[maxm*6];//cur用于复制head \n \nvoid add(int x,int y,int z)\n{\n    e[++tot].to=y;\n    e[tot].dis=z;\n    e[tot].next=head[x];\n    head[x]=tot;\n}\n \ninline bool bfs(int s,int t)\n{\n    memset(deep,0x3f,sizeof(deep));\n    deep[s]=0;\n    memcpy(cur,head,sizeof(head));\n    queue<int>q;\n    q.push(s);\n    while(q.size())\n    {\n        int x=q.front();q.pop();\n        for(int i=head[x];~i;i=e[i].next)\n        {\n            int y=e[i].to;\n            if(deep[y]<=inf||e[i].dis<=0)continue;\n            deep[y]=deep[x]+1;\n            q.push(y);\n        }\n    }\n    return deep[t]<inf;\n}\n \nint dfs(int now,int t,int limit)\n{\n    if(!limit||now==t)return limit;\n    int f=0,flow=0;\n    for(int i=cur[now];~i;i=e[i].next)\n    {\n        cur[now]=i;\n        int y=e[i].to;\n        if(deep[y]==deep[now]+1&&(f=dfs(y,t,min(e[i].dis,limit))))\n        {\n            limit-=f;\n            flow+=f;\n            e[i].dis-=f;\n            e[i^1].dis+=f;\n            if(!limit)break;\n        }\n    }\n    return flow;\n}\nvoid Dinic(int s,int t)\n{\n    while(bfs(s,t))\n        maxflow+=dfs(s,t,inf);\n}\n \ninline int id(int x,int y)\n{\n    return (x-1)*m+y;\n}\n \nint main()\n{\n    memset(head,-1,sizeof(head));\n    int w;\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)//横向道路\n        for(int j=1;j<m;j++)\n        {\n            scanf(\"%d\",&w);\n            add(id(i,j),id(i,j+1),w);\n            add(id(i,j+1),id(i,j),w);\n        }\n    for(int i=1;i<n;i++)\n        for(int j=1;j<=m;j++)\n        {\n            scanf(\"%d\",&w);\n            add(id(i,j),id(i+1,j),w);\n            add(id(i+1,j),id(i,j),w);\n        }\n    for(int i=1;i<n;i++)\n        for(int j=1;j<m;j++)\n        {\n            scanf(\"%d\",&w);\n            add(id(i,j),id(i+1,j+1),w);\n            add(id(i+1,j+1),id(i,j),w);\n        }\n    Dinic(id(1,1),id(n,m));\n    cout<<maxflow;\n}\n```","slug":"BZOJ1001","published":1,"updated":"2019-03-08T21:24:33.248Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm100000v4tyd9toxz68","content":"<p>网格图求最小割？据说这题正解是平面图最小割转对偶图最短路。但是不知为啥<del>数据太水</del>最大流就可以直接过了..<br>很久以前的代码了，将就着看吧（虽然这种水题也没人会去看题解…<br>也许我以后会更一篇正解的题解吧（flag</p>\n<a id=\"more\"></a>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf=<span class=\"number\">1e9</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm=<span class=\"number\">1e6</span>+<span class=\"number\">5000</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,maxflow,deep[maxm*<span class=\"number\">6</span>];<span class=\"comment\">//deep深度 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> next,to,dis;</span><br><span class=\"line\">&#125;e[maxm*<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> tot=<span class=\"number\">-1</span>,head[maxm*<span class=\"number\">6</span>],cur[maxm*<span class=\"number\">6</span>];<span class=\"comment\">//cur用于复制head </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> z)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[++tot].to=y;</span><br><span class=\"line\">    e[tot].dis=z;</span><br><span class=\"line\">    e[tot].next=head[x];</span><br><span class=\"line\">    head[x]=tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> s,<span class=\"keyword\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(deep,<span class=\"number\">0x3f</span>,<span class=\"keyword\">sizeof</span>(deep));</span><br><span class=\"line\">    deep[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(cur,head,<span class=\"keyword\">sizeof</span>(head));</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;q;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q.size())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=q.front();q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[x];~i;i=e[i].next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y=e[i].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(deep[y]&lt;=inf||e[i].dis&lt;=<span class=\"number\">0</span>)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            deep[y]=deep[x]+<span class=\"number\">1</span>;</span><br><span class=\"line\">            q.push(y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> deep[t]&lt;inf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> now,<span class=\"keyword\">int</span> t,<span class=\"keyword\">int</span> limit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!limit||now==t)<span class=\"keyword\">return</span> limit;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f=<span class=\"number\">0</span>,flow=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=cur[now];~i;i=e[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cur[now]=i;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y=e[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(deep[y]==deep[now]+<span class=\"number\">1</span>&amp;&amp;(f=dfs(y,t,min(e[i].dis,limit))))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            limit-=f;</span><br><span class=\"line\">            flow+=f;</span><br><span class=\"line\">            e[i].dis-=f;</span><br><span class=\"line\">            e[i^<span class=\"number\">1</span>].dis+=f;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!limit)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dinic</span><span class=\"params\">(<span class=\"keyword\">int</span> s,<span class=\"keyword\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(bfs(s,t))</span><br><span class=\"line\">        maxflow+=dfs(s,t,inf);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">id</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x<span class=\"number\">-1</span>)*m+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(head,<span class=\"number\">-1</span>,<span class=\"keyword\">sizeof</span>(head));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> w;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"comment\">//横向道路</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;m;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;w);</span><br><span class=\"line\">            add(id(i,j),id(i,j+<span class=\"number\">1</span>),w);</span><br><span class=\"line\">            add(id(i,j+<span class=\"number\">1</span>),id(i,j),w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;w);</span><br><span class=\"line\">            add(id(i,j),id(i+<span class=\"number\">1</span>,j),w);</span><br><span class=\"line\">            add(id(i+<span class=\"number\">1</span>,j),id(i,j),w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;m;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;w);</span><br><span class=\"line\">            add(id(i,j),id(i+<span class=\"number\">1</span>,j+<span class=\"number\">1</span>),w);</span><br><span class=\"line\">            add(id(i+<span class=\"number\">1</span>,j+<span class=\"number\">1</span>),id(i,j),w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    Dinic(id(<span class=\"number\">1</span>,<span class=\"number\">1</span>),id(n,m));</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;maxflow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>网格图求最小割？据说这题正解是平面图最小割转对偶图最短路。但是不知为啥<del>数据太水</del>最大流就可以直接过了..<br>很久以前的代码了，将就着看吧（虽然这种水题也没人会去看题解…<br>也许我以后会更一篇正解的题解吧（flag</p>","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inf=<span class=\"number\">1e9</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxm=<span class=\"number\">1e6</span>+<span class=\"number\">5000</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,maxflow,deep[maxm*<span class=\"number\">6</span>];<span class=\"comment\">//deep深度 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> next,to,dis;</span><br><span class=\"line\">&#125;e[maxm*<span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> tot=<span class=\"number\">-1</span>,head[maxm*<span class=\"number\">6</span>],cur[maxm*<span class=\"number\">6</span>];<span class=\"comment\">//cur用于复制head </span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y,<span class=\"keyword\">int</span> z)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    e[++tot].to=y;</span><br><span class=\"line\">    e[tot].dis=z;</span><br><span class=\"line\">    e[tot].next=head[x];</span><br><span class=\"line\">    head[x]=tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> s,<span class=\"keyword\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(deep,<span class=\"number\">0x3f</span>,<span class=\"keyword\">sizeof</span>(deep));</span><br><span class=\"line\">    deep[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(cur,head,<span class=\"keyword\">sizeof</span>(head));</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt;q;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q.size())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=q.front();q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=head[x];~i;i=e[i].next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y=e[i].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(deep[y]&lt;=inf||e[i].dis&lt;=<span class=\"number\">0</span>)<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            deep[y]=deep[x]+<span class=\"number\">1</span>;</span><br><span class=\"line\">            q.push(y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> deep[t]&lt;inf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> now,<span class=\"keyword\">int</span> t,<span class=\"keyword\">int</span> limit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!limit||now==t)<span class=\"keyword\">return</span> limit;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f=<span class=\"number\">0</span>,flow=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=cur[now];~i;i=e[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cur[now]=i;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y=e[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(deep[y]==deep[now]+<span class=\"number\">1</span>&amp;&amp;(f=dfs(y,t,min(e[i].dis,limit))))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            limit-=f;</span><br><span class=\"line\">            flow+=f;</span><br><span class=\"line\">            e[i].dis-=f;</span><br><span class=\"line\">            e[i^<span class=\"number\">1</span>].dis+=f;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!limit)<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dinic</span><span class=\"params\">(<span class=\"keyword\">int</span> s,<span class=\"keyword\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(bfs(s,t))</span><br><span class=\"line\">        maxflow+=dfs(s,t,inf);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">id</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x<span class=\"number\">-1</span>)*m+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(head,<span class=\"number\">-1</span>,<span class=\"keyword\">sizeof</span>(head));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> w;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)<span class=\"comment\">//横向道路</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;m;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;w);</span><br><span class=\"line\">            add(id(i,j),id(i,j+<span class=\"number\">1</span>),w);</span><br><span class=\"line\">            add(id(i,j+<span class=\"number\">1</span>),id(i,j),w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=m;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;w);</span><br><span class=\"line\">            add(id(i,j),id(i+<span class=\"number\">1</span>,j),w);</span><br><span class=\"line\">            add(id(i+<span class=\"number\">1</span>,j),id(i,j),w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;m;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;w);</span><br><span class=\"line\">            add(id(i,j),id(i+<span class=\"number\">1</span>,j+<span class=\"number\">1</span>),w);</span><br><span class=\"line\">            add(id(i+<span class=\"number\">1</span>,j+<span class=\"number\">1</span>),id(i,j),w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    Dinic(id(<span class=\"number\">1</span>,<span class=\"number\">1</span>),id(n,m));</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;maxflow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"[BZOJ1002][FJOI2007]轮状病毒","date":"2019-03-03T13:09:13.000Z","comments":1,"_content":"询问生成树个数，一眼矩阵树定理...但是高消会爆精度，long double都存不下。~~不取模的计数题都是耍流氓！~~ 所以，~~用Python打表就行了~~正解是递推~~打表找规律~~。其实可以用矩阵树直接推行列式的，但是我不会，回头再想一下吧.\n\n<!-- more -->\n\n矩阵树定理总结请看[这里](https://wa-automaton.github.io/2019/03/06/矩阵树定理总结)：  \n50分爆精度代码：\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n\nusing std::swap;\nusing std::fabs;\n\nconst int maxn=105;\nconst double eps=1e-6;\n\nlong double K[maxn][maxn];\n\ninline void add(int u,int v)\n{\n    ++K[u][u];++K[v][v];\n    --K[u][v];--K[v][u];\n}\n\ninline long double determinant(long double (*A)[maxn],int n)\n{\n    int s=1;\n    for (int i=1,c=1,j;i<=n;++i)\n    {\n        for (j=c;j<=n && fabs(A[j][i])<eps;++j);\n        if (j==n+1) continue;\n        s=-s;\n        for (int k=1;k<=n;++k) swap(A[c][k],A[j][k]);\n        for (int j=c+1;j<=n;++j)\n            if (fabs(A[j][i])>eps)\n            {\n                long double t=A[j][i]/A[c][i];\n                for (int k=i;k<=n;++k)\n                    A[j][k]-=A[c][k]*t;\n            }\n        ++c;\n    }\n    long double ans=s;\n    for (int i=1;i<=n;++i)\n        ans*=A[i][i];\n    return fabs(ans);//这里要取绝对值\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);++n;\n    if (n==1) return puts(\"1\")&0;\n    for (int i=3;i<=n;++i) add(i,i-1);\n    for (int i=2;i<=n;++i) add(i,1);\n    if (n>2) add(2,n);\n    printf(\"%.0LF\",determinant(K,n-1));\n}\n```","source":"_posts/BZOJ1002.md","raw":"---\ntitle: '[BZOJ1002][FJOI2007]轮状病毒'\ndate: 2019-03-03 21:09:13\ntags:\n    - 矩阵树定理\n    - 数学\n    - 计数问题\ncategories:\n    - 题解\n    - BZOJ百题计划\ncomments:\n---\n询问生成树个数，一眼矩阵树定理...但是高消会爆精度，long double都存不下。~~不取模的计数题都是耍流氓！~~ 所以，~~用Python打表就行了~~正解是递推~~打表找规律~~。其实可以用矩阵树直接推行列式的，但是我不会，回头再想一下吧.\n\n<!-- more -->\n\n矩阵树定理总结请看[这里](https://wa-automaton.github.io/2019/03/06/矩阵树定理总结)：  \n50分爆精度代码：\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n\nusing std::swap;\nusing std::fabs;\n\nconst int maxn=105;\nconst double eps=1e-6;\n\nlong double K[maxn][maxn];\n\ninline void add(int u,int v)\n{\n    ++K[u][u];++K[v][v];\n    --K[u][v];--K[v][u];\n}\n\ninline long double determinant(long double (*A)[maxn],int n)\n{\n    int s=1;\n    for (int i=1,c=1,j;i<=n;++i)\n    {\n        for (j=c;j<=n && fabs(A[j][i])<eps;++j);\n        if (j==n+1) continue;\n        s=-s;\n        for (int k=1;k<=n;++k) swap(A[c][k],A[j][k]);\n        for (int j=c+1;j<=n;++j)\n            if (fabs(A[j][i])>eps)\n            {\n                long double t=A[j][i]/A[c][i];\n                for (int k=i;k<=n;++k)\n                    A[j][k]-=A[c][k]*t;\n            }\n        ++c;\n    }\n    long double ans=s;\n    for (int i=1;i<=n;++i)\n        ans*=A[i][i];\n    return fabs(ans);//这里要取绝对值\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);++n;\n    if (n==1) return puts(\"1\")&0;\n    for (int i=3;i<=n;++i) add(i,i-1);\n    for (int i=2;i<=n;++i) add(i,1);\n    if (n>2) add(2,n);\n    printf(\"%.0LF\",determinant(K,n-1));\n}\n```","slug":"BZOJ1002","published":1,"updated":"2019-03-08T21:23:11.277Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm150002v4tybf8r38gh","content":"<p>询问生成树个数，一眼矩阵树定理…但是高消会爆精度，long double都存不下。<del>不取模的计数题都是耍流氓！</del> 所以，<del>用Python打表就行了</del>正解是递推<del>打表找规律</del>。其实可以用矩阵树直接推行列式的，但是我不会，回头再想一下吧.</p>\n<a id=\"more\"></a>\n<p>矩阵树定理总结请看<a href=\"https://wa-automaton.github.io/2019/03/06/矩阵树定理总结\">这里</a>：<br>50分爆精度代码：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::swap;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">fabs</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">105</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps=<span class=\"number\">1e-6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">double</span> K[maxn][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ++K[u][u];++K[v][v];</span><br><span class=\"line\">    --K[u][v];--K[v][u];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> <span class=\"title\">determinant</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">double</span> (*A)[maxn],<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,c=<span class=\"number\">1</span>,j;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=c;j&lt;=n &amp;&amp; <span class=\"built_in\">fabs</span>(A[j][i])&lt;eps;++j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j==n+<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        s=-s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=n;++k) swap(A[c][k],A[j][k]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=c+<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[j][i])&gt;eps)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> t=A[j][i]/A[c][i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=i;k&lt;=n;++k)</span><br><span class=\"line\">                    A[j][k]-=A[c][k]*t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ++c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> ans=s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        ans*=A[i][i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">fabs</span>(ans);<span class=\"comment\">//这里要取绝对值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);++n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"1\"</span>)&amp;<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">3</span>;i&lt;=n;++i) add(i,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;++i) add(i,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n&gt;<span class=\"number\">2</span>) add(<span class=\"number\">2</span>,n);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.0LF\"</span>,determinant(K,n<span class=\"number\">-1</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>询问生成树个数，一眼矩阵树定理…但是高消会爆精度，long double都存不下。<del>不取模的计数题都是耍流氓！</del> 所以，<del>用Python打表就行了</del>正解是递推<del>打表找规律</del>。其实可以用矩阵树直接推行列式的，但是我不会，回头再想一下吧.</p>","more":"<p>矩阵树定理总结请看<a href=\"https://wa-automaton.github.io/2019/03/06/矩阵树定理总结\">这里</a>：<br>50分爆精度代码：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::swap;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">fabs</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">105</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps=<span class=\"number\">1e-6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">double</span> K[maxn][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ++K[u][u];++K[v][v];</span><br><span class=\"line\">    --K[u][v];--K[v][u];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> <span class=\"title\">determinant</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">double</span> (*A)[maxn],<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,c=<span class=\"number\">1</span>,j;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=c;j&lt;=n &amp;&amp; <span class=\"built_in\">fabs</span>(A[j][i])&lt;eps;++j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j==n+<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        s=-s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=n;++k) swap(A[c][k],A[j][k]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=c+<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[j][i])&gt;eps)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> t=A[j][i]/A[c][i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=i;k&lt;=n;++k)</span><br><span class=\"line\">                    A[j][k]-=A[c][k]*t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ++c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> ans=s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        ans*=A[i][i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">fabs</span>(ans);<span class=\"comment\">//这里要取绝对值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);++n;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"1\"</span>)&amp;<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">3</span>;i&lt;=n;++i) add(i,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;++i) add(i,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n&gt;<span class=\"number\">2</span>) add(<span class=\"number\">2</span>,n);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.0LF\"</span>,determinant(K,n<span class=\"number\">-1</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"BZOJ1016","date":"2019-03-08T14:46:33.000Z","comments":1,"_content":"# 大意：\n给你一个联通无向图，求其最小生成树的个数。答案对31011取模。（鬼知道为啥是这个数）\n<!-- more-->\n# 分析：\n这道题有个很有趣也很奇妙的结论...\n> 1.对于一个无向连通图来说，它的所有最小生成树中，相等边权的边的数量都是相等的，且在去掉这些相等边权的边之后，图的连通性也是相同的。\n\n这个结论怎么证明呢？~~大胆猜想，无需证明~~\n> 这里给出一个简单证明~~感性理解~~：考虑kruskal的过程,不妨把加入相同权值的边看做一个“阶段”。每次加边都是加到加入图中会形成环为止。然后进入下一个阶段。那么，把前面已经被更小权值的边联通的联通块看做一些点，则我们就是在这些点之间随便连边。如果形成环，我们选择不加入这条边还是从环上删除一条边并加入这条边，对连通性和生成树中该种边权边的条数显然都没有影响。所以，上述结论成立。\n\n有了这个结论，我们重新来审视这道题。我们要求最小生成树的个数。不妨仍然把相同权值的边看成阶段。根据乘法原理，我们要求的答案就是每个阶段连边的方案数之积。那么，我们先求一遍最小生成树。并得到一种方案。然后再次跑一遍kruskal，在每个阶段，将原先最小生成树中除了该阶段的边的其他边连进这张图，然后将图进行缩点（这个可以用并查集实现）然后在缩点后的新图上，加入这个阶段的所有边。此时求新图的生成树方案数，每一种方案都对应着原图中这个阶段的一种加边方案。采用矩阵树定理求生成树就可以了。\n# 代码\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n\nusing std::sort;\nusing std::swap;\nusing std::fabs;\n\nconst int P=31011;\nconst int maxn=(1e3+100)*2;\nconst double eps=1e-6;\n\nbool used[maxn];\n\nnamespace MST\n{\n    int fa[maxn];\n    int u[maxn],v[maxn],w[maxn],r[maxn],tot;\n    long double K[maxn][maxn];\n    inline int find(int u){return u==fa[u]?u:fa[u]=find(fa[u]);}\n    inline void add(int _u,int _v,int _w){u[++tot]=_u,v[tot]=_v,w[tot]=_w;}\n    struct cmp{bool operator() (const int a,const int b){return w[a]<w[b];}};\n    inline long double determinant(long double (*A)[maxn],int n)\n    {\n        for (int i=1,c=1,j;i<=n;++i)\n        {\n            for (j=c;j<=n && fabs(A[j][i])<eps;++j);\n            if (j==n+1) continue;\n            for (int k=1;k<=n;++k) swap(A[c][k],A[j][k]);\n            for (int j=c+1;j<=n;++j)\n                if (fabs(A[j][i])>eps)\n                {\n                    long double t=A[j][i]/A[c][i];\n                    for (int k=i;k<=n;++k)\n                        A[j][k]-=A[c][k]*t;\n                }\n            ++c;\n        }\n        long double ans=1;\n        for (int i=1;i<=n;++i) ans*=A[i][i];\n        return fabs(ans);//这里要取绝对值\n    }\n    inline void Kruskal(int n,int m)\n    {\n        for (int i=1;i<=n;++i) fa[i]=i;\n        for (int i=1;i<=m;++i) r[i]=i;\n        sort(r+1,r+m+1,cmp());\n        for (int i=1;i<=m;++i)\n        {\n            int x=r[i];\n            if (find(u[x])!=find(v[x]))\n            {\n                fa[find(u[x])]=find(v[x]);\n                used[x]=true;\n            }\n        }\n    }\n    int index[maxn];\n    inline void Add_edge(int idx)\n    {\n        int x=index[find(u[idx])],y=index[find(v[idx])];\n        ++K[x][x];++K[y][y];\n        --K[x][y];--K[y][x];\n    }\n    inline void merge(int idx)\n    {\n        if (find(u[idx])!=find(v[idx]))\n            fa[find(u[idx])]=find(v[idx]);\n    }\n    inline int Build_Graph(int n,int m,int L,int R)\n    {\n        int tot=0;\n        for (int i=1;i<=n;++i)\n            for (int j=1;j<=n;++j)\n                K[i][j]=0;\n        for (int i=1;i<=n;++i) fa[i]=i;\n        for (int i=1;i<=m;++i)\n            if (used[r[i]] && (i<L || i>R)) merge(r[i]);\n        memset(index,0,sizeof(index));\n        for (int i=1;i<=n;++i) if (!index[find(i)]) index[find(i)]=++tot;\n        for (int i=L;i<=R;++i) Add_edge(r[i]);\n        return tot;\n    }\n    inline int Kruskal_cal(int n,int m)\n    {\n        int ans=1;\n        for (int L=1,R=1;R<=m;L=R)\n        {\n            bool ok=false;\n            while (w[r[L]]==w[r[R]] && R<=m)\n                if (used[r[R++]]) ok=true;\n            if (!ok) continue;\n            int tot=Build_Graph(n,m,L,R-1);\n            ans=((long long)ans*(int)std::round(determinant(K,tot-1)))%P;\n        }\n        return ans;\n    }\n} // Kruskal\n\nint main()\n{\n    // freopen(\"1016/1.in\",\"r\",stdin);\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1,u,v,w;i<=m;++i)\n        scanf(\"%d%d%d\",&u,&v,&w),MST::add(u,v,w);\n    MST::Kruskal(n,m);\n    printf(\"%d\",MST::Kruskal_cal(n,m));\n}\n```","source":"_posts/BZOJ1016.md","raw":"---\ntitle: BZOJ1016\ndate: 2019-03-08 22:46:33\ntags:\n    - 数学\ncategories:\n    - 题解\n    - BZOJ百题计划\ncomments:\n---\n# 大意：\n给你一个联通无向图，求其最小生成树的个数。答案对31011取模。（鬼知道为啥是这个数）\n<!-- more-->\n# 分析：\n这道题有个很有趣也很奇妙的结论...\n> 1.对于一个无向连通图来说，它的所有最小生成树中，相等边权的边的数量都是相等的，且在去掉这些相等边权的边之后，图的连通性也是相同的。\n\n这个结论怎么证明呢？~~大胆猜想，无需证明~~\n> 这里给出一个简单证明~~感性理解~~：考虑kruskal的过程,不妨把加入相同权值的边看做一个“阶段”。每次加边都是加到加入图中会形成环为止。然后进入下一个阶段。那么，把前面已经被更小权值的边联通的联通块看做一些点，则我们就是在这些点之间随便连边。如果形成环，我们选择不加入这条边还是从环上删除一条边并加入这条边，对连通性和生成树中该种边权边的条数显然都没有影响。所以，上述结论成立。\n\n有了这个结论，我们重新来审视这道题。我们要求最小生成树的个数。不妨仍然把相同权值的边看成阶段。根据乘法原理，我们要求的答案就是每个阶段连边的方案数之积。那么，我们先求一遍最小生成树。并得到一种方案。然后再次跑一遍kruskal，在每个阶段，将原先最小生成树中除了该阶段的边的其他边连进这张图，然后将图进行缩点（这个可以用并查集实现）然后在缩点后的新图上，加入这个阶段的所有边。此时求新图的生成树方案数，每一种方案都对应着原图中这个阶段的一种加边方案。采用矩阵树定理求生成树就可以了。\n# 代码\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n\nusing std::sort;\nusing std::swap;\nusing std::fabs;\n\nconst int P=31011;\nconst int maxn=(1e3+100)*2;\nconst double eps=1e-6;\n\nbool used[maxn];\n\nnamespace MST\n{\n    int fa[maxn];\n    int u[maxn],v[maxn],w[maxn],r[maxn],tot;\n    long double K[maxn][maxn];\n    inline int find(int u){return u==fa[u]?u:fa[u]=find(fa[u]);}\n    inline void add(int _u,int _v,int _w){u[++tot]=_u,v[tot]=_v,w[tot]=_w;}\n    struct cmp{bool operator() (const int a,const int b){return w[a]<w[b];}};\n    inline long double determinant(long double (*A)[maxn],int n)\n    {\n        for (int i=1,c=1,j;i<=n;++i)\n        {\n            for (j=c;j<=n && fabs(A[j][i])<eps;++j);\n            if (j==n+1) continue;\n            for (int k=1;k<=n;++k) swap(A[c][k],A[j][k]);\n            for (int j=c+1;j<=n;++j)\n                if (fabs(A[j][i])>eps)\n                {\n                    long double t=A[j][i]/A[c][i];\n                    for (int k=i;k<=n;++k)\n                        A[j][k]-=A[c][k]*t;\n                }\n            ++c;\n        }\n        long double ans=1;\n        for (int i=1;i<=n;++i) ans*=A[i][i];\n        return fabs(ans);//这里要取绝对值\n    }\n    inline void Kruskal(int n,int m)\n    {\n        for (int i=1;i<=n;++i) fa[i]=i;\n        for (int i=1;i<=m;++i) r[i]=i;\n        sort(r+1,r+m+1,cmp());\n        for (int i=1;i<=m;++i)\n        {\n            int x=r[i];\n            if (find(u[x])!=find(v[x]))\n            {\n                fa[find(u[x])]=find(v[x]);\n                used[x]=true;\n            }\n        }\n    }\n    int index[maxn];\n    inline void Add_edge(int idx)\n    {\n        int x=index[find(u[idx])],y=index[find(v[idx])];\n        ++K[x][x];++K[y][y];\n        --K[x][y];--K[y][x];\n    }\n    inline void merge(int idx)\n    {\n        if (find(u[idx])!=find(v[idx]))\n            fa[find(u[idx])]=find(v[idx]);\n    }\n    inline int Build_Graph(int n,int m,int L,int R)\n    {\n        int tot=0;\n        for (int i=1;i<=n;++i)\n            for (int j=1;j<=n;++j)\n                K[i][j]=0;\n        for (int i=1;i<=n;++i) fa[i]=i;\n        for (int i=1;i<=m;++i)\n            if (used[r[i]] && (i<L || i>R)) merge(r[i]);\n        memset(index,0,sizeof(index));\n        for (int i=1;i<=n;++i) if (!index[find(i)]) index[find(i)]=++tot;\n        for (int i=L;i<=R;++i) Add_edge(r[i]);\n        return tot;\n    }\n    inline int Kruskal_cal(int n,int m)\n    {\n        int ans=1;\n        for (int L=1,R=1;R<=m;L=R)\n        {\n            bool ok=false;\n            while (w[r[L]]==w[r[R]] && R<=m)\n                if (used[r[R++]]) ok=true;\n            if (!ok) continue;\n            int tot=Build_Graph(n,m,L,R-1);\n            ans=((long long)ans*(int)std::round(determinant(K,tot-1)))%P;\n        }\n        return ans;\n    }\n} // Kruskal\n\nint main()\n{\n    // freopen(\"1016/1.in\",\"r\",stdin);\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1,u,v,w;i<=m;++i)\n        scanf(\"%d%d%d\",&u,&v,&w),MST::add(u,v,w);\n    MST::Kruskal(n,m);\n    printf(\"%d\",MST::Kruskal_cal(n,m));\n}\n```","slug":"BZOJ1016","published":1,"updated":"2019-03-18T23:38:07.395Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm1a0006v4tyzi2ogwv7","content":"<h1 id=\"大意：\"><a href=\"#大意：\" class=\"headerlink\" title=\"大意：\"></a>大意：</h1><p>给你一个联通无向图，求其最小生成树的个数。答案对31011取模。（鬼知道为啥是这个数）<br><a id=\"more\"></a></p>\n<h1 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h1><p>这道题有个很有趣也很奇妙的结论…</p>\n<blockquote>\n<p>1.对于一个无向连通图来说，它的所有最小生成树中，相等边权的边的数量都是相等的，且在去掉这些相等边权的边之后，图的连通性也是相同的。</p>\n</blockquote>\n<p>这个结论怎么证明呢？<del>大胆猜想，无需证明</del></p>\n<blockquote>\n<p>这里给出一个简单证明<del>感性理解</del>：考虑kruskal的过程,不妨把加入相同权值的边看做一个“阶段”。每次加边都是加到加入图中会形成环为止。然后进入下一个阶段。那么，把前面已经被更小权值的边联通的联通块看做一些点，则我们就是在这些点之间随便连边。如果形成环，我们选择不加入这条边还是从环上删除一条边并加入这条边，对连通性和生成树中该种边权边的条数显然都没有影响。所以，上述结论成立。</p>\n</blockquote>\n<p>有了这个结论，我们重新来审视这道题。我们要求最小生成树的个数。不妨仍然把相同权值的边看成阶段。根据乘法原理，我们要求的答案就是每个阶段连边的方案数之积。那么，我们先求一遍最小生成树。并得到一种方案。然后再次跑一遍kruskal，在每个阶段，将原先最小生成树中除了该阶段的边的其他边连进这张图，然后将图进行缩点（这个可以用并查集实现）然后在缩点后的新图上，加入这个阶段的所有边。此时求新图的生成树方案数，每一种方案都对应着原图中这个阶段的一种加边方案。采用矩阵树定理求生成树就可以了。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::sort;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::swap;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">fabs</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> P=<span class=\"number\">31011</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=(<span class=\"number\">1e3</span>+<span class=\"number\">100</span>)*<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps=<span class=\"number\">1e-6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> used[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> MST</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> fa[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u[maxn],v[maxn],w[maxn],r[maxn],tot;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> K[maxn][maxn];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;<span class=\"keyword\">return</span> u==fa[u]?u:fa[u]=find(fa[u]);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> _u,<span class=\"keyword\">int</span> _v,<span class=\"keyword\">int</span> _w)</span></span>&#123;u[++tot]=_u,v[tot]=_v,w[tot]=_w;&#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span>&#123;</span><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> b)</span></span>&#123;<span class=\"keyword\">return</span> w[a]&lt;w[b];&#125;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> <span class=\"title\">determinant</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">double</span> (*A)[maxn],<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,c=<span class=\"number\">1</span>,j;i&lt;=n;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j=c;j&lt;=n &amp;&amp; <span class=\"built_in\">fabs</span>(A[j][i])&lt;eps;++j);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j==n+<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=n;++k) swap(A[c][k],A[j][k]);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=c+<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[j][i])&gt;eps)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> t=A[j][i]/A[c][i];</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=i;k&lt;=n;++k)</span><br><span class=\"line\">                        A[j][k]-=A[c][k]*t;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ++c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) ans*=A[i][i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">fabs</span>(ans);<span class=\"comment\">//这里要取绝对值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Kruskal</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) fa[i]=i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i) r[i]=i;</span><br><span class=\"line\">        sort(r+<span class=\"number\">1</span>,r+m+<span class=\"number\">1</span>,cmp());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x=r[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (find(u[x])!=find(v[x]))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                fa[find(u[x])]=find(v[x]);</span><br><span class=\"line\">                used[x]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index[maxn];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> idx)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=index[find(u[idx])],y=index[find(v[idx])];</span><br><span class=\"line\">        ++K[x][x];++K[y][y];</span><br><span class=\"line\">        --K[x][y];--K[y][x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> idx)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (find(u[idx])!=find(v[idx]))</span><br><span class=\"line\">            fa[find(u[idx])]=find(v[idx]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Build_Graph</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m,<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">                K[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) fa[i]=i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (used[r[i]] &amp;&amp; (i&lt;L || i&gt;R)) merge(r[i]);</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(index,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(index));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) <span class=\"keyword\">if</span> (!index[find(i)]) index[find(i)]=++tot;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=L;i&lt;=R;++i) Add_edge(r[i]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Kruskal_cal</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> L=<span class=\"number\">1</span>,R=<span class=\"number\">1</span>;R&lt;=m;L=R)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">bool</span> ok=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (w[r[L]]==w[r[R]] &amp;&amp; R&lt;=m)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (used[r[R++]]) ok=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!ok) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tot=Build_Graph(n,m,L,R<span class=\"number\">-1</span>);</span><br><span class=\"line\">            ans=((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ans*(<span class=\"keyword\">int</span>)<span class=\"built_in\">std</span>::round(determinant(K,tot<span class=\"number\">-1</span>)))%P;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"comment\">// Kruskal</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// freopen(\"1016/1.in\",\"r\",stdin);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,u,v,w;i&lt;=m;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;u,&amp;v,&amp;w),MST::add(u,v,w);</span><br><span class=\"line\">    MST::Kruskal(n,m);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,MST::Kruskal_cal(n,m));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"大意：\"><a href=\"#大意：\" class=\"headerlink\" title=\"大意：\"></a>大意：</h1><p>给你一个联通无向图，求其最小生成树的个数。答案对31011取模。（鬼知道为啥是这个数）<br>","more":"</p>\n<h1 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h1><p>这道题有个很有趣也很奇妙的结论…</p>\n<blockquote>\n<p>1.对于一个无向连通图来说，它的所有最小生成树中，相等边权的边的数量都是相等的，且在去掉这些相等边权的边之后，图的连通性也是相同的。</p>\n</blockquote>\n<p>这个结论怎么证明呢？<del>大胆猜想，无需证明</del></p>\n<blockquote>\n<p>这里给出一个简单证明<del>感性理解</del>：考虑kruskal的过程,不妨把加入相同权值的边看做一个“阶段”。每次加边都是加到加入图中会形成环为止。然后进入下一个阶段。那么，把前面已经被更小权值的边联通的联通块看做一些点，则我们就是在这些点之间随便连边。如果形成环，我们选择不加入这条边还是从环上删除一条边并加入这条边，对连通性和生成树中该种边权边的条数显然都没有影响。所以，上述结论成立。</p>\n</blockquote>\n<p>有了这个结论，我们重新来审视这道题。我们要求最小生成树的个数。不妨仍然把相同权值的边看成阶段。根据乘法原理，我们要求的答案就是每个阶段连边的方案数之积。那么，我们先求一遍最小生成树。并得到一种方案。然后再次跑一遍kruskal，在每个阶段，将原先最小生成树中除了该阶段的边的其他边连进这张图，然后将图进行缩点（这个可以用并查集实现）然后在缩点后的新图上，加入这个阶段的所有边。此时求新图的生成树方案数，每一种方案都对应着原图中这个阶段的一种加边方案。采用矩阵树定理求生成树就可以了。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::sort;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::swap;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">fabs</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> P=<span class=\"number\">31011</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=(<span class=\"number\">1e3</span>+<span class=\"number\">100</span>)*<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps=<span class=\"number\">1e-6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> used[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> MST</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> fa[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u[maxn],v[maxn],w[maxn],r[maxn],tot;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> K[maxn][maxn];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span>&#123;<span class=\"keyword\">return</span> u==fa[u]?u:fa[u]=find(fa[u]);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> _u,<span class=\"keyword\">int</span> _v,<span class=\"keyword\">int</span> _w)</span></span>&#123;u[++tot]=_u,v[tot]=_v,w[tot]=_w;&#125;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span>&#123;</span><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> b)</span></span>&#123;<span class=\"keyword\">return</span> w[a]&lt;w[b];&#125;&#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> <span class=\"title\">determinant</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">double</span> (*A)[maxn],<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,c=<span class=\"number\">1</span>,j;i&lt;=n;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j=c;j&lt;=n &amp;&amp; <span class=\"built_in\">fabs</span>(A[j][i])&lt;eps;++j);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j==n+<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=n;++k) swap(A[c][k],A[j][k]);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=c+<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[j][i])&gt;eps)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> t=A[j][i]/A[c][i];</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=i;k&lt;=n;++k)</span><br><span class=\"line\">                        A[j][k]-=A[c][k]*t;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ++c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) ans*=A[i][i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">fabs</span>(ans);<span class=\"comment\">//这里要取绝对值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Kruskal</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) fa[i]=i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i) r[i]=i;</span><br><span class=\"line\">        sort(r+<span class=\"number\">1</span>,r+m+<span class=\"number\">1</span>,cmp());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x=r[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (find(u[x])!=find(v[x]))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                fa[find(u[x])]=find(v[x]);</span><br><span class=\"line\">                used[x]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> index[maxn];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Add_edge</span><span class=\"params\">(<span class=\"keyword\">int</span> idx)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=index[find(u[idx])],y=index[find(v[idx])];</span><br><span class=\"line\">        ++K[x][x];++K[y][y];</span><br><span class=\"line\">        --K[x][y];--K[y][x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> idx)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (find(u[idx])!=find(v[idx]))</span><br><span class=\"line\">            fa[find(u[idx])]=find(v[idx]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Build_Graph</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m,<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">                K[i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) fa[i]=i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (used[r[i]] &amp;&amp; (i&lt;L || i&gt;R)) merge(r[i]);</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(index,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(index));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) <span class=\"keyword\">if</span> (!index[find(i)]) index[find(i)]=++tot;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=L;i&lt;=R;++i) Add_edge(r[i]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Kruskal_cal</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> L=<span class=\"number\">1</span>,R=<span class=\"number\">1</span>;R&lt;=m;L=R)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">bool</span> ok=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (w[r[L]]==w[r[R]] &amp;&amp; R&lt;=m)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (used[r[R++]]) ok=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!ok) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tot=Build_Graph(n,m,L,R<span class=\"number\">-1</span>);</span><br><span class=\"line\">            ans=((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ans*(<span class=\"keyword\">int</span>)<span class=\"built_in\">std</span>::round(determinant(K,tot<span class=\"number\">-1</span>)))%P;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"comment\">// Kruskal</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// freopen(\"1016/1.in\",\"r\",stdin);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,u,v,w;i&lt;=m;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;u,&amp;v,&amp;w),MST::add(u,v,w);</span><br><span class=\"line\">    MST::Kruskal(n,m);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,MST::Kruskal_cal(n,m));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"[BZOJ3534][SDOI2014]重建","date":"2019-03-07T03:56:35.000Z","comments":1,"_content":"# 题目大意：\n你有一个无向完全图。在一场洪水（？）以后，每条边都可能会损毁。给定每条边没有被损毁的概率，求最后剩下的边正好组成原来的图的一棵生成树的概率。\n\n<!-- more -->\n# 分析\n设一条边$w$损毁的概率为$E(w)$。由题意，我们要求的其实是\n$$\\sum_{T \\ is \\ a \\ spanning \\ tree \\ of \\ G}\\prod_{e\\in T}E(e)\\prod_{e\\in \\complement_G^T}(1-E(e))\\ \\ \\ (*)$$\n把这个柿子写出来，我们发现它很像变元矩阵树定理..所以考虑怎么化成矩阵树定理的形式.  \n我们是要把它化为$\\sum_T \\prod_{e\\in T} w(e)$的形式...那么必须把后面一项向T中的边靠拢。怎么做呢？  \n我们将后面一个连乘柿子变换一下形式...\n$$\n\\prod_{e\\in \\complement_G^T}(1-E(e))=\\prod_{e \\in G}(1-E(e))*\\prod_{e \\in T}\\frac{1}{(1-E(e))}\n$$\n则..\n$$(*)=\\prod_{e \\in G}(1-E(e)) *\\sum_T \\prod_{e\\in T}\\frac{E(e)}{1-E(e)} $$\n这就是矩阵树定理板子了..\n注意一个细节：当概率等于1的时候，我们会算出来nan..于是我想缩点...其实并不需要复杂的分类讨论、缩点之类的，只需要将1减去一个eps就行了。造成的精度误差不会太大的^_^。\n然后我们就珂以愉快地AC辣！\n# 参考代码\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n\nusing std::swap;\nusing std::fabs;\n\nconst int maxn=1e3+1;\nconst double eps=1e-6;\n\ndouble G[maxn][maxn];\n\ninline double determinant(double (*A)[maxn],int n)\n{\n    for (int i=1,c=1,j;i<=n;++i)\n    {\n        for (j=c;j<=n && fabs(A[j][i])<eps;++j);\n        if (j==n+1) continue;\n        for (int k=1;k<=n;++k) swap(A[c][k],A[j][k]);\n        for (int j=c+1;j<=n;++j)\n            if (fabs(A[j][i])>eps)\n            {\n                double t=A[j][i]/A[c][i];\n                for (int k=i;k<=n;++k)\n                    A[j][k]-=A[c][k]*t;\n            }\n        ++c;\n    }\n    double ans=1;\n    for (int i=1;i<=n;++i) ans*=A[i][i];\n    return fabs(ans);\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;++i)\n        for (int j=1;j<=n;++j)\n        {\n            scanf(\"%lf\",&G[i][j]);\n            if (G[i][j]==1) G[i][j]-=eps;\n        }\n    double prod=1;\n    for (int i=1;i<=n;++i)\n        for (int j=1;j<i;++j)\n            prod*=1-G[i][j];\n    for (int i=1;i<=n;++i)\n        for (int j=1;j<=n;++j)\n            if (i!=j) G[i][j]=G[i][j]/(1-G[i][j]),G[i][i]+=G[i][j],G[i][j]=-G[i][j];\n    printf(\"%.10lf\",prod*determinant(G,n-1));// BZOJ SPJ好像挂了，必须输出10位小数才能过...\n}\n```","source":"_posts/BZOJ3534.md","raw":"---\ntitle: '[BZOJ3534][SDOI2014]重建'\ndate: 2019-03-07 11:56:35\ntags:\n    - 矩阵树定理\n    - 数学\n    - 生成树\n    - 概率期望\ncategories:\n    - 题解\ncomments:\n---\n# 题目大意：\n你有一个无向完全图。在一场洪水（？）以后，每条边都可能会损毁。给定每条边没有被损毁的概率，求最后剩下的边正好组成原来的图的一棵生成树的概率。\n\n<!-- more -->\n# 分析\n设一条边$w$损毁的概率为$E(w)$。由题意，我们要求的其实是\n$$\\sum_{T \\ is \\ a \\ spanning \\ tree \\ of \\ G}\\prod_{e\\in T}E(e)\\prod_{e\\in \\complement_G^T}(1-E(e))\\ \\ \\ (*)$$\n把这个柿子写出来，我们发现它很像变元矩阵树定理..所以考虑怎么化成矩阵树定理的形式.  \n我们是要把它化为$\\sum_T \\prod_{e\\in T} w(e)$的形式...那么必须把后面一项向T中的边靠拢。怎么做呢？  \n我们将后面一个连乘柿子变换一下形式...\n$$\n\\prod_{e\\in \\complement_G^T}(1-E(e))=\\prod_{e \\in G}(1-E(e))*\\prod_{e \\in T}\\frac{1}{(1-E(e))}\n$$\n则..\n$$(*)=\\prod_{e \\in G}(1-E(e)) *\\sum_T \\prod_{e\\in T}\\frac{E(e)}{1-E(e)} $$\n这就是矩阵树定理板子了..\n注意一个细节：当概率等于1的时候，我们会算出来nan..于是我想缩点...其实并不需要复杂的分类讨论、缩点之类的，只需要将1减去一个eps就行了。造成的精度误差不会太大的^_^。\n然后我们就珂以愉快地AC辣！\n# 参考代码\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n\nusing std::swap;\nusing std::fabs;\n\nconst int maxn=1e3+1;\nconst double eps=1e-6;\n\ndouble G[maxn][maxn];\n\ninline double determinant(double (*A)[maxn],int n)\n{\n    for (int i=1,c=1,j;i<=n;++i)\n    {\n        for (j=c;j<=n && fabs(A[j][i])<eps;++j);\n        if (j==n+1) continue;\n        for (int k=1;k<=n;++k) swap(A[c][k],A[j][k]);\n        for (int j=c+1;j<=n;++j)\n            if (fabs(A[j][i])>eps)\n            {\n                double t=A[j][i]/A[c][i];\n                for (int k=i;k<=n;++k)\n                    A[j][k]-=A[c][k]*t;\n            }\n        ++c;\n    }\n    double ans=1;\n    for (int i=1;i<=n;++i) ans*=A[i][i];\n    return fabs(ans);\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;++i)\n        for (int j=1;j<=n;++j)\n        {\n            scanf(\"%lf\",&G[i][j]);\n            if (G[i][j]==1) G[i][j]-=eps;\n        }\n    double prod=1;\n    for (int i=1;i<=n;++i)\n        for (int j=1;j<i;++j)\n            prod*=1-G[i][j];\n    for (int i=1;i<=n;++i)\n        for (int j=1;j<=n;++j)\n            if (i!=j) G[i][j]=G[i][j]/(1-G[i][j]),G[i][i]+=G[i][j],G[i][j]=-G[i][j];\n    printf(\"%.10lf\",prod*determinant(G,n-1));// BZOJ SPJ好像挂了，必须输出10位小数才能过...\n}\n```","slug":"BZOJ3534","published":1,"updated":"2019-03-08T14:49:58.735Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm1d0008v4ty000t3gs4","content":"<h1 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h1><p>你有一个无向完全图。在一场洪水（？）以后，每条边都可能会损毁。给定每条边没有被损毁的概率，求最后剩下的边正好组成原来的图的一棵生成树的概率。</p>\n<a id=\"more\"></a>\n<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>设一条边$w$损毁的概率为$E(w)$。由题意，我们要求的其实是<br>$$\\sum_{T \\ is \\ a \\ spanning \\ tree \\ of \\ G}\\prod_{e\\in T}E(e)\\prod_{e\\in \\complement_G^T}(1-E(e))\\ \\ \\ (<em>)$$<br>把这个柿子写出来，我们发现它很像变元矩阵树定理..所以考虑怎么化成矩阵树定理的形式.<br>我们是要把它化为$\\sum_T \\prod_{e\\in T} w(e)$的形式…那么必须把后面一项向T中的边靠拢。怎么做呢？<br>我们将后面一个连乘柿子变换一下形式…<br>$$<br>\\prod_{e\\in \\complement_G^T}(1-E(e))=\\prod_{e \\in G}(1-E(e))</em>\\prod_{e \\in T}\\frac{1}{(1-E(e))}<br>$$<br>则..<br>$$(<em>)=\\prod_{e \\in G}(1-E(e)) </em>\\sum_T \\prod_{e\\in T}\\frac{E(e)}{1-E(e)} $$<br>这就是矩阵树定理板子了..<br>注意一个细节：当概率等于1的时候，我们会算出来nan..于是我想缩点…其实并不需要复杂的分类讨论、缩点之类的，只需要将1减去一个eps就行了。造成的精度误差不会太大的^_^。<br>然后我们就珂以愉快地AC辣！</p>\n<h1 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::swap;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">fabs</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e3</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps=<span class=\"number\">1e-6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> G[maxn][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">determinant</span><span class=\"params\">(<span class=\"keyword\">double</span> (*A)[maxn],<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,c=<span class=\"number\">1</span>,j;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=c;j&lt;=n &amp;&amp; <span class=\"built_in\">fabs</span>(A[j][i])&lt;eps;++j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j==n+<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=n;++k) swap(A[c][k],A[j][k]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=c+<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[j][i])&gt;eps)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">double</span> t=A[j][i]/A[c][i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=i;k&lt;=n;++k)</span><br><span class=\"line\">                    A[j][k]-=A[c][k]*t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ++c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) ans*=A[i][i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">fabs</span>(ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;G[i][j]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (G[i][j]==<span class=\"number\">1</span>) G[i][j]-=eps;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> prod=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;i;++j)</span><br><span class=\"line\">            prod*=<span class=\"number\">1</span>-G[i][j];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i!=j) G[i][j]=G[i][j]/(<span class=\"number\">1</span>-G[i][j]),G[i][i]+=G[i][j],G[i][j]=-G[i][j];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.10lf\"</span>,prod*determinant(G,n<span class=\"number\">-1</span>));<span class=\"comment\">// BZOJ SPJ好像挂了，必须输出10位小数才能过...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h1><p>你有一个无向完全图。在一场洪水（？）以后，每条边都可能会损毁。给定每条边没有被损毁的概率，求最后剩下的边正好组成原来的图的一棵生成树的概率。</p>","more":"<h1 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h1><p>设一条边$w$损毁的概率为$E(w)$。由题意，我们要求的其实是<br>$$\\sum_{T \\ is \\ a \\ spanning \\ tree \\ of \\ G}\\prod_{e\\in T}E(e)\\prod_{e\\in \\complement_G^T}(1-E(e))\\ \\ \\ (<em>)$$<br>把这个柿子写出来，我们发现它很像变元矩阵树定理..所以考虑怎么化成矩阵树定理的形式.<br>我们是要把它化为$\\sum_T \\prod_{e\\in T} w(e)$的形式…那么必须把后面一项向T中的边靠拢。怎么做呢？<br>我们将后面一个连乘柿子变换一下形式…<br>$$<br>\\prod_{e\\in \\complement_G^T}(1-E(e))=\\prod_{e \\in G}(1-E(e))</em>\\prod_{e \\in T}\\frac{1}{(1-E(e))}<br>$$<br>则..<br>$$(<em>)=\\prod_{e \\in G}(1-E(e)) </em>\\sum_T \\prod_{e\\in T}\\frac{E(e)}{1-E(e)} $$<br>这就是矩阵树定理板子了..<br>注意一个细节：当概率等于1的时候，我们会算出来nan..于是我想缩点…其实并不需要复杂的分类讨论、缩点之类的，只需要将1减去一个eps就行了。造成的精度误差不会太大的^_^。<br>然后我们就珂以愉快地AC辣！</p>\n<h1 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::swap;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">fabs</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e3</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps=<span class=\"number\">1e-6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> G[maxn][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">determinant</span><span class=\"params\">(<span class=\"keyword\">double</span> (*A)[maxn],<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,c=<span class=\"number\">1</span>,j;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=c;j&lt;=n &amp;&amp; <span class=\"built_in\">fabs</span>(A[j][i])&lt;eps;++j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j==n+<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=n;++k) swap(A[c][k],A[j][k]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=c+<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[j][i])&gt;eps)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">double</span> t=A[j][i]/A[c][i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=i;k&lt;=n;++k)</span><br><span class=\"line\">                    A[j][k]-=A[c][k]*t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ++c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) ans*=A[i][i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">fabs</span>(ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;G[i][j]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (G[i][j]==<span class=\"number\">1</span>) G[i][j]-=eps;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> prod=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;i;++j)</span><br><span class=\"line\">            prod*=<span class=\"number\">1</span>-G[i][j];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i!=j) G[i][j]=G[i][j]/(<span class=\"number\">1</span>-G[i][j]),G[i][i]+=G[i][j],G[i][j]=-G[i][j];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.10lf\"</span>,prod*determinant(G,n<span class=\"number\">-1</span>));<span class=\"comment\">// BZOJ SPJ好像挂了，必须输出10位小数才能过...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"LCT","date":"2018-07-23T13:05:21.000Z","comments":1,"_content":"\n","source":"_posts/LCT.md","raw":"---\ntitle: LCT\ndate: 2018-07-23 21:05:21\ntags: LCT\ncategories: 学习笔记\ncomments: true\n---\n\n","slug":"LCT","published":1,"updated":"2018-07-28T10:01:00.867Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm1f0009v4tycx1lj5ne","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"BZOJ1003","date":"2019-03-03T13:09:20.000Z","comments":1,"_content":"","source":"_posts/BZOJ1003.md","raw":"---\ntitle: BZOJ1003\ndate: 2019-03-03 21:09:20\ntags:\ncategories:\ncomments:\n---\n","slug":"BZOJ1003","published":1,"updated":"2019-03-03T13:09:20.303Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm1j000dv4tyxkd7brr7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"[SCOI2014][Luogu P3288]方伯伯运椰子","date":"2019-04-22T14:44:36.000Z","comments":1,"_content":"# 题目描述\n四川的方伯伯为了致富，决定引进海南的椰子树。方伯伯的椰子园十分现代化，椰子园中有一套独特的交通系统。\n\n<!-- more -->\n\n现在用点来表示交通节点，边来表示道路。这样，方伯伯的椰子园就可以看作一个有 n + 2 个交通节点，m条边的有向无环图。n +1 号点为入口，n +2 号点为出口。每条道路都有 6 个参数，ui，vi，ai，bi，ci，di，分别表示，该道路从 ui 号点通向 vi 号点，将它的容量压缩一次要 ai 的花费，容量扩大一次要 bi 的花费，该条道路当前的运输容量上限为 ci，并且每单位运输量通过该道路要 di 的费用。\n\n在这个交通网络中，只有一条道路与起点相连。因为弄坏了这条道路就会导致整个交通网络瘫痪，聪明的方伯伯决定绝不对这条道路进行调整，也就是说，现在除了这条道路之外，对其余道路都可以进行调整。\n\n有两种调整方式：\n\n选择一条道路，将其进行一次压缩，这条道路的容量会下降 1 单位。\n\n选择一条道路，将其进行一次扩容，这条道路的容量会上升 1 单位。\n\n一条道路可以被多次调整。\n\n由于很久以前，方伯伯就请过一个工程师，对这个交通网络进行过一次大的优化调整。所以现在所有的道路都被完全的利用起来了，即每条道路的负荷都是满的（每条道路的流量等于其容量）。\n\n但方伯伯一想到自己的海南椰子会大丰收，就十分担心巨大的运输量下，会导致过多的花费。因此，方伯伯决定至少进行一次调整，调整之后，必须要保持每条道路满负荷，且总交通量不会减少。\n\n设调整后的总费用是 Y，调整之前的总费用是 X。现在方伯伯想知道，最优调整比率是多少，即假设他进行了 k 次调整，(X - Y)/k最大能是多少？\n\n注：总费用 = 交通网络的运输花费 + 调整的花费\n\n# 输入输出格式\n## 输入格式：\n第一行包含二个整数N，M接下来M行代表M条边，表示这个交通网络每行六个整数，表示Ui,Vi,Ai,Bi,Ci,Di接下来一行包含一条边，表示连接起点的边\n\n## 输出格式：\n一个浮点数，保留两位小数。表示答案，数据保证答案大于0  \n# 数据规模与约定\n```\n1<=N<=5000\n0<=M<=3000\n1<=Ui,Vi<=N+2\n0<=Ai,Bi<=500\n0<=Ci<=10000\n0<=Di<=1000\n```\n\n# 题解\n~~真是个语文题~~  \n在艰难看懂了题意之后，我们可以发现，方伯伯实际上是在DAG上跑网络流。所以问题可以简化为：给一个网络图，可以进行增广或者退流，对边i增广一次的费用为$b_i+d_i$,退流一次的费用为$a_i-d_i$,（注意边权为0的边不能退流）最终使得总流量不变（增广和退流都需要花费，所以总流量变大肯定不优），并最大化原式。\n\n题面给的$(X-Y)/k$太难看了，我们给它换一下：\n令$Y=X+\\Delta w$，\n则原式变为$-\\Delta w/k$。\n\n如何保持流量不变的情况下，优化增广的费用？\n\n我们需要一个定理：\n> 消圈定理：一个流是当前流量下的最小费用流，等价于当前残量网络上没有负费用圈。\n\n> 证明：假设残量网络上存在负费用圈，我们可以把原来不经过负圈的流沿着这个负圈增广一次，则我们的流量会不变，并且减少了所花的费用。\n\n所以：我们现在的目标就是在残量网络上沿着负圈增广,且$\\text{maximize}\\{-\\Delta w/k\\}$.\n因为我们要最大化比值，所以我们显然要选择**一个**最优的环进行增广。选择多个环，答案显然会变劣（求的是平均值嘛）。这就是一个最小（大）平均值回路问题了。套用分数规划的思路，二分+bellman-ford判断负环就可以了。\n# 代码\n```cpp\n// luogu-judger-enable-o2\n#include <cstdio>\n#include <cstring>\n#include <queue>\n\nusing std::queue;\n\nconst int maxn=5000+1000;\nconst double eps=1e-6;\n\nstruct Edge\n{\n    int to,next;double w;\n}edge[maxn<<1];\n\nint head[maxn],cnt;\nint u[maxn],v[maxn],a[maxn],b[maxn],c[maxn],d[maxn];\n\ninline void add(int u,int v,double w)\n{\n    edge[++cnt].next=head[u];\n    edge[cnt].to=v;\n    edge[cnt].w=w;\n    head[u]=cnt;\n}\n\nbool spfa(int s,int n)\n{\n    static bool vis[maxn];\n    static double d[maxn];\n    static int cnt[maxn];\n    queue<int> q;\n    q.push(s);\n    for (int i=1;i<=n;++i) d[i]=1e18;\n    memset(vis,0,sizeof(vis));\n    memset(cnt,0,sizeof(cnt));\n    vis[s]=true;d[s]=0;\n    while (!q.empty())\n    {\n        int u=q.front();q.pop();\n        vis[u]=false;\n        for (int i=head[u];i;i=edge[i].next)\n        {\n            int v=edge[i].to;\n            if (d[v]>d[u]+edge[i].w)\n            {\n                d[v]=d[u]+edge[i].w;\n                cnt[v]=cnt[u]+1;\n                if (cnt[v]>=n) return true;\n                if (!vis[v]) vis[v]=true,q.push(v);\n            }\n        }\n    }\n    return false;\n}\n\ninline bool check(double mid,int n,int m)\n{\n    cnt=0;\n    memset(head,0,sizeof(head));\n    for (int i=1;i<=m;++i)\n    {\n        add(u[i],v[i],mid+(b[i]+d[i]));\n        if (c[i]>0) add(v[i],u[i],mid+(a[i]-d[i]));\n    }\n    return spfa(n-1,n);\n}\n\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    n+=2;\n    double sigma=0;\n    for (int i=1;i<=m;++i)\n        scanf(\"%d%d%d%d%d%d\",u+i,v+i,a+i,b+i,c+i,d+i),sigma+=a[i]+b[i]+(double)c[i]*d[i];\n    double l=0,r=sigma;\n    while (l+eps<r)\n    {\n        // printf(\"%.3lf %.3lf\\n\",l,r);\n        double mid=(l+r)/2;\n        if (check(mid,n,m)) l=mid;\n        else r=mid;\n    }\n    printf(\"%.2lf\",l);\n}\n```","source":"_posts/SCOI2014-Luogu-P3288-方伯伯运椰子.md","raw":"---\ntitle: '[SCOI2014][Luogu P3288]方伯伯运椰子'\ndate: 2019-04-22 22:44:36\ntags:\ncategories:\ncomments:\n---\n# 题目描述\n四川的方伯伯为了致富，决定引进海南的椰子树。方伯伯的椰子园十分现代化，椰子园中有一套独特的交通系统。\n\n<!-- more -->\n\n现在用点来表示交通节点，边来表示道路。这样，方伯伯的椰子园就可以看作一个有 n + 2 个交通节点，m条边的有向无环图。n +1 号点为入口，n +2 号点为出口。每条道路都有 6 个参数，ui，vi，ai，bi，ci，di，分别表示，该道路从 ui 号点通向 vi 号点，将它的容量压缩一次要 ai 的花费，容量扩大一次要 bi 的花费，该条道路当前的运输容量上限为 ci，并且每单位运输量通过该道路要 di 的费用。\n\n在这个交通网络中，只有一条道路与起点相连。因为弄坏了这条道路就会导致整个交通网络瘫痪，聪明的方伯伯决定绝不对这条道路进行调整，也就是说，现在除了这条道路之外，对其余道路都可以进行调整。\n\n有两种调整方式：\n\n选择一条道路，将其进行一次压缩，这条道路的容量会下降 1 单位。\n\n选择一条道路，将其进行一次扩容，这条道路的容量会上升 1 单位。\n\n一条道路可以被多次调整。\n\n由于很久以前，方伯伯就请过一个工程师，对这个交通网络进行过一次大的优化调整。所以现在所有的道路都被完全的利用起来了，即每条道路的负荷都是满的（每条道路的流量等于其容量）。\n\n但方伯伯一想到自己的海南椰子会大丰收，就十分担心巨大的运输量下，会导致过多的花费。因此，方伯伯决定至少进行一次调整，调整之后，必须要保持每条道路满负荷，且总交通量不会减少。\n\n设调整后的总费用是 Y，调整之前的总费用是 X。现在方伯伯想知道，最优调整比率是多少，即假设他进行了 k 次调整，(X - Y)/k最大能是多少？\n\n注：总费用 = 交通网络的运输花费 + 调整的花费\n\n# 输入输出格式\n## 输入格式：\n第一行包含二个整数N，M接下来M行代表M条边，表示这个交通网络每行六个整数，表示Ui,Vi,Ai,Bi,Ci,Di接下来一行包含一条边，表示连接起点的边\n\n## 输出格式：\n一个浮点数，保留两位小数。表示答案，数据保证答案大于0  \n# 数据规模与约定\n```\n1<=N<=5000\n0<=M<=3000\n1<=Ui,Vi<=N+2\n0<=Ai,Bi<=500\n0<=Ci<=10000\n0<=Di<=1000\n```\n\n# 题解\n~~真是个语文题~~  \n在艰难看懂了题意之后，我们可以发现，方伯伯实际上是在DAG上跑网络流。所以问题可以简化为：给一个网络图，可以进行增广或者退流，对边i增广一次的费用为$b_i+d_i$,退流一次的费用为$a_i-d_i$,（注意边权为0的边不能退流）最终使得总流量不变（增广和退流都需要花费，所以总流量变大肯定不优），并最大化原式。\n\n题面给的$(X-Y)/k$太难看了，我们给它换一下：\n令$Y=X+\\Delta w$，\n则原式变为$-\\Delta w/k$。\n\n如何保持流量不变的情况下，优化增广的费用？\n\n我们需要一个定理：\n> 消圈定理：一个流是当前流量下的最小费用流，等价于当前残量网络上没有负费用圈。\n\n> 证明：假设残量网络上存在负费用圈，我们可以把原来不经过负圈的流沿着这个负圈增广一次，则我们的流量会不变，并且减少了所花的费用。\n\n所以：我们现在的目标就是在残量网络上沿着负圈增广,且$\\text{maximize}\\{-\\Delta w/k\\}$.\n因为我们要最大化比值，所以我们显然要选择**一个**最优的环进行增广。选择多个环，答案显然会变劣（求的是平均值嘛）。这就是一个最小（大）平均值回路问题了。套用分数规划的思路，二分+bellman-ford判断负环就可以了。\n# 代码\n```cpp\n// luogu-judger-enable-o2\n#include <cstdio>\n#include <cstring>\n#include <queue>\n\nusing std::queue;\n\nconst int maxn=5000+1000;\nconst double eps=1e-6;\n\nstruct Edge\n{\n    int to,next;double w;\n}edge[maxn<<1];\n\nint head[maxn],cnt;\nint u[maxn],v[maxn],a[maxn],b[maxn],c[maxn],d[maxn];\n\ninline void add(int u,int v,double w)\n{\n    edge[++cnt].next=head[u];\n    edge[cnt].to=v;\n    edge[cnt].w=w;\n    head[u]=cnt;\n}\n\nbool spfa(int s,int n)\n{\n    static bool vis[maxn];\n    static double d[maxn];\n    static int cnt[maxn];\n    queue<int> q;\n    q.push(s);\n    for (int i=1;i<=n;++i) d[i]=1e18;\n    memset(vis,0,sizeof(vis));\n    memset(cnt,0,sizeof(cnt));\n    vis[s]=true;d[s]=0;\n    while (!q.empty())\n    {\n        int u=q.front();q.pop();\n        vis[u]=false;\n        for (int i=head[u];i;i=edge[i].next)\n        {\n            int v=edge[i].to;\n            if (d[v]>d[u]+edge[i].w)\n            {\n                d[v]=d[u]+edge[i].w;\n                cnt[v]=cnt[u]+1;\n                if (cnt[v]>=n) return true;\n                if (!vis[v]) vis[v]=true,q.push(v);\n            }\n        }\n    }\n    return false;\n}\n\ninline bool check(double mid,int n,int m)\n{\n    cnt=0;\n    memset(head,0,sizeof(head));\n    for (int i=1;i<=m;++i)\n    {\n        add(u[i],v[i],mid+(b[i]+d[i]));\n        if (c[i]>0) add(v[i],u[i],mid+(a[i]-d[i]));\n    }\n    return spfa(n-1,n);\n}\n\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    n+=2;\n    double sigma=0;\n    for (int i=1;i<=m;++i)\n        scanf(\"%d%d%d%d%d%d\",u+i,v+i,a+i,b+i,c+i,d+i),sigma+=a[i]+b[i]+(double)c[i]*d[i];\n    double l=0,r=sigma;\n    while (l+eps<r)\n    {\n        // printf(\"%.3lf %.3lf\\n\",l,r);\n        double mid=(l+r)/2;\n        if (check(mid,n,m)) l=mid;\n        else r=mid;\n    }\n    printf(\"%.2lf\",l);\n}\n```","slug":"SCOI2014-Luogu-P3288-方伯伯运椰子","published":1,"updated":"2019-04-23T01:07:01.246Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm1l000ev4tywu5zps6d","content":"<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>四川的方伯伯为了致富，决定引进海南的椰子树。方伯伯的椰子园十分现代化，椰子园中有一套独特的交通系统。</p>\n<a id=\"more\"></a>\n<p>现在用点来表示交通节点，边来表示道路。这样，方伯伯的椰子园就可以看作一个有 n + 2 个交通节点，m条边的有向无环图。n +1 号点为入口，n +2 号点为出口。每条道路都有 6 个参数，ui，vi，ai，bi，ci，di，分别表示，该道路从 ui 号点通向 vi 号点，将它的容量压缩一次要 ai 的花费，容量扩大一次要 bi 的花费，该条道路当前的运输容量上限为 ci，并且每单位运输量通过该道路要 di 的费用。</p>\n<p>在这个交通网络中，只有一条道路与起点相连。因为弄坏了这条道路就会导致整个交通网络瘫痪，聪明的方伯伯决定绝不对这条道路进行调整，也就是说，现在除了这条道路之外，对其余道路都可以进行调整。</p>\n<p>有两种调整方式：</p>\n<p>选择一条道路，将其进行一次压缩，这条道路的容量会下降 1 单位。</p>\n<p>选择一条道路，将其进行一次扩容，这条道路的容量会上升 1 单位。</p>\n<p>一条道路可以被多次调整。</p>\n<p>由于很久以前，方伯伯就请过一个工程师，对这个交通网络进行过一次大的优化调整。所以现在所有的道路都被完全的利用起来了，即每条道路的负荷都是满的（每条道路的流量等于其容量）。</p>\n<p>但方伯伯一想到自己的海南椰子会大丰收，就十分担心巨大的运输量下，会导致过多的花费。因此，方伯伯决定至少进行一次调整，调整之后，必须要保持每条道路满负荷，且总交通量不会减少。</p>\n<p>设调整后的总费用是 Y，调整之前的总费用是 X。现在方伯伯想知道，最优调整比率是多少，即假设他进行了 k 次调整，(X - Y)/k最大能是多少？</p>\n<p>注：总费用 = 交通网络的运输花费 + 调整的花费</p>\n<h1 id=\"输入输出格式\"><a href=\"#输入输出格式\" class=\"headerlink\" title=\"输入输出格式\"></a>输入输出格式</h1><h2 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h2><p>第一行包含二个整数N，M接下来M行代表M条边，表示这个交通网络每行六个整数，表示Ui,Vi,Ai,Bi,Ci,Di接下来一行包含一条边，表示连接起点的边</p>\n<h2 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h2><p>一个浮点数，保留两位小数。表示答案，数据保证答案大于0  </p>\n<h1 id=\"数据规模与约定\"><a href=\"#数据规模与约定\" class=\"headerlink\" title=\"数据规模与约定\"></a>数据规模与约定</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&lt;=N&lt;=5000</span><br><span class=\"line\">0&lt;=M&lt;=3000</span><br><span class=\"line\">1&lt;=Ui,Vi&lt;=N+2</span><br><span class=\"line\">0&lt;=Ai,Bi&lt;=500</span><br><span class=\"line\">0&lt;=Ci&lt;=10000</span><br><span class=\"line\">0&lt;=Di&lt;=1000</span><br></pre></td></tr></table></figure>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p><del>真是个语文题</del><br>在艰难看懂了题意之后，我们可以发现，方伯伯实际上是在DAG上跑网络流。所以问题可以简化为：给一个网络图，可以进行增广或者退流，对边i增广一次的费用为$b_i+d_i$,退流一次的费用为$a_i-d_i$,（注意边权为0的边不能退流）最终使得总流量不变（增广和退流都需要花费，所以总流量变大肯定不优），并最大化原式。</p>\n<p>题面给的$(X-Y)/k$太难看了，我们给它换一下：<br>令$Y=X+\\Delta w$，<br>则原式变为$-\\Delta w/k$。</p>\n<p>如何保持流量不变的情况下，优化增广的费用？</p>\n<p>我们需要一个定理：</p>\n<blockquote>\n<p>消圈定理：一个流是当前流量下的最小费用流，等价于当前残量网络上没有负费用圈。</p>\n</blockquote>\n<blockquote>\n<p>证明：假设残量网络上存在负费用圈，我们可以把原来不经过负圈的流沿着这个负圈增广一次，则我们的流量会不变，并且减少了所花的费用。</p>\n</blockquote>\n<p>所以：我们现在的目标就是在残量网络上沿着负圈增广,且$\\text{maximize}{-\\Delta w/k}$.<br>因为我们要最大化比值，所以我们显然要选择<strong>一个</strong>最优的环进行增广。选择多个环，答案显然会变劣（求的是平均值嘛）。这就是一个最小（大）平均值回路问题了。套用分数规划的思路，二分+bellman-ford判断负环就可以了。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// luogu-judger-enable-o2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">queue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">5000</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps=<span class=\"number\">1e-6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,next;<span class=\"keyword\">double</span> w;</span><br><span class=\"line\">&#125;edge[maxn&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> head[maxn],cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> u[maxn],v[maxn],a[maxn],b[maxn],c[maxn],d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">double</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++cnt].next=head[u];</span><br><span class=\"line\">    edge[cnt].to=v;</span><br><span class=\"line\">    edge[cnt].w=w;</span><br><span class=\"line\">    head[u]=cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">spfa</span><span class=\"params\">(<span class=\"keyword\">int</span> s,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> d[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> cnt[maxn];</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) d[i]=<span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(cnt,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(cnt));</span><br><span class=\"line\">    vis[s]=<span class=\"literal\">true</span>;d[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=q.front();q.pop();</span><br><span class=\"line\">        vis[u]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d[v]&gt;d[u]+edge[i].w)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                d[v]=d[u]+edge[i].w;</span><br><span class=\"line\">                cnt[v]=cnt[u]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cnt[v]&gt;=n) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[v]) vis[v]=<span class=\"literal\">true</span>,q.push(v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">double</span> mid,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(head,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(head));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        add(u[i],v[i],mid+(b[i]+d[i]));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c[i]&gt;<span class=\"number\">0</span>) add(v[i],u[i],mid+(a[i]-d[i]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> spfa(n<span class=\"number\">-1</span>,n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    n+=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> sigma=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d%d%d\"</span>,u+i,v+i,a+i,b+i,c+i,d+i),sigma+=a[i]+b[i]+(<span class=\"keyword\">double</span>)c[i]*d[i];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> l=<span class=\"number\">0</span>,r=sigma;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l+eps&lt;r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// printf(\"%.3lf %.3lf\\n\",l,r);</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check(mid,n,m)) l=mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> r=mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.2lf\"</span>,l);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>四川的方伯伯为了致富，决定引进海南的椰子树。方伯伯的椰子园十分现代化，椰子园中有一套独特的交通系统。</p>","more":"<p>现在用点来表示交通节点，边来表示道路。这样，方伯伯的椰子园就可以看作一个有 n + 2 个交通节点，m条边的有向无环图。n +1 号点为入口，n +2 号点为出口。每条道路都有 6 个参数，ui，vi，ai，bi，ci，di，分别表示，该道路从 ui 号点通向 vi 号点，将它的容量压缩一次要 ai 的花费，容量扩大一次要 bi 的花费，该条道路当前的运输容量上限为 ci，并且每单位运输量通过该道路要 di 的费用。</p>\n<p>在这个交通网络中，只有一条道路与起点相连。因为弄坏了这条道路就会导致整个交通网络瘫痪，聪明的方伯伯决定绝不对这条道路进行调整，也就是说，现在除了这条道路之外，对其余道路都可以进行调整。</p>\n<p>有两种调整方式：</p>\n<p>选择一条道路，将其进行一次压缩，这条道路的容量会下降 1 单位。</p>\n<p>选择一条道路，将其进行一次扩容，这条道路的容量会上升 1 单位。</p>\n<p>一条道路可以被多次调整。</p>\n<p>由于很久以前，方伯伯就请过一个工程师，对这个交通网络进行过一次大的优化调整。所以现在所有的道路都被完全的利用起来了，即每条道路的负荷都是满的（每条道路的流量等于其容量）。</p>\n<p>但方伯伯一想到自己的海南椰子会大丰收，就十分担心巨大的运输量下，会导致过多的花费。因此，方伯伯决定至少进行一次调整，调整之后，必须要保持每条道路满负荷，且总交通量不会减少。</p>\n<p>设调整后的总费用是 Y，调整之前的总费用是 X。现在方伯伯想知道，最优调整比率是多少，即假设他进行了 k 次调整，(X - Y)/k最大能是多少？</p>\n<p>注：总费用 = 交通网络的运输花费 + 调整的花费</p>\n<h1 id=\"输入输出格式\"><a href=\"#输入输出格式\" class=\"headerlink\" title=\"输入输出格式\"></a>输入输出格式</h1><h2 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h2><p>第一行包含二个整数N，M接下来M行代表M条边，表示这个交通网络每行六个整数，表示Ui,Vi,Ai,Bi,Ci,Di接下来一行包含一条边，表示连接起点的边</p>\n<h2 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h2><p>一个浮点数，保留两位小数。表示答案，数据保证答案大于0  </p>\n<h1 id=\"数据规模与约定\"><a href=\"#数据规模与约定\" class=\"headerlink\" title=\"数据规模与约定\"></a>数据规模与约定</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1&lt;=N&lt;=5000</span><br><span class=\"line\">0&lt;=M&lt;=3000</span><br><span class=\"line\">1&lt;=Ui,Vi&lt;=N+2</span><br><span class=\"line\">0&lt;=Ai,Bi&lt;=500</span><br><span class=\"line\">0&lt;=Ci&lt;=10000</span><br><span class=\"line\">0&lt;=Di&lt;=1000</span><br></pre></td></tr></table></figure>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p><del>真是个语文题</del><br>在艰难看懂了题意之后，我们可以发现，方伯伯实际上是在DAG上跑网络流。所以问题可以简化为：给一个网络图，可以进行增广或者退流，对边i增广一次的费用为$b_i+d_i$,退流一次的费用为$a_i-d_i$,（注意边权为0的边不能退流）最终使得总流量不变（增广和退流都需要花费，所以总流量变大肯定不优），并最大化原式。</p>\n<p>题面给的$(X-Y)/k$太难看了，我们给它换一下：<br>令$Y=X+\\Delta w$，<br>则原式变为$-\\Delta w/k$。</p>\n<p>如何保持流量不变的情况下，优化增广的费用？</p>\n<p>我们需要一个定理：</p>\n<blockquote>\n<p>消圈定理：一个流是当前流量下的最小费用流，等价于当前残量网络上没有负费用圈。</p>\n</blockquote>\n<blockquote>\n<p>证明：假设残量网络上存在负费用圈，我们可以把原来不经过负圈的流沿着这个负圈增广一次，则我们的流量会不变，并且减少了所花的费用。</p>\n</blockquote>\n<p>所以：我们现在的目标就是在残量网络上沿着负圈增广,且$\\text{maximize}{-\\Delta w/k}$.<br>因为我们要最大化比值，所以我们显然要选择<strong>一个</strong>最优的环进行增广。选择多个环，答案显然会变劣（求的是平均值嘛）。这就是一个最小（大）平均值回路问题了。套用分数规划的思路，二分+bellman-ford判断负环就可以了。</p>\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// luogu-judger-enable-o2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">queue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">5000</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps=<span class=\"number\">1e-6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,next;<span class=\"keyword\">double</span> w;</span><br><span class=\"line\">&#125;edge[maxn&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> head[maxn],cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> u[maxn],v[maxn],a[maxn],b[maxn],c[maxn],d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">double</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++cnt].next=head[u];</span><br><span class=\"line\">    edge[cnt].to=v;</span><br><span class=\"line\">    edge[cnt].w=w;</span><br><span class=\"line\">    head[u]=cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">spfa</span><span class=\"params\">(<span class=\"keyword\">int</span> s,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> d[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> cnt[maxn];</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) d[i]=<span class=\"number\">1e18</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(cnt,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(cnt));</span><br><span class=\"line\">    vis[s]=<span class=\"literal\">true</span>;d[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=q.front();q.pop();</span><br><span class=\"line\">        vis[u]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d[v]&gt;d[u]+edge[i].w)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                d[v]=d[u]+edge[i].w;</span><br><span class=\"line\">                cnt[v]=cnt[u]+<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (cnt[v]&gt;=n) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[v]) vis[v]=<span class=\"literal\">true</span>,q.push(v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">double</span> mid,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(head,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(head));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        add(u[i],v[i],mid+(b[i]+d[i]));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c[i]&gt;<span class=\"number\">0</span>) add(v[i],u[i],mid+(a[i]-d[i]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> spfa(n<span class=\"number\">-1</span>,n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    n+=<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> sigma=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d%d%d\"</span>,u+i,v+i,a+i,b+i,c+i,d+i),sigma+=a[i]+b[i]+(<span class=\"keyword\">double</span>)c[i]*d[i];</span><br><span class=\"line\">    <span class=\"keyword\">double</span> l=<span class=\"number\">0</span>,r=sigma;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l+eps&lt;r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// printf(\"%.3lf %.3lf\\n\",l,r);</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> mid=(l+r)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check(mid,n,m)) l=mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> r=mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.2lf\"</span>,l);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"[ZJOI2016]书架","date":"2019-03-18T05:19:42.000Z","comments":1,"_content":"","source":"_posts/ZJOI2016-书架.md","raw":"---\ntitle: '[ZJOI2016]书架'\ndate: 2019-03-18 13:19:42\ntags:\ncategories:\ncomments:\n---\n","slug":"ZJOI2016-书架","published":1,"updated":"2019-03-18T05:19:42.380Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm1p000iv4tyyy56b8hw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hello World","date":"2018-07-15T13:20:18.000Z","comments":0,"_content":"```cpp\n#include<stdio.h>\nint main(int argc,char** argv)\n{\n    printf(\"Hello,world! @My Blog\");\n}\n```\n\n今天蒟蒻_WA自动机在chty_syq大佬的帮助下终于建成自己的博客辣！","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2018-07-15 21:20:18\ntags: \ncomments: false\n---\n```cpp\n#include<stdio.h>\nint main(int argc,char** argv)\n{\n    printf(\"Hello,world! @My Blog\");\n}\n```\n\n今天蒟蒻_WA自动机在chty_syq大佬的帮助下终于建成自己的博客辣！","slug":"hello-world","published":1,"updated":"2019-05-03T03:32:22.662Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm1q000jv4tymtiee8b9","content":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span>** argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello,world! @My Blog\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>今天蒟蒻_WA自动机在chty_syq大佬的帮助下终于建成自己的博客辣！</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc,<span class=\"keyword\">char</span>** argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello,world! @My Blog\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>今天蒟蒻_WA自动机在chty_syq大佬的帮助下终于建成自己的博客辣！</p>\n"},{"title":"[luogu P3994]高速公路","date":"2019-04-28T14:59:19.000Z","comments":1,"_content":"\n斜率优化dp\n\n<!-- more -->\n\n# 题目背景\nC国拥有一张四通八达的高速公路~~网~~树，其中有n个城市，城市之间由一共n-1条高速公路连接。除了首都1号城市，每个城市都有一家本地的客运公司，可以发车前往全国各地，有若干条高速公路连向其他城市，这是一个树型结构，1号城市（首都）为根。假设有一个人要从i号城市坐车出发前往j号城市，那么他要花费Pi*（i城市到j城市的距离）+Qi元。由于距离首都越远，国家的监管就越松，所以距离首都越远，客运公司的Pi（单位距离价格）越大，形式化的说，如果把高速路网看成一棵以首都为根的有根树，i号城市是j号城市的某个祖先，那么一定存在Pi<=Pj。\n\n# 题目描述\n大宁成为了国家统计局的调查人员，他需要对现在的高速路网进行一次调查，了解从其他每一个城市到达首都1号城市所花费的金钱(路径必须是简单路径)。\n\n因为有非常多转车（或不转车）的抵达首都的方法，所以人工计算这个结果是十分复杂的。大宁非常的懒，所以请你编写一个程序解决它。\n# 题解  \n这道题的dp方程比较显然：\n$$f[u]=min_{lca(u,v)=v}\\{f[v]+P[u]*(depth[u]-depth[v])+Q[u]\\}$$\n直接dp是$O(n^2)$的。有关于uv的乘积项，depth单调，考虑斜率优化。  \n整理得：\n$$f[u]=min_{lca(u,v)=v}(-depth[v]*P[u]+f[v])+Q[u]+depth[u]*P[u])$$\n则以$-depth[v]$为斜率，$P[u]$为横坐标，$f[v]$为截距，化为一个标准的斜率优化柿子。\n\n我们发现x坐标是不单调的，这意味着我们需要维护整个凸包（单调栈），然后二分找最优的决策点。这也是老套路了。\n\n但是重点并不在于此：这是树上的dp，我们不能像维护序列一样直接令决策点入队出队，因为这样的话每个点不一定只被入队一次，最坏情况仍然是$O(n^2)$。那我们怎么办呢？\n\n~~用主席树实现可持久化栈~~\n\n~~点分治优化dp~~\n\n上面的做法不太好写而且常数巨大...我们有更为优雅的方法：\n\n考虑到斜率单调，那么新来的直线排除掉的旧决策一定是栈顶连续的一段区间。由于决策的单调性，我们可以通过二分找到应该插入新决策的位置(这里找决策点的方法其实和单调队列相同，只是把暴力出队改成二分找合法位置罢了），并让决策入栈。我们发现这样的话其实只是改变了栈顶的位置并修改了一个元素，所以我们在回溯的时候把栈顶和修改的元素改回去，就实现了$O(n\\lg n)$的优秀做法...  \n~~不过因为数据太水被暴力踩爆了~~\n\n下面是喜闻乐见的代码~（求评价码风qwq）\n```cpp\n// luogu-judger-enable-o2\n#include <cstdio>\n#include <algorithm>\n\nconst int maxn=1e6+100;\n\nstruct Edge\n{\n    int to,next,w;\n}edge[maxn<<1];\n\nint head[maxn],cnt;\nint stack[maxn],P[maxn],Q[maxn],fa[maxn];\nint64_t f[maxn],depth[maxn];\n\ninline void add(int u,int v,int w)\n{\n    edge[++cnt].next=head[u];\n    edge[cnt].to=v;\n    edge[cnt].w=w;\n    head[u]=cnt;\n}\n\ntemplate<class T>inline T max(T a,T b){return a<b?b:a;}\ntemplate<class T>inline T min(T a,T b){return a<b?a:b;}\n\ninline int64_t K(int x){return -depth[x];}\ninline int64_t B(int x){return f[x];}\ninline int64_t C(int x){return Q[x]+(int64_t)depth[x]*P[x];}\ninline double intersection(int x,int y){return ((double)B(x)-B(y))/(K(y)-K(x));}\n\n//f[u]=min_{lca(u,v)=v}(-depth[v]*P[u]+f[v])+Q[u]+depth[u]*P[u])\n\ninline int findbest(int x,int top)\n{\n    int l=1,r=top;\n    while (l<=r)\n    {\n        int mid=(l+r)>>1;\n        if (intersection(stack[mid-1],stack[mid])<=P[x]) l=mid+1;\n        else r=mid-1;\n    }\n    return stack[r];//蒟蒻这里写成了return r WA到怀疑人生..\n}\n\ninline int findpos(int x,int top)\n{\n    int l=1,r=top;\n    while (l<=r)\n    {\n        int mid=(l+r)>>1;\n        if (intersection(stack[mid-1],x)>intersection(stack[mid],stack[mid-1])) l=mid+1;\n        else r=mid-1;\n    }\n    return r;\n}\n\ninline int64_t calc(int x,int top)\n{\n    int dec=findbest(x,top);\n    return K(dec)*P[x]+B(dec)+C(x);\n}\n\ninline void dfs(int u,int top,int ff)\n{\n    f[u]=calc(u,top);\n    top=findpos(u,top)+1;\n    int pre=stack[top];\n    stack[top]=u;\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        depth[v]=depth[u]+edge[i].w;\n        if (v==ff) continue;\n        dfs(v,top,u);\n    }\n    stack[top]=pre;\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for (int i=2,w;i<=n;++i)\n        scanf(\"%d%d%d%d\",fa+i,&w,P+i,Q+i),add(fa[i],i,w);\n    for (int i=head[1];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        depth[v]=edge[i].w;\n        dfs(v,0,1);\n    }\n    for (int i=2;i<=n;++i)\n        printf(\"%lld\\n\",f[i]);\n}\n```","source":"_posts/luogu-P3994-高速公路.md","raw":"---\ntitle: '[luogu P3994]高速公路'\ndate: 2019-04-28 22:59:19\ntags:\n    - 动态规划\n    - 斜率优化\n    - 单调栈\ncategories:\ncomments:\n---\n\n斜率优化dp\n\n<!-- more -->\n\n# 题目背景\nC国拥有一张四通八达的高速公路~~网~~树，其中有n个城市，城市之间由一共n-1条高速公路连接。除了首都1号城市，每个城市都有一家本地的客运公司，可以发车前往全国各地，有若干条高速公路连向其他城市，这是一个树型结构，1号城市（首都）为根。假设有一个人要从i号城市坐车出发前往j号城市，那么他要花费Pi*（i城市到j城市的距离）+Qi元。由于距离首都越远，国家的监管就越松，所以距离首都越远，客运公司的Pi（单位距离价格）越大，形式化的说，如果把高速路网看成一棵以首都为根的有根树，i号城市是j号城市的某个祖先，那么一定存在Pi<=Pj。\n\n# 题目描述\n大宁成为了国家统计局的调查人员，他需要对现在的高速路网进行一次调查，了解从其他每一个城市到达首都1号城市所花费的金钱(路径必须是简单路径)。\n\n因为有非常多转车（或不转车）的抵达首都的方法，所以人工计算这个结果是十分复杂的。大宁非常的懒，所以请你编写一个程序解决它。\n# 题解  \n这道题的dp方程比较显然：\n$$f[u]=min_{lca(u,v)=v}\\{f[v]+P[u]*(depth[u]-depth[v])+Q[u]\\}$$\n直接dp是$O(n^2)$的。有关于uv的乘积项，depth单调，考虑斜率优化。  \n整理得：\n$$f[u]=min_{lca(u,v)=v}(-depth[v]*P[u]+f[v])+Q[u]+depth[u]*P[u])$$\n则以$-depth[v]$为斜率，$P[u]$为横坐标，$f[v]$为截距，化为一个标准的斜率优化柿子。\n\n我们发现x坐标是不单调的，这意味着我们需要维护整个凸包（单调栈），然后二分找最优的决策点。这也是老套路了。\n\n但是重点并不在于此：这是树上的dp，我们不能像维护序列一样直接令决策点入队出队，因为这样的话每个点不一定只被入队一次，最坏情况仍然是$O(n^2)$。那我们怎么办呢？\n\n~~用主席树实现可持久化栈~~\n\n~~点分治优化dp~~\n\n上面的做法不太好写而且常数巨大...我们有更为优雅的方法：\n\n考虑到斜率单调，那么新来的直线排除掉的旧决策一定是栈顶连续的一段区间。由于决策的单调性，我们可以通过二分找到应该插入新决策的位置(这里找决策点的方法其实和单调队列相同，只是把暴力出队改成二分找合法位置罢了），并让决策入栈。我们发现这样的话其实只是改变了栈顶的位置并修改了一个元素，所以我们在回溯的时候把栈顶和修改的元素改回去，就实现了$O(n\\lg n)$的优秀做法...  \n~~不过因为数据太水被暴力踩爆了~~\n\n下面是喜闻乐见的代码~（求评价码风qwq）\n```cpp\n// luogu-judger-enable-o2\n#include <cstdio>\n#include <algorithm>\n\nconst int maxn=1e6+100;\n\nstruct Edge\n{\n    int to,next,w;\n}edge[maxn<<1];\n\nint head[maxn],cnt;\nint stack[maxn],P[maxn],Q[maxn],fa[maxn];\nint64_t f[maxn],depth[maxn];\n\ninline void add(int u,int v,int w)\n{\n    edge[++cnt].next=head[u];\n    edge[cnt].to=v;\n    edge[cnt].w=w;\n    head[u]=cnt;\n}\n\ntemplate<class T>inline T max(T a,T b){return a<b?b:a;}\ntemplate<class T>inline T min(T a,T b){return a<b?a:b;}\n\ninline int64_t K(int x){return -depth[x];}\ninline int64_t B(int x){return f[x];}\ninline int64_t C(int x){return Q[x]+(int64_t)depth[x]*P[x];}\ninline double intersection(int x,int y){return ((double)B(x)-B(y))/(K(y)-K(x));}\n\n//f[u]=min_{lca(u,v)=v}(-depth[v]*P[u]+f[v])+Q[u]+depth[u]*P[u])\n\ninline int findbest(int x,int top)\n{\n    int l=1,r=top;\n    while (l<=r)\n    {\n        int mid=(l+r)>>1;\n        if (intersection(stack[mid-1],stack[mid])<=P[x]) l=mid+1;\n        else r=mid-1;\n    }\n    return stack[r];//蒟蒻这里写成了return r WA到怀疑人生..\n}\n\ninline int findpos(int x,int top)\n{\n    int l=1,r=top;\n    while (l<=r)\n    {\n        int mid=(l+r)>>1;\n        if (intersection(stack[mid-1],x)>intersection(stack[mid],stack[mid-1])) l=mid+1;\n        else r=mid-1;\n    }\n    return r;\n}\n\ninline int64_t calc(int x,int top)\n{\n    int dec=findbest(x,top);\n    return K(dec)*P[x]+B(dec)+C(x);\n}\n\ninline void dfs(int u,int top,int ff)\n{\n    f[u]=calc(u,top);\n    top=findpos(u,top)+1;\n    int pre=stack[top];\n    stack[top]=u;\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        depth[v]=depth[u]+edge[i].w;\n        if (v==ff) continue;\n        dfs(v,top,u);\n    }\n    stack[top]=pre;\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for (int i=2,w;i<=n;++i)\n        scanf(\"%d%d%d%d\",fa+i,&w,P+i,Q+i),add(fa[i],i,w);\n    for (int i=head[1];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        depth[v]=edge[i].w;\n        dfs(v,0,1);\n    }\n    for (int i=2;i<=n;++i)\n        printf(\"%lld\\n\",f[i]);\n}\n```","slug":"luogu-P3994-高速公路","published":1,"updated":"2019-04-28T15:05:29.138Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm1s000mv4tyu6klznm2","content":"<p>斜率优化dp</p>\n<a id=\"more\"></a>\n<h1 id=\"题目背景\"><a href=\"#题目背景\" class=\"headerlink\" title=\"题目背景\"></a>题目背景</h1><p>C国拥有一张四通八达的高速公路<del>网</del>树，其中有n个城市，城市之间由一共n-1条高速公路连接。除了首都1号城市，每个城市都有一家本地的客运公司，可以发车前往全国各地，有若干条高速公路连向其他城市，这是一个树型结构，1号城市（首都）为根。假设有一个人要从i号城市坐车出发前往j号城市，那么他要花费Pi*（i城市到j城市的距离）+Qi元。由于距离首都越远，国家的监管就越松，所以距离首都越远，客运公司的Pi（单位距离价格）越大，形式化的说，如果把高速路网看成一棵以首都为根的有根树，i号城市是j号城市的某个祖先，那么一定存在Pi&lt;=Pj。</p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>大宁成为了国家统计局的调查人员，他需要对现在的高速路网进行一次调查，了解从其他每一个城市到达首都1号城市所花费的金钱(路径必须是简单路径)。</p>\n<p>因为有非常多转车（或不转车）的抵达首都的方法，所以人工计算这个结果是十分复杂的。大宁非常的懒，所以请你编写一个程序解决它。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>这道题的dp方程比较显然：<br>$$f[u]=min_{lca(u,v)=v}{f[v]+P[u]<em>(depth[u]-depth[v])+Q[u]}$$<br>直接dp是$O(n^2)$的。有关于uv的乘积项，depth单调，考虑斜率优化。<br>整理得：<br>$$f[u]=min_{lca(u,v)=v}(-depth[v]</em>P[u]+f[v])+Q[u]+depth[u]*P[u])$$<br>则以$-depth[v]$为斜率，$P[u]$为横坐标，$f[v]$为截距，化为一个标准的斜率优化柿子。</p>\n<p>我们发现x坐标是不单调的，这意味着我们需要维护整个凸包（单调栈），然后二分找最优的决策点。这也是老套路了。</p>\n<p>但是重点并不在于此：这是树上的dp，我们不能像维护序列一样直接令决策点入队出队，因为这样的话每个点不一定只被入队一次，最坏情况仍然是$O(n^2)$。那我们怎么办呢？</p>\n<p><del>用主席树实现可持久化栈</del></p>\n<p><del>点分治优化dp</del></p>\n<p>上面的做法不太好写而且常数巨大…我们有更为优雅的方法：</p>\n<p>考虑到斜率单调，那么新来的直线排除掉的旧决策一定是栈顶连续的一段区间。由于决策的单调性，我们可以通过二分找到应该插入新决策的位置(这里找决策点的方法其实和单调队列相同，只是把暴力出队改成二分找合法位置罢了），并让决策入栈。我们发现这样的话其实只是改变了栈顶的位置并修改了一个元素，所以我们在回溯的时候把栈顶和修改的元素改回去，就实现了$O(n\\lg n)$的优秀做法…<br><del>不过因为数据太水被暴力踩爆了</del></p>\n<p>下面是喜闻乐见的代码~（求评价码风qwq）<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// luogu-judger-enable-o2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e6</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,next,w;</span><br><span class=\"line\">&#125;edge[maxn&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> head[maxn],cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">stack</span>[maxn],P[maxn],Q[maxn],fa[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int64_t</span> f[maxn],depth[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++cnt].next=head[u];</span><br><span class=\"line\">    edge[cnt].to=v;</span><br><span class=\"line\">    edge[cnt].w=w;</span><br><span class=\"line\">    head[u]=cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">max</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?b:a;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">min</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?a:b;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64_t <span class=\"title\">K</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> -depth[x];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64_t <span class=\"title\">B</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> f[x];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64_t <span class=\"title\">C</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> Q[x]+(<span class=\"keyword\">int64_t</span>)depth[x]*P[x];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">intersection</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;<span class=\"keyword\">return</span> ((<span class=\"keyword\">double</span>)B(x)-B(y))/(K(y)-K(x));&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//f[u]=min_&#123;lca(u,v)=v&#125;(-depth[v]*P[u]+f[v])+Q[u]+depth[u]*P[u])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">findbest</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> top)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">1</span>,r=top;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l&lt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intersection(<span class=\"built_in\">stack</span>[mid<span class=\"number\">-1</span>],<span class=\"built_in\">stack</span>[mid])&lt;=P[x]) l=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> r=mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">stack</span>[r];<span class=\"comment\">//蒟蒻这里写成了return r WA到怀疑人生..</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">findpos</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> top)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">1</span>,r=top;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l&lt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intersection(<span class=\"built_in\">stack</span>[mid<span class=\"number\">-1</span>],x)&gt;intersection(<span class=\"built_in\">stack</span>[mid],<span class=\"built_in\">stack</span>[mid<span class=\"number\">-1</span>])) l=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> r=mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64_t <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> top)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dec=findbest(x,top);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> K(dec)*P[x]+B(dec)+C(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> top,<span class=\"keyword\">int</span> ff)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    f[u]=calc(u,top);</span><br><span class=\"line\">    top=findpos(u,top)+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pre=<span class=\"built_in\">stack</span>[top];</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>[top]=u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        depth[v]=depth[u]+edge[i].w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v==ff) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        dfs(v,top,u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>[top]=pre;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>,w;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>,fa+i,&amp;w,P+i,Q+i),add(fa[i],i,w);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[<span class=\"number\">1</span>];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        depth[v]=edge[i].w;</span><br><span class=\"line\">        dfs(v,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,f[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>斜率优化dp</p>","more":"<h1 id=\"题目背景\"><a href=\"#题目背景\" class=\"headerlink\" title=\"题目背景\"></a>题目背景</h1><p>C国拥有一张四通八达的高速公路<del>网</del>树，其中有n个城市，城市之间由一共n-1条高速公路连接。除了首都1号城市，每个城市都有一家本地的客运公司，可以发车前往全国各地，有若干条高速公路连向其他城市，这是一个树型结构，1号城市（首都）为根。假设有一个人要从i号城市坐车出发前往j号城市，那么他要花费Pi*（i城市到j城市的距离）+Qi元。由于距离首都越远，国家的监管就越松，所以距离首都越远，客运公司的Pi（单位距离价格）越大，形式化的说，如果把高速路网看成一棵以首都为根的有根树，i号城市是j号城市的某个祖先，那么一定存在Pi&lt;=Pj。</p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>大宁成为了国家统计局的调查人员，他需要对现在的高速路网进行一次调查，了解从其他每一个城市到达首都1号城市所花费的金钱(路径必须是简单路径)。</p>\n<p>因为有非常多转车（或不转车）的抵达首都的方法，所以人工计算这个结果是十分复杂的。大宁非常的懒，所以请你编写一个程序解决它。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>这道题的dp方程比较显然：<br>$$f[u]=min_{lca(u,v)=v}{f[v]+P[u]<em>(depth[u]-depth[v])+Q[u]}$$<br>直接dp是$O(n^2)$的。有关于uv的乘积项，depth单调，考虑斜率优化。<br>整理得：<br>$$f[u]=min_{lca(u,v)=v}(-depth[v]</em>P[u]+f[v])+Q[u]+depth[u]*P[u])$$<br>则以$-depth[v]$为斜率，$P[u]$为横坐标，$f[v]$为截距，化为一个标准的斜率优化柿子。</p>\n<p>我们发现x坐标是不单调的，这意味着我们需要维护整个凸包（单调栈），然后二分找最优的决策点。这也是老套路了。</p>\n<p>但是重点并不在于此：这是树上的dp，我们不能像维护序列一样直接令决策点入队出队，因为这样的话每个点不一定只被入队一次，最坏情况仍然是$O(n^2)$。那我们怎么办呢？</p>\n<p><del>用主席树实现可持久化栈</del></p>\n<p><del>点分治优化dp</del></p>\n<p>上面的做法不太好写而且常数巨大…我们有更为优雅的方法：</p>\n<p>考虑到斜率单调，那么新来的直线排除掉的旧决策一定是栈顶连续的一段区间。由于决策的单调性，我们可以通过二分找到应该插入新决策的位置(这里找决策点的方法其实和单调队列相同，只是把暴力出队改成二分找合法位置罢了），并让决策入栈。我们发现这样的话其实只是改变了栈顶的位置并修改了一个元素，所以我们在回溯的时候把栈顶和修改的元素改回去，就实现了$O(n\\lg n)$的优秀做法…<br><del>不过因为数据太水被暴力踩爆了</del></p>\n<p>下面是喜闻乐见的代码~（求评价码风qwq）<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// luogu-judger-enable-o2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e6</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,next,w;</span><br><span class=\"line\">&#125;edge[maxn&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> head[maxn],cnt;</span><br><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">stack</span>[maxn],P[maxn],Q[maxn],fa[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int64_t</span> f[maxn],depth[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++cnt].next=head[u];</span><br><span class=\"line\">    edge[cnt].to=v;</span><br><span class=\"line\">    edge[cnt].w=w;</span><br><span class=\"line\">    head[u]=cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">max</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?b:a;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">min</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?a:b;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64_t <span class=\"title\">K</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> -depth[x];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64_t <span class=\"title\">B</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> f[x];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64_t <span class=\"title\">C</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> Q[x]+(<span class=\"keyword\">int64_t</span>)depth[x]*P[x];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">intersection</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;<span class=\"keyword\">return</span> ((<span class=\"keyword\">double</span>)B(x)-B(y))/(K(y)-K(x));&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//f[u]=min_&#123;lca(u,v)=v&#125;(-depth[v]*P[u]+f[v])+Q[u]+depth[u]*P[u])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">findbest</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> top)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">1</span>,r=top;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l&lt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intersection(<span class=\"built_in\">stack</span>[mid<span class=\"number\">-1</span>],<span class=\"built_in\">stack</span>[mid])&lt;=P[x]) l=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> r=mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">stack</span>[r];<span class=\"comment\">//蒟蒻这里写成了return r WA到怀疑人生..</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">findpos</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> top)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">1</span>,r=top;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l&lt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (intersection(<span class=\"built_in\">stack</span>[mid<span class=\"number\">-1</span>],x)&gt;intersection(<span class=\"built_in\">stack</span>[mid],<span class=\"built_in\">stack</span>[mid<span class=\"number\">-1</span>])) l=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> r=mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64_t <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> top)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> dec=findbest(x,top);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> K(dec)*P[x]+B(dec)+C(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> top,<span class=\"keyword\">int</span> ff)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    f[u]=calc(u,top);</span><br><span class=\"line\">    top=findpos(u,top)+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pre=<span class=\"built_in\">stack</span>[top];</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>[top]=u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        depth[v]=depth[u]+edge[i].w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v==ff) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        dfs(v,top,u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>[top]=pre;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>,w;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>,fa+i,&amp;w,P+i,Q+i),add(fa[i],i,w);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[<span class=\"number\">1</span>];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        depth[v]=edge[i].w;</span><br><span class=\"line\">        dfs(v,<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,f[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"[luogu P4027][NOI 2007]货币兑换","date":"2019-04-29T15:13:20.000Z","comments":1,"_content":"\nCDQ+斜率优化\n<!-- more -->\n# 题目描述\n小 $Y$ 最近在一家金券交易所工作。该金券交易所只发行交易两种金券： $A$ 纪念券（以下简称 $A$ 券）和 $B$ 纪念券（以下简称 $B$ 券）。每个持有金券的顾客都有一个自己的帐户。金券的数目可以是一个实数。每天随着市场的起伏波动，两种金券都有自己当时的价值，即每一单位金券当天可以兑换的人民币数目。我们记录第 $K$ 天中 $A$ 券和 $B$ 券的价值分别为 $A_K$ 和 $B_K$（元/单位金券）。为了方便顾客，金券交易所提供了一种非常方便的交易方式：比例交易法。比例交易法分为两个方面：\n - 卖出金券：顾客提供一个 $[0,100]$ 内的实数 $\\text{OP}$ 作为卖出比例，其意义为：将 $\\text{OP}\\%$ 的 $A$ 券和 $\\text{OP}\\%$ 的 $B$ 券以当时的价值兑换为人民币；\n - 买入金券：顾客支付 $\\text{IP}$ 元人民币，交易所将会兑换给用户总价值为 $\\text{IP}$ 的金券，并且，满足提供给顾客的 $A$ 券和 $B$ 券的比例在第 $K$ 天恰好为 $\\text{Rate}_K$ ；例如，假定接下来 $3$ 天内的 $A_k , B_k , \\text{Rate}_K$ 的变化分别为：     \n\n![dd(1).png](https://i.loli.net/2018/02/12/5a8146be1354d.png)\n\n假定在第一天时，用户手中有 $100$ 元人民币但是没有任何金券。用户可以执行以下的操作：\n\n![dd(2).png](https://i.loli.net/2018/02/12/5a8146be23a4c.png)\n\n注意到，同一天内可以进行多次操作。小 $Y$ 是一个很有经济头脑的员工，通过较长时间的运作和行情测算，他已经知道了未来 $N$ 天内的 $A$ 券和 $B$ 券的价值以及 $\\text{Rate}$ 。他还希望能够计算出来，如果开始时拥有 $S$ 元钱，那么 $N$ 天后最多能够获得多少元钱。\n\n\n# 题解\n这是一篇直线型斜率优化的题解  \n这道题真的很难想...  \n考虑下面的提示：  \n在最优方案里，不存在某一时刻，手里既有钱，又有金券。 \n这启发我们枚举上一次买入的天数：\n$$f(i)=max\\{f(i-1),max_{j=0}^{i-1}\\{fa(j)*a(i)+fb(j)*b(i)\\}\\}$$\n$$fa(i)=fb(i)*rate(i)$$\n$$fb(i)=f(i)/(rate(i)*a(i)+b(i))$$\n其中$f(i)$表示第i天能得到的最多钱数，$fa(i),fb(i)$分别表示第i天将手中的钱花光所得到的金券。\n\n直接暴力DP是$O(n^2)$的，不能过。考虑只存在i,j乘积项，试试斜率优化。\n\n首先：有两个关于i，j的乘积项，好像不能表示成一条直线的形式？  \n因为a.b都是常量数组，我们将等式两边都除以b(i)，得到：\n$$f(i)/b(i)=max\\{fa(j)*(a[i]/b[i])+fb(j)\\}$$\n\n这样，把$fa$看做斜率，把$a/b$看做x坐标，就是斜率优化的经典柿子辣。然后，我们就可以啊掉这道题了...吗？\n\n容易发现，本题的斜率和坐标都不单调，正常的斜率优化不珂做..\n\n~~果断弃疗~~\n\n全都单调的时候单调队列，一个不单调的二分，两个都不单调的时候...CDQ分治！\n\n我们考虑通过排序先消除一维的影响，再通过分治消除另一维。\n具体步骤是这样的：  \n1. 分治之前，先将询问按照x坐标（本题中即$a_i/b_i$)排序。\n2. 开始分治，设当前区间为[l..r]：（为方便表示，设mid=(l+r)/2）;\n3. 将询问按照时间顺序分成[l..mid]和[mid+1..r]两部分。\n4. 递归解决[l..mid]的部分。\n5. 用[l..mid]的DP值去更新[mid+1..r]的DP值。（先构造左半边的凸壳，然后计算右半边的答案，由于我们已经在递归左半边的时候将决策按照fa排序了，而右半边还没有递归，保持$x$坐标单调的性质，所以直接按照正常的方法用单调队列插入和删除决策就可以了。（见步骤7））\n6. 递归解决[mid+1..r]的部分\n7. 将[l..mid]和[mid+1..r]两个序列按照$fa(i)$归并排序。（方便返回上一层递归的时候计算右半边的值）\n8. l==r的时候我们应该用i-1的决策更新一下i的决策，因为f是要取历史最大值的。顺便计算一下fa.fb的值。\n\n时间复杂度由于采用了归并排序，为$O(n\\lg n)$。实际速度和平衡树差不多，但是码量把平衡树踩爆啦！\n\n代码：\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\n\nusing std::sort;\n\nconst int maxn=2e5+100;\nconst double eps=1e-5;\n\ndouble a[maxn],b[maxn],rate[maxn];\ndouble ans[maxn];\n\nstruct Node\n{\n    int id;\n    double f,fa,fb;\n}Q[maxn];\n\ntemplate<class T>inline T max(T a,T b){return a<b?b:a;}\ntemplate<class T>inline T min(T a,T b){return a<b?a:b;}\n\ninline void separate(int l,int r)\n{\n    static Node tmp[maxn];\n    int mid=(l+r)>>1;\n    for (int i=l,lp=l,rp=mid+1;i<=r;++i)\n        if (Q[i].id<=mid) tmp[lp++]=Q[i];\n        else tmp[rp++]=Q[i];\n    memcpy(Q+l,tmp+l,sizeof(Node)*(r-l+1));\n}\n\ninline double K(int x){return Q[x].fa;}\ninline double B(int x){return Q[x].fb;}\ninline double X(int x){return a[Q[x].id]/b[Q[x].id];}\ninline double intersection(int x,int y){return (B(x)-B(y))/(K(y)-K(x));}\n\ninline void solve(int l,int r)\n{\n    int mid=(l+r)>>1;\n    static int q[maxn];\n    int head=0,tail=0;\n    for (int i=l;i<=mid;++i)\n    {\n        while (head<tail && intersection(i,q[tail-1])<=intersection(q[tail],q[tail-1])) --tail;\n        if (K(q[tail])!=K(i)) q[++tail]=i;\n    }\n    for (int i=mid+1;i<=r;++i)\n    {\n        while (head<tail && K(q[head])*X(i)+B(q[head])<=K(q[head+1])*X(i)+B(q[head+1])) ++head;\n        Q[i].f=max(Q[i].f,b[Q[i].id]*(K(q[head])*X(i)+B(q[head])));\n    }\n}\n\n/**\n** f(i)=max{fa(j)*a(i)+fb(j)*b(i)}\n** i.e. f(i)/b(i)=max{fa(j)*(a[i]/b[i])+fb(j)}\n** fa(i)=fb(i)*rate(i)\n** fb(i)=f(i)/(rate(i)*a(i)+b(i))\n**/\n\ninline void CDQ(int l,int r)\n{\n    static Node tmp[maxn];\n    if (l==r)\n    {\n        int idx=Q[l].id;\n        Q[l].f=max(Q[l].f,ans[idx-1]);\n        Q[l].fb=Q[l].f/(rate[idx]*a[idx]+b[idx]);\n        Q[l].fa=Q[l].fb*rate[idx];\n        ans[Q[l].id]=Q[l].f;\n        return;\n    }\n    int mid=(l+r)>>1;\n    separate(l,r);\n    CDQ(l,mid);\n    solve(l,r);\n    CDQ(mid+1,r);\n    for (int lp=l,rp=mid+1,tp=l;tp<=r;++tp)\n    {\n        if ((rp>r) || (lp<=mid && Q[lp].fa<=Q[rp].fa))\n            tmp[tp]=Q[lp++];\n        else tmp[tp]=Q[rp++];\n    }\n    memcpy(Q+l,tmp+l,sizeof(Node)*(r-l+1));\n}\n\nint main()\n{\n    int n,s;\n    scanf(\"%d%d\",&n,&s);\n    for (int i=1;i<=n;++i)\n        scanf(\"%lf%lf%lf\",a+i,b+i,rate+i),Q[i].id=i;\n    ans[0]=s;\n    sort(Q+1,Q+n+1,[](const Node& x,const Node& y) -> bool {return a[x.id]/b[x.id]<a[y.id]/b[y.id];});\n    CDQ(1,n);\n    printf(\"%.3lf\\n\",ans[n]);\n}\n```\n","source":"_posts/luogu-P4027-NOI-2007-货币兑换.md","raw":"---\ntitle: '[luogu P4027][NOI 2007]货币兑换'\ndate: 2019-04-29 23:13:20\ntags:\ncategories:\ncomments:\n---\n\nCDQ+斜率优化\n<!-- more -->\n# 题目描述\n小 $Y$ 最近在一家金券交易所工作。该金券交易所只发行交易两种金券： $A$ 纪念券（以下简称 $A$ 券）和 $B$ 纪念券（以下简称 $B$ 券）。每个持有金券的顾客都有一个自己的帐户。金券的数目可以是一个实数。每天随着市场的起伏波动，两种金券都有自己当时的价值，即每一单位金券当天可以兑换的人民币数目。我们记录第 $K$ 天中 $A$ 券和 $B$ 券的价值分别为 $A_K$ 和 $B_K$（元/单位金券）。为了方便顾客，金券交易所提供了一种非常方便的交易方式：比例交易法。比例交易法分为两个方面：\n - 卖出金券：顾客提供一个 $[0,100]$ 内的实数 $\\text{OP}$ 作为卖出比例，其意义为：将 $\\text{OP}\\%$ 的 $A$ 券和 $\\text{OP}\\%$ 的 $B$ 券以当时的价值兑换为人民币；\n - 买入金券：顾客支付 $\\text{IP}$ 元人民币，交易所将会兑换给用户总价值为 $\\text{IP}$ 的金券，并且，满足提供给顾客的 $A$ 券和 $B$ 券的比例在第 $K$ 天恰好为 $\\text{Rate}_K$ ；例如，假定接下来 $3$ 天内的 $A_k , B_k , \\text{Rate}_K$ 的变化分别为：     \n\n![dd(1).png](https://i.loli.net/2018/02/12/5a8146be1354d.png)\n\n假定在第一天时，用户手中有 $100$ 元人民币但是没有任何金券。用户可以执行以下的操作：\n\n![dd(2).png](https://i.loli.net/2018/02/12/5a8146be23a4c.png)\n\n注意到，同一天内可以进行多次操作。小 $Y$ 是一个很有经济头脑的员工，通过较长时间的运作和行情测算，他已经知道了未来 $N$ 天内的 $A$ 券和 $B$ 券的价值以及 $\\text{Rate}$ 。他还希望能够计算出来，如果开始时拥有 $S$ 元钱，那么 $N$ 天后最多能够获得多少元钱。\n\n\n# 题解\n这是一篇直线型斜率优化的题解  \n这道题真的很难想...  \n考虑下面的提示：  \n在最优方案里，不存在某一时刻，手里既有钱，又有金券。 \n这启发我们枚举上一次买入的天数：\n$$f(i)=max\\{f(i-1),max_{j=0}^{i-1}\\{fa(j)*a(i)+fb(j)*b(i)\\}\\}$$\n$$fa(i)=fb(i)*rate(i)$$\n$$fb(i)=f(i)/(rate(i)*a(i)+b(i))$$\n其中$f(i)$表示第i天能得到的最多钱数，$fa(i),fb(i)$分别表示第i天将手中的钱花光所得到的金券。\n\n直接暴力DP是$O(n^2)$的，不能过。考虑只存在i,j乘积项，试试斜率优化。\n\n首先：有两个关于i，j的乘积项，好像不能表示成一条直线的形式？  \n因为a.b都是常量数组，我们将等式两边都除以b(i)，得到：\n$$f(i)/b(i)=max\\{fa(j)*(a[i]/b[i])+fb(j)\\}$$\n\n这样，把$fa$看做斜率，把$a/b$看做x坐标，就是斜率优化的经典柿子辣。然后，我们就可以啊掉这道题了...吗？\n\n容易发现，本题的斜率和坐标都不单调，正常的斜率优化不珂做..\n\n~~果断弃疗~~\n\n全都单调的时候单调队列，一个不单调的二分，两个都不单调的时候...CDQ分治！\n\n我们考虑通过排序先消除一维的影响，再通过分治消除另一维。\n具体步骤是这样的：  \n1. 分治之前，先将询问按照x坐标（本题中即$a_i/b_i$)排序。\n2. 开始分治，设当前区间为[l..r]：（为方便表示，设mid=(l+r)/2）;\n3. 将询问按照时间顺序分成[l..mid]和[mid+1..r]两部分。\n4. 递归解决[l..mid]的部分。\n5. 用[l..mid]的DP值去更新[mid+1..r]的DP值。（先构造左半边的凸壳，然后计算右半边的答案，由于我们已经在递归左半边的时候将决策按照fa排序了，而右半边还没有递归，保持$x$坐标单调的性质，所以直接按照正常的方法用单调队列插入和删除决策就可以了。（见步骤7））\n6. 递归解决[mid+1..r]的部分\n7. 将[l..mid]和[mid+1..r]两个序列按照$fa(i)$归并排序。（方便返回上一层递归的时候计算右半边的值）\n8. l==r的时候我们应该用i-1的决策更新一下i的决策，因为f是要取历史最大值的。顺便计算一下fa.fb的值。\n\n时间复杂度由于采用了归并排序，为$O(n\\lg n)$。实际速度和平衡树差不多，但是码量把平衡树踩爆啦！\n\n代码：\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <cmath>\n\nusing std::sort;\n\nconst int maxn=2e5+100;\nconst double eps=1e-5;\n\ndouble a[maxn],b[maxn],rate[maxn];\ndouble ans[maxn];\n\nstruct Node\n{\n    int id;\n    double f,fa,fb;\n}Q[maxn];\n\ntemplate<class T>inline T max(T a,T b){return a<b?b:a;}\ntemplate<class T>inline T min(T a,T b){return a<b?a:b;}\n\ninline void separate(int l,int r)\n{\n    static Node tmp[maxn];\n    int mid=(l+r)>>1;\n    for (int i=l,lp=l,rp=mid+1;i<=r;++i)\n        if (Q[i].id<=mid) tmp[lp++]=Q[i];\n        else tmp[rp++]=Q[i];\n    memcpy(Q+l,tmp+l,sizeof(Node)*(r-l+1));\n}\n\ninline double K(int x){return Q[x].fa;}\ninline double B(int x){return Q[x].fb;}\ninline double X(int x){return a[Q[x].id]/b[Q[x].id];}\ninline double intersection(int x,int y){return (B(x)-B(y))/(K(y)-K(x));}\n\ninline void solve(int l,int r)\n{\n    int mid=(l+r)>>1;\n    static int q[maxn];\n    int head=0,tail=0;\n    for (int i=l;i<=mid;++i)\n    {\n        while (head<tail && intersection(i,q[tail-1])<=intersection(q[tail],q[tail-1])) --tail;\n        if (K(q[tail])!=K(i)) q[++tail]=i;\n    }\n    for (int i=mid+1;i<=r;++i)\n    {\n        while (head<tail && K(q[head])*X(i)+B(q[head])<=K(q[head+1])*X(i)+B(q[head+1])) ++head;\n        Q[i].f=max(Q[i].f,b[Q[i].id]*(K(q[head])*X(i)+B(q[head])));\n    }\n}\n\n/**\n** f(i)=max{fa(j)*a(i)+fb(j)*b(i)}\n** i.e. f(i)/b(i)=max{fa(j)*(a[i]/b[i])+fb(j)}\n** fa(i)=fb(i)*rate(i)\n** fb(i)=f(i)/(rate(i)*a(i)+b(i))\n**/\n\ninline void CDQ(int l,int r)\n{\n    static Node tmp[maxn];\n    if (l==r)\n    {\n        int idx=Q[l].id;\n        Q[l].f=max(Q[l].f,ans[idx-1]);\n        Q[l].fb=Q[l].f/(rate[idx]*a[idx]+b[idx]);\n        Q[l].fa=Q[l].fb*rate[idx];\n        ans[Q[l].id]=Q[l].f;\n        return;\n    }\n    int mid=(l+r)>>1;\n    separate(l,r);\n    CDQ(l,mid);\n    solve(l,r);\n    CDQ(mid+1,r);\n    for (int lp=l,rp=mid+1,tp=l;tp<=r;++tp)\n    {\n        if ((rp>r) || (lp<=mid && Q[lp].fa<=Q[rp].fa))\n            tmp[tp]=Q[lp++];\n        else tmp[tp]=Q[rp++];\n    }\n    memcpy(Q+l,tmp+l,sizeof(Node)*(r-l+1));\n}\n\nint main()\n{\n    int n,s;\n    scanf(\"%d%d\",&n,&s);\n    for (int i=1;i<=n;++i)\n        scanf(\"%lf%lf%lf\",a+i,b+i,rate+i),Q[i].id=i;\n    ans[0]=s;\n    sort(Q+1,Q+n+1,[](const Node& x,const Node& y) -> bool {return a[x.id]/b[x.id]<a[y.id]/b[y.id];});\n    CDQ(1,n);\n    printf(\"%.3lf\\n\",ans[n]);\n}\n```\n","slug":"luogu-P4027-NOI-2007-货币兑换","published":1,"updated":"2019-05-01T03:20:52.359Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm1t000nv4ty2oce0lvd","content":"<p>CDQ+斜率优化<br><a id=\"more\"></a></p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>小 $Y$ 最近在一家金券交易所工作。该金券交易所只发行交易两种金券： $A$ 纪念券（以下简称 $A$ 券）和 $B$ 纪念券（以下简称 $B$ 券）。每个持有金券的顾客都有一个自己的帐户。金券的数目可以是一个实数。每天随着市场的起伏波动，两种金券都有自己当时的价值，即每一单位金券当天可以兑换的人民币数目。我们记录第 $K$ 天中 $A$ 券和 $B$ 券的价值分别为 $A_K$ 和 $B_K$（元/单位金券）。为了方便顾客，金券交易所提供了一种非常方便的交易方式：比例交易法。比例交易法分为两个方面：</p>\n<ul>\n<li>卖出金券：顾客提供一个 $[0,100]$ 内的实数 $\\text{OP}$ 作为卖出比例，其意义为：将 $\\text{OP}\\%$ 的 $A$ 券和 $\\text{OP}\\%$ 的 $B$ 券以当时的价值兑换为人民币；</li>\n<li>买入金券：顾客支付 $\\text{IP}$ 元人民币，交易所将会兑换给用户总价值为 $\\text{IP}$ 的金券，并且，满足提供给顾客的 $A$ 券和 $B$ 券的比例在第 $K$ 天恰好为 $\\text{Rate}_K$ ；例如，假定接下来 $3$ 天内的 $A_k , B_k , \\text{Rate}_K$ 的变化分别为：     </li>\n</ul>\n<p><img src=\"https://i.loli.net/2018/02/12/5a8146be1354d.png\" alt=\"dd(1).png\"></p>\n<p>假定在第一天时，用户手中有 $100$ 元人民币但是没有任何金券。用户可以执行以下的操作：</p>\n<p><img src=\"https://i.loli.net/2018/02/12/5a8146be23a4c.png\" alt=\"dd(2).png\"></p>\n<p>注意到，同一天内可以进行多次操作。小 $Y$ 是一个很有经济头脑的员工，通过较长时间的运作和行情测算，他已经知道了未来 $N$ 天内的 $A$ 券和 $B$ 券的价值以及 $\\text{Rate}$ 。他还希望能够计算出来，如果开始时拥有 $S$ 元钱，那么 $N$ 天后最多能够获得多少元钱。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>这是一篇直线型斜率优化的题解<br>这道题真的很难想…<br>考虑下面的提示：<br>在最优方案里，不存在某一时刻，手里既有钱，又有金券。<br>这启发我们枚举上一次买入的天数：<br>$$f(i)=max{f(i-1),max_{j=0}^{i-1}{fa(j)<em>a(i)+fb(j)</em>b(i)}}$$<br>$$fa(i)=fb(i)<em>rate(i)$$<br>$$fb(i)=f(i)/(rate(i)</em>a(i)+b(i))$$<br>其中$f(i)$表示第i天能得到的最多钱数，$fa(i),fb(i)$分别表示第i天将手中的钱花光所得到的金券。</p>\n<p>直接暴力DP是$O(n^2)$的，不能过。考虑只存在i,j乘积项，试试斜率优化。</p>\n<p>首先：有两个关于i，j的乘积项，好像不能表示成一条直线的形式？<br>因为a.b都是常量数组，我们将等式两边都除以b(i)，得到：<br>$$f(i)/b(i)=max{fa(j)*(a[i]/b[i])+fb(j)}$$</p>\n<p>这样，把$fa$看做斜率，把$a/b$看做x坐标，就是斜率优化的经典柿子辣。然后，我们就可以啊掉这道题了…吗？</p>\n<p>容易发现，本题的斜率和坐标都不单调，正常的斜率优化不珂做..</p>\n<p><del>果断弃疗</del></p>\n<p>全都单调的时候单调队列，一个不单调的二分，两个都不单调的时候…CDQ分治！</p>\n<p>我们考虑通过排序先消除一维的影响，再通过分治消除另一维。<br>具体步骤是这样的：  </p>\n<ol>\n<li>分治之前，先将询问按照x坐标（本题中即$a_i/b_i$)排序。</li>\n<li>开始分治，设当前区间为[l..r]：（为方便表示，设mid=(l+r)/2）;</li>\n<li>将询问按照时间顺序分成[l..mid]和[mid+1..r]两部分。</li>\n<li>递归解决[l..mid]的部分。</li>\n<li>用[l..mid]的DP值去更新[mid+1..r]的DP值。（先构造左半边的凸壳，然后计算右半边的答案，由于我们已经在递归左半边的时候将决策按照fa排序了，而右半边还没有递归，保持$x$坐标单调的性质，所以直接按照正常的方法用单调队列插入和删除决策就可以了。（见步骤7））</li>\n<li>递归解决[mid+1..r]的部分</li>\n<li>将[l..mid]和[mid+1..r]两个序列按照$fa(i)$归并排序。（方便返回上一层递归的时候计算右半边的值）</li>\n<li>l==r的时候我们应该用i-1的决策更新一下i的决策，因为f是要取历史最大值的。顺便计算一下fa.fb的值。</li>\n</ol>\n<p>时间复杂度由于采用了归并排序，为$O(n\\lg n)$。实际速度和平衡树差不多，但是码量把平衡树踩爆啦！</p>\n<p>代码：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">2e5</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps=<span class=\"number\">1e-5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> a[maxn],b[maxn],rate[maxn];</span><br><span class=\"line\"><span class=\"keyword\">double</span> ans[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> f,fa,fb;</span><br><span class=\"line\">&#125;Q[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">max</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?b:a;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">min</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?a:b;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">separate</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Node tmp[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=l,lp=l,rp=mid+<span class=\"number\">1</span>;i&lt;=r;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Q[i].id&lt;=mid) tmp[lp++]=Q[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tmp[rp++]=Q[i];</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(Q+l,tmp+l,<span class=\"keyword\">sizeof</span>(Node)*(r-l+<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">K</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> Q[x].fa;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">B</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> Q[x].fb;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">X</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> a[Q[x].id]/b[Q[x].id];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">intersection</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;<span class=\"keyword\">return</span> (B(x)-B(y))/(K(y)-K(x));&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> q[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> head=<span class=\"number\">0</span>,tail=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=l;i&lt;=mid;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head&lt;tail &amp;&amp; intersection(i,q[tail<span class=\"number\">-1</span>])&lt;=intersection(q[tail],q[tail<span class=\"number\">-1</span>])) --tail;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (K(q[tail])!=K(i)) q[++tail]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=mid+<span class=\"number\">1</span>;i&lt;=r;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head&lt;tail &amp;&amp; K(q[head])*X(i)+B(q[head])&lt;=K(q[head+<span class=\"number\">1</span>])*X(i)+B(q[head+<span class=\"number\">1</span>])) ++head;</span><br><span class=\"line\">        Q[i].f=max(Q[i].f,b[Q[i].id]*(K(q[head])*X(i)+B(q[head])));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">** f(i)=max&#123;fa(j)*a(i)+fb(j)*b(i)&#125;</span></span><br><span class=\"line\"><span class=\"comment\">** i.e. f(i)/b(i)=max&#123;fa(j)*(a[i]/b[i])+fb(j)&#125;</span></span><br><span class=\"line\"><span class=\"comment\">** fa(i)=fb(i)*rate(i)</span></span><br><span class=\"line\"><span class=\"comment\">** fb(i)=f(i)/(rate(i)*a(i)+b(i))</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">CDQ</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Node tmp[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> idx=Q[l].id;</span><br><span class=\"line\">        Q[l].f=max(Q[l].f,ans[idx<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        Q[l].fb=Q[l].f/(rate[idx]*a[idx]+b[idx]);</span><br><span class=\"line\">        Q[l].fa=Q[l].fb*rate[idx];</span><br><span class=\"line\">        ans[Q[l].id]=Q[l].f;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    separate(l,r);</span><br><span class=\"line\">    CDQ(l,mid);</span><br><span class=\"line\">    solve(l,r);</span><br><span class=\"line\">    CDQ(mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> lp=l,rp=mid+<span class=\"number\">1</span>,tp=l;tp&lt;=r;++tp)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((rp&gt;r) || (lp&lt;=mid &amp;&amp; Q[lp].fa&lt;=Q[rp].fa))</span><br><span class=\"line\">            tmp[tp]=Q[lp++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tmp[tp]=Q[rp++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(Q+l,tmp+l,<span class=\"keyword\">sizeof</span>(Node)*(r-l+<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,s;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf%lf%lf\"</span>,a+i,b+i,rate+i),Q[i].id=i;</span><br><span class=\"line\">    ans[<span class=\"number\">0</span>]=s;</span><br><span class=\"line\">    sort(Q+<span class=\"number\">1</span>,Q+n+<span class=\"number\">1</span>,[](<span class=\"keyword\">const</span> Node&amp; x,<span class=\"keyword\">const</span> Node&amp; y) -&gt; <span class=\"keyword\">bool</span> &#123;<span class=\"keyword\">return</span> a[x.id]/b[x.id]&lt;a[y.id]/b[y.id];&#125;);</span><br><span class=\"line\">    CDQ(<span class=\"number\">1</span>,n);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.3lf\\n\"</span>,ans[n]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>CDQ+斜率优化<br>","more":"</p>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>小 $Y$ 最近在一家金券交易所工作。该金券交易所只发行交易两种金券： $A$ 纪念券（以下简称 $A$ 券）和 $B$ 纪念券（以下简称 $B$ 券）。每个持有金券的顾客都有一个自己的帐户。金券的数目可以是一个实数。每天随着市场的起伏波动，两种金券都有自己当时的价值，即每一单位金券当天可以兑换的人民币数目。我们记录第 $K$ 天中 $A$ 券和 $B$ 券的价值分别为 $A_K$ 和 $B_K$（元/单位金券）。为了方便顾客，金券交易所提供了一种非常方便的交易方式：比例交易法。比例交易法分为两个方面：</p>\n<ul>\n<li>卖出金券：顾客提供一个 $[0,100]$ 内的实数 $\\text{OP}$ 作为卖出比例，其意义为：将 $\\text{OP}\\%$ 的 $A$ 券和 $\\text{OP}\\%$ 的 $B$ 券以当时的价值兑换为人民币；</li>\n<li>买入金券：顾客支付 $\\text{IP}$ 元人民币，交易所将会兑换给用户总价值为 $\\text{IP}$ 的金券，并且，满足提供给顾客的 $A$ 券和 $B$ 券的比例在第 $K$ 天恰好为 $\\text{Rate}_K$ ；例如，假定接下来 $3$ 天内的 $A_k , B_k , \\text{Rate}_K$ 的变化分别为：     </li>\n</ul>\n<p><img src=\"https://i.loli.net/2018/02/12/5a8146be1354d.png\" alt=\"dd(1).png\"></p>\n<p>假定在第一天时，用户手中有 $100$ 元人民币但是没有任何金券。用户可以执行以下的操作：</p>\n<p><img src=\"https://i.loli.net/2018/02/12/5a8146be23a4c.png\" alt=\"dd(2).png\"></p>\n<p>注意到，同一天内可以进行多次操作。小 $Y$ 是一个很有经济头脑的员工，通过较长时间的运作和行情测算，他已经知道了未来 $N$ 天内的 $A$ 券和 $B$ 券的价值以及 $\\text{Rate}$ 。他还希望能够计算出来，如果开始时拥有 $S$ 元钱，那么 $N$ 天后最多能够获得多少元钱。</p>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><p>这是一篇直线型斜率优化的题解<br>这道题真的很难想…<br>考虑下面的提示：<br>在最优方案里，不存在某一时刻，手里既有钱，又有金券。<br>这启发我们枚举上一次买入的天数：<br>$$f(i)=max{f(i-1),max_{j=0}^{i-1}{fa(j)<em>a(i)+fb(j)</em>b(i)}}$$<br>$$fa(i)=fb(i)<em>rate(i)$$<br>$$fb(i)=f(i)/(rate(i)</em>a(i)+b(i))$$<br>其中$f(i)$表示第i天能得到的最多钱数，$fa(i),fb(i)$分别表示第i天将手中的钱花光所得到的金券。</p>\n<p>直接暴力DP是$O(n^2)$的，不能过。考虑只存在i,j乘积项，试试斜率优化。</p>\n<p>首先：有两个关于i，j的乘积项，好像不能表示成一条直线的形式？<br>因为a.b都是常量数组，我们将等式两边都除以b(i)，得到：<br>$$f(i)/b(i)=max{fa(j)*(a[i]/b[i])+fb(j)}$$</p>\n<p>这样，把$fa$看做斜率，把$a/b$看做x坐标，就是斜率优化的经典柿子辣。然后，我们就可以啊掉这道题了…吗？</p>\n<p>容易发现，本题的斜率和坐标都不单调，正常的斜率优化不珂做..</p>\n<p><del>果断弃疗</del></p>\n<p>全都单调的时候单调队列，一个不单调的二分，两个都不单调的时候…CDQ分治！</p>\n<p>我们考虑通过排序先消除一维的影响，再通过分治消除另一维。<br>具体步骤是这样的：  </p>\n<ol>\n<li>分治之前，先将询问按照x坐标（本题中即$a_i/b_i$)排序。</li>\n<li>开始分治，设当前区间为[l..r]：（为方便表示，设mid=(l+r)/2）;</li>\n<li>将询问按照时间顺序分成[l..mid]和[mid+1..r]两部分。</li>\n<li>递归解决[l..mid]的部分。</li>\n<li>用[l..mid]的DP值去更新[mid+1..r]的DP值。（先构造左半边的凸壳，然后计算右半边的答案，由于我们已经在递归左半边的时候将决策按照fa排序了，而右半边还没有递归，保持$x$坐标单调的性质，所以直接按照正常的方法用单调队列插入和删除决策就可以了。（见步骤7））</li>\n<li>递归解决[mid+1..r]的部分</li>\n<li>将[l..mid]和[mid+1..r]两个序列按照$fa(i)$归并排序。（方便返回上一层递归的时候计算右半边的值）</li>\n<li>l==r的时候我们应该用i-1的决策更新一下i的决策，因为f是要取历史最大值的。顺便计算一下fa.fb的值。</li>\n</ol>\n<p>时间复杂度由于采用了归并排序，为$O(n\\lg n)$。实际速度和平衡树差不多，但是码量把平衡树踩爆啦！</p>\n<p>代码：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">2e5</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps=<span class=\"number\">1e-5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> a[maxn],b[maxn],rate[maxn];</span><br><span class=\"line\"><span class=\"keyword\">double</span> ans[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> f,fa,fb;</span><br><span class=\"line\">&#125;Q[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">max</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?b:a;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">min</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?a:b;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">separate</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Node tmp[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=l,lp=l,rp=mid+<span class=\"number\">1</span>;i&lt;=r;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Q[i].id&lt;=mid) tmp[lp++]=Q[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tmp[rp++]=Q[i];</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(Q+l,tmp+l,<span class=\"keyword\">sizeof</span>(Node)*(r-l+<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">K</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> Q[x].fa;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">B</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> Q[x].fb;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">X</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> a[Q[x].id]/b[Q[x].id];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">intersection</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;<span class=\"keyword\">return</span> (B(x)-B(y))/(K(y)-K(x));&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> q[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> head=<span class=\"number\">0</span>,tail=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=l;i&lt;=mid;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head&lt;tail &amp;&amp; intersection(i,q[tail<span class=\"number\">-1</span>])&lt;=intersection(q[tail],q[tail<span class=\"number\">-1</span>])) --tail;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (K(q[tail])!=K(i)) q[++tail]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=mid+<span class=\"number\">1</span>;i&lt;=r;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (head&lt;tail &amp;&amp; K(q[head])*X(i)+B(q[head])&lt;=K(q[head+<span class=\"number\">1</span>])*X(i)+B(q[head+<span class=\"number\">1</span>])) ++head;</span><br><span class=\"line\">        Q[i].f=max(Q[i].f,b[Q[i].id]*(K(q[head])*X(i)+B(q[head])));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">** f(i)=max&#123;fa(j)*a(i)+fb(j)*b(i)&#125;</span></span><br><span class=\"line\"><span class=\"comment\">** i.e. f(i)/b(i)=max&#123;fa(j)*(a[i]/b[i])+fb(j)&#125;</span></span><br><span class=\"line\"><span class=\"comment\">** fa(i)=fb(i)*rate(i)</span></span><br><span class=\"line\"><span class=\"comment\">** fb(i)=f(i)/(rate(i)*a(i)+b(i))</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">CDQ</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Node tmp[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> idx=Q[l].id;</span><br><span class=\"line\">        Q[l].f=max(Q[l].f,ans[idx<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        Q[l].fb=Q[l].f/(rate[idx]*a[idx]+b[idx]);</span><br><span class=\"line\">        Q[l].fa=Q[l].fb*rate[idx];</span><br><span class=\"line\">        ans[Q[l].id]=Q[l].f;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    separate(l,r);</span><br><span class=\"line\">    CDQ(l,mid);</span><br><span class=\"line\">    solve(l,r);</span><br><span class=\"line\">    CDQ(mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> lp=l,rp=mid+<span class=\"number\">1</span>,tp=l;tp&lt;=r;++tp)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((rp&gt;r) || (lp&lt;=mid &amp;&amp; Q[lp].fa&lt;=Q[rp].fa))</span><br><span class=\"line\">            tmp[tp]=Q[lp++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> tmp[tp]=Q[rp++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(Q+l,tmp+l,<span class=\"keyword\">sizeof</span>(Node)*(r-l+<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,s;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf%lf%lf\"</span>,a+i,b+i,rate+i),Q[i].id=i;</span><br><span class=\"line\">    ans[<span class=\"number\">0</span>]=s;</span><br><span class=\"line\">    sort(Q+<span class=\"number\">1</span>,Q+n+<span class=\"number\">1</span>,[](<span class=\"keyword\">const</span> Node&amp; x,<span class=\"keyword\">const</span> Node&amp; y) -&gt; <span class=\"keyword\">bool</span> &#123;<span class=\"keyword\">return</span> a[x.id]/b[x.id]&lt;a[y.id]/b[y.id];&#125;);</span><br><span class=\"line\">    CDQ(<span class=\"number\">1</span>,n);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.3lf\\n\"</span>,ans[n]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"Todolist","date":"2333-03-03T05:33:33.000Z","comments":1,"_content":"\n以下是我**应该**学而**没有**学的东西：\n时日无多，2019-2020赛季马上就要开始了...\n<!-- more -->\n# 动态规划：\n> cdq分治套斜率优化 （货币兑换）  \n> 状压DP （插头DP 最小表示法）  \n> 概率期望DP  \n> WQS二分   \n> 决策单调性  \n> 计数DP\n> ~~动态DP （上古论文）~~   \n> ~~虚树DP~~  \n> ~~四边形不等式~~\n\n# 数据结构\n> FHQ Treap  \n> 可持久化平衡树  \n> 动态点分治  \n> 边分 链分   \n> 整体二分  \n> 二次离线莫队  \n> 吉司机线段树  \n> 二进制分组  \n> 长链剖分  \n> **猫树？**    \n> **Euler Tour Tree**  \n> **Top Tree**\n> ~~树套树 主席树~~  \n> ~~线段树合并与分裂~~  \n> ~~李超线段树~~  \n\n# 图论\n> 弦图与区间图  \n> 网络流建模  \n> 灭绝树  \n> 平面图&&对偶图  \n> **带花树**  \n> ~~双连通性和**圆方树**~~  \n\n\n# 数学：\n> Lucas定理  \n> 概率期望  \n> 群论、Polya定理和Burnside引理  \n> 生成函数\n> 图的计数类问题  \n> 莫比乌斯.拉格朗日.欧拉...反演  \n> 杜教筛   \n> min_25筛  \n> Cipolla算法二次剩余  \n> excrt  \n> 二线北上广深  \n> 容斥原理  斯特林数  \n> FWT FMT  \n> 博弈论 组合游戏  \n> ~~Pollard_rho Miller-rabin~~  \n\n# 字符串\n> 序列自动机  \n> 回文自动机  \n> 后缀平衡树  \n> 扩展KMP  \n> ~~可持久化trie~~  \n> ~~SAM 广义sam~~  \n> ~~Manacher~~  \n> ~~复习SA~~  \n\n# 计算几何\n> 旋转卡壳  \n> ~~二维凸包~~  \n> 三维、动态凸包\n\n# 其他\n> 模拟退火  \n> ~~扫描线~~\n> ","source":"_posts/todolist.md","raw":"---\ntitle: Todolist\ndate: 2333-3-3 13:33:33\ntags: \n    - Todolist\ncategories:\n    - 任务计划\ncomments: true\n---\n\n以下是我**应该**学而**没有**学的东西：\n时日无多，2019-2020赛季马上就要开始了...\n<!-- more -->\n# 动态规划：\n> cdq分治套斜率优化 （货币兑换）  \n> 状压DP （插头DP 最小表示法）  \n> 概率期望DP  \n> WQS二分   \n> 决策单调性  \n> 计数DP\n> ~~动态DP （上古论文）~~   \n> ~~虚树DP~~  \n> ~~四边形不等式~~\n\n# 数据结构\n> FHQ Treap  \n> 可持久化平衡树  \n> 动态点分治  \n> 边分 链分   \n> 整体二分  \n> 二次离线莫队  \n> 吉司机线段树  \n> 二进制分组  \n> 长链剖分  \n> **猫树？**    \n> **Euler Tour Tree**  \n> **Top Tree**\n> ~~树套树 主席树~~  \n> ~~线段树合并与分裂~~  \n> ~~李超线段树~~  \n\n# 图论\n> 弦图与区间图  \n> 网络流建模  \n> 灭绝树  \n> 平面图&&对偶图  \n> **带花树**  \n> ~~双连通性和**圆方树**~~  \n\n\n# 数学：\n> Lucas定理  \n> 概率期望  \n> 群论、Polya定理和Burnside引理  \n> 生成函数\n> 图的计数类问题  \n> 莫比乌斯.拉格朗日.欧拉...反演  \n> 杜教筛   \n> min_25筛  \n> Cipolla算法二次剩余  \n> excrt  \n> 二线北上广深  \n> 容斥原理  斯特林数  \n> FWT FMT  \n> 博弈论 组合游戏  \n> ~~Pollard_rho Miller-rabin~~  \n\n# 字符串\n> 序列自动机  \n> 回文自动机  \n> 后缀平衡树  \n> 扩展KMP  \n> ~~可持久化trie~~  \n> ~~SAM 广义sam~~  \n> ~~Manacher~~  \n> ~~复习SA~~  \n\n# 计算几何\n> 旋转卡壳  \n> ~~二维凸包~~  \n> 三维、动态凸包\n\n# 其他\n> 模拟退火  \n> ~~扫描线~~\n> ","slug":"todolist","published":1,"updated":"2019-04-26T05:32:40.411Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm1u000qv4tyc5yjpbvl","content":"<p>以下是我<strong>应该</strong>学而<strong>没有</strong>学的东西：<br>时日无多，2019-2020赛季马上就要开始了…<br><a id=\"more\"></a></p>\n<h1 id=\"动态规划：\"><a href=\"#动态规划：\" class=\"headerlink\" title=\"动态规划：\"></a>动态规划：</h1><blockquote>\n<p>cdq分治套斜率优化 （货币兑换）<br>状压DP （插头DP 最小表示法）<br>概率期望DP<br>WQS二分<br>决策单调性<br>计数DP<br><del>动态DP （上古论文）</del><br><del>虚树DP</del><br><del>四边形不等式</del></p>\n</blockquote>\n<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><blockquote>\n<p>FHQ Treap<br>可持久化平衡树<br>动态点分治<br>边分 链分<br>整体二分<br>二次离线莫队<br>吉司机线段树<br>二进制分组<br>长链剖分<br><strong>猫树？</strong><br><strong>Euler Tour Tree</strong><br><strong>Top Tree</strong><br><del>树套树 主席树</del><br><del>线段树合并与分裂</del><br><del>李超线段树</del>  </p>\n</blockquote>\n<h1 id=\"图论\"><a href=\"#图论\" class=\"headerlink\" title=\"图论\"></a>图论</h1><blockquote>\n<p>弦图与区间图<br>网络流建模<br>灭绝树<br>平面图&amp;&amp;对偶图<br><strong>带花树</strong><br><del>双连通性和<strong>圆方树</strong></del>  </p>\n</blockquote>\n<h1 id=\"数学：\"><a href=\"#数学：\" class=\"headerlink\" title=\"数学：\"></a>数学：</h1><blockquote>\n<p>Lucas定理<br>概率期望<br>群论、Polya定理和Burnside引理<br>生成函数<br>图的计数类问题<br>莫比乌斯.拉格朗日.欧拉…反演<br>杜教筛<br>min_25筛<br>Cipolla算法二次剩余<br>excrt<br>二线北上广深<br>容斥原理  斯特林数<br>FWT FMT<br>博弈论 组合游戏<br><del>Pollard_rho Miller-rabin</del>  </p>\n</blockquote>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><blockquote>\n<p>序列自动机<br>回文自动机<br>后缀平衡树<br>扩展KMP<br><del>可持久化trie</del><br><del>SAM 广义sam</del><br><del>Manacher</del><br><del>复习SA</del>  </p>\n</blockquote>\n<h1 id=\"计算几何\"><a href=\"#计算几何\" class=\"headerlink\" title=\"计算几何\"></a>计算几何</h1><blockquote>\n<p>旋转卡壳<br><del>二维凸包</del><br>三维、动态凸包</p>\n</blockquote>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><blockquote>\n<p>模拟退火<br><del>扫描线</del></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>以下是我<strong>应该</strong>学而<strong>没有</strong>学的东西：<br>时日无多，2019-2020赛季马上就要开始了…<br>","more":"</p>\n<h1 id=\"动态规划：\"><a href=\"#动态规划：\" class=\"headerlink\" title=\"动态规划：\"></a>动态规划：</h1><blockquote>\n<p>cdq分治套斜率优化 （货币兑换）<br>状压DP （插头DP 最小表示法）<br>概率期望DP<br>WQS二分<br>决策单调性<br>计数DP<br><del>动态DP （上古论文）</del><br><del>虚树DP</del><br><del>四边形不等式</del></p>\n</blockquote>\n<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><blockquote>\n<p>FHQ Treap<br>可持久化平衡树<br>动态点分治<br>边分 链分<br>整体二分<br>二次离线莫队<br>吉司机线段树<br>二进制分组<br>长链剖分<br><strong>猫树？</strong><br><strong>Euler Tour Tree</strong><br><strong>Top Tree</strong><br><del>树套树 主席树</del><br><del>线段树合并与分裂</del><br><del>李超线段树</del>  </p>\n</blockquote>\n<h1 id=\"图论\"><a href=\"#图论\" class=\"headerlink\" title=\"图论\"></a>图论</h1><blockquote>\n<p>弦图与区间图<br>网络流建模<br>灭绝树<br>平面图&amp;&amp;对偶图<br><strong>带花树</strong><br><del>双连通性和<strong>圆方树</strong></del>  </p>\n</blockquote>\n<h1 id=\"数学：\"><a href=\"#数学：\" class=\"headerlink\" title=\"数学：\"></a>数学：</h1><blockquote>\n<p>Lucas定理<br>概率期望<br>群论、Polya定理和Burnside引理<br>生成函数<br>图的计数类问题<br>莫比乌斯.拉格朗日.欧拉…反演<br>杜教筛<br>min_25筛<br>Cipolla算法二次剩余<br>excrt<br>二线北上广深<br>容斥原理  斯特林数<br>FWT FMT<br>博弈论 组合游戏<br><del>Pollard_rho Miller-rabin</del>  </p>\n</blockquote>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><blockquote>\n<p>序列自动机<br>回文自动机<br>后缀平衡树<br>扩展KMP<br><del>可持久化trie</del><br><del>SAM 广义sam</del><br><del>Manacher</del><br><del>复习SA</del>  </p>\n</blockquote>\n<h1 id=\"计算几何\"><a href=\"#计算几何\" class=\"headerlink\" title=\"计算几何\"></a>计算几何</h1><blockquote>\n<p>旋转卡壳<br><del>二维凸包</del><br>三维、动态凸包</p>\n</blockquote>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><blockquote>\n<p>模拟退火<br><del>扫描线</del></p>\n</blockquote>"},{"title":"一些有趣的结论","date":"2033-03-05T13:09:05.000Z","comments":1,"_content":"1. 齐肯多夫定理：任意正整数可以被表示成若干个不连续的斐波那契数之和。\n2. 平面图的边数最多是3n-6.","source":"_posts/一些有趣的结论.md","raw":"---\ntitle: 一些有趣的结论\ndate: 2033-02-33 21:09:05\ntags:\n- 颓废\n- 套路\ncategories:\n- 随笔\ncomments:\n---\n1. 齐肯多夫定理：任意正整数可以被表示成若干个不连续的斐波那契数之和。\n2. 平面图的边数最多是3n-6.","slug":"一些有趣的结论","published":1,"updated":"2019-03-31T16:24:00.369Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm1w000sv4tyrszvo04b","content":"<ol>\n<li>齐肯多夫定理：任意正整数可以被表示成若干个不连续的斐波那契数之和。</li>\n<li>平面图的边数最多是3n-6.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>齐肯多夫定理：任意正整数可以被表示成若干个不连续的斐波那契数之和。</li>\n<li>平面图的边数最多是3n-6.</li>\n</ol>\n"},{"title":"主席树-可持久化线段树","date":"2018-07-21T06:04:03.000Z","comments":1,"_content":"","source":"_posts/主席树-可持久化线段树.md","raw":"---\ntitle: 主席树-可持久化线段树\ndate: 2018-07-21 14:04:03\ntags: \n     - 主席树\n     - 可持久化\ncategories: \n     - 学习笔记\ncomments: true\n---\n","slug":"主席树-可持久化线段树","published":1,"updated":"2018-07-21T08:43:13.165Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm1y000xv4tyhltrl8sq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"[六省联考2017]相逢是问候","date":"2019-03-18T05:17:04.000Z","comments":1,"_content":"\n~~不要在意网址...打错了qwq~~\n\n# 题目大意\n> Informatik verbindet dich und mich.  \n> 信息将你我连结。 \n\n维护一个数列A，支持两种操作：\n* 0 l r ：表示将A[l..r]这个区间的每个数$A_i$变成$c^{A_i}$（c是输入给定的常量）\n* 1 l r : 表示求$A[l..r]$的和，结果对p（输入给定的常量）取模。\n\n<!-- more -->\n# 数据范围与约定\n* 对于 100% 的测试点， $1 \\leq n \\leq 50000; 1 \\leq m \\leq 50000; 1 \\leq p \\leq 100000000; 0 < c <p; 0 \\leq ai < p$。\n\n# 解法\n观察数据范围，$n,m\\leq 50000$。这个~~不伦不类的~~范围应该是$O(n \\log n \\log C)$之类的吧？  \n还有区间求和...?线段树？  \n不知道大家有没有做过线段树区间取模和区间开方之类维护奇怪运算的题？它们有一个共同点：暴力递归到叶子节点修改，因为运算的特殊性质决定了修改次数不超过$O(n\\log C)$，所以复杂度正确。\n考虑这个奇怪的运算。现在我们要解决的问题就是如何快速（$O(\\log\\ n)$以内）求这个：\n$$\\LARGE{c^{c^{c^{c^{...a_i}}}}}$$\n不知道您有没有做过[这个题](https://www.luogu.org/problemnew/show/P4139)，如果没有珂以去做一下qwq.  \n做完了吧？那现在您一定会了欧拉定理：\n$$\na^b \\bmod p=\\left \\{\n\\begin{aligned}\n&a^{b \\bmod \\phi (p) +\\phi (p)} &b\\geq \\phi (p)\\\\\\\\\n&a^b &b<\\phi (p)\n\\end{aligned}\n\\right.\n$$\n> 引理：对于一个数$n\\in \\mathbb N^*$，一直取$\\phi (n)$,最多取$O(\\log n)$次就会变成1.  \n> 简要证明：对于偶数，所有偶数都与它不互质。取$\\phi (n)$至少会除以2.对于奇数，考虑定义式，它一定会变成偶数。所以最多$2\\log n$次会变成1.\n\n所以当修改次数太大的时候，从某一层开始，模数都是1.这就没必要算了。所以用区间开方的思路，线段树记录区间和、区间修改次数。修改次数超过最大值时忽略修改。否则继续递归。每递归到叶子节点时，暴力修改叶子的值。顺便维护区间和。这时，总复杂度是$O(n \\log^2 n\\log C)$的。不太能承受。但是我们发现计算过程中模数只有$O(\\log n)$种取值，所以光速幂预处理一下，就可以少掉一个log啦。然后就珂以愉快地通过本题啦。好像还要wys~~或者mcfx~~一下代码\n# 代码：\n```cpp\n#pragma GCC optimize(\"-Ofast\")\n#pragma GCC optimize(3)\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <utility>\n#define ls l,mid,o<<1\n#define rs mid+1,r,o<<1|1\n\nusing std::pair;\nusing std::make_pair;\n\ntypedef long long ll;\n\nconst int maxn=(5e4+100)*2;\n\nint a[maxn<<2],count[maxn<<2],P,c,maxlim;\nll sumv[maxn<<2];\nint phi[maxn],Sqrt[maxn];\n\nchar buf[1<<24],*fs;\nll c_sqrt[150][maxn],c_x[150][maxn];\nbool is_greater[100][maxn],is_greater_sqrt[100][maxn];\n\n// #define gc() getchar()\n#define gc() (*fs++)\n\ntemplate<class T>inline T max(T a,T b){return a<b?b:a;}\ntemplate<class T>inline T min(T a,T b){return a<b?a:b;}\n\ninline int read()\n{\n    char ch;\n    while (!isdigit(ch=gc()));\n    int x=ch^48;\n    while (isdigit(ch=gc())) x=x*10+ch-48;\n    return x;\n}\n\ninline pair<ll,bool> qpow(ll a,ll b,ll P)\n{\n    ll ans=1%P;\n    bool gr=false;\n    for (;b;b>>=1)\n    {\n        if (b&1) ans=ans*a;\n        if (ans>=P) ans%=P,gr=true;\n        a=a*a%P;\n    }\n    return make_pair(ans,gr);\n}\n\ninline void CalcPower(int x,int now)\n{\n    int T=Sqrt[now]=sqrt(x);\n    c_x[now][0]=1;c_x[now][1]=c;\n    c_sqrt[now][0]=1;pair<ll,bool> pr=qpow(c,T,x);c_sqrt[now][1]=pr.first;\n    if (c_x[now][1]>=x) is_greater[now][1]=true,c_x[now][1]%=x;\n    if (pr.second) is_greater_sqrt[now][1]=true;\n    if (c_x[now][0]>=x) is_greater[now][0]=true,c_x[now][0]%=x;\n    if (c_sqrt[now][0]>=x) is_greater_sqrt[now][0]=true,c_sqrt[now][0]%=x;\n    for (int i=2;i<=T*2;++i)\n    {\n        c_x[now][i]=c_x[now][i-1]*c;\n        c_sqrt[now][i]=c_sqrt[now][i-1]*c_sqrt[now][1];\n        if (c_x[now][i]>=x) is_greater[now][i]=true,c_x[now][i]%=x;\n        if (c_sqrt[now][i]>=x) is_greater_sqrt[now][i]=true,c_sqrt[now][i]%=x;\n    }\n}\n\ninline pair<ll,bool> Fastpow(int b,int now)\n{\n    ll t=c_x[now][b%Sqrt[now]]*c_sqrt[now][b/Sqrt[now]];\n    bool flag=is_greater[now][b%Sqrt[now]]|is_greater_sqrt[now][b/Sqrt[now]];\n    if (t>=phi[now]) flag=true,t%=phi[now];\n    return make_pair(t,flag);\n}\n\ninline int Getphi(int x)\n{\n    int ret=x;\n    for (int i=2;i<=x;++i)\n    {\n        if (x%i==0)\n        {\n            while (x%i==0) x/=i;\n            ret=ret/i*(i-1);\n        }\n    }\n    if (x>1) ret=ret/x*(x-1);\n    return ret;\n}\n\ninline void Prework(int P,int i=1)\n{\n    ++maxlim;\n    if (P==1) phi[i]=1;\n    CalcPower(phi[i]=Getphi(P),i);\n    if (P==1) return;\n    Prework(phi[i],i+1);\n}\n\ninline ll CalcNumber(int expo,int depth,int limit)\n{\n    // if (phi[depth-1]==1) return 0;\n    if (depth==limit+1) return expo>phi[limit]?expo%phi[limit]+phi[limit]:expo;\n    int t=CalcNumber(expo,depth+1,limit);\n    pair<ll,bool> pr=Fastpow(t,depth-1);\n    // printf(\"depth=%d ,exp=%d\\n\",depth,pr.second?pr.first+phi[depth-1]:pr.first);\n    if (pr.second==1) return pr.first+phi[depth-1];\n    return pr.first;\n}\n\ninline void Pushup(int o)\n{\n    sumv[o]=sumv[o<<1]+sumv[o<<1|1];\n    if (sumv[o]>=P) sumv[o]-=P;\n}\n\ninline void BuildSeg(int l,int r,int o)\n{\n    if (l==r) return void(sumv[o]=a[l]);\n    int mid=(l+r)>>1;\n    BuildSeg(ls);BuildSeg(rs);\n    Pushup(o);\n}\n\ninline void Modify(int L,int R,int l,int r,int o)\n{\n    if (count[o]>=maxlim) return;\n    if (l==r)\n    {\n        ++count[o];\n        sumv[o]=CalcNumber(a[l],1,count[o])%P;\n        // printf(\"pos=%d num=%d\\n\",l,sumv[o]);\n        return;\n    }\n    int mid=(l+r)>>1;\n    if (L<=mid) Modify(L,R,ls);\n    if (R> mid) Modify(L,R,rs);\n    Pushup(o);\n    count[o]=min(count[o<<1],count[o<<1|1]);\n}\n\ninline int Query(int L,int R,int l,int r,int o)\n{\n    if (L<=l && R>=r) return sumv[o];\n    int mid=(l+r)>>1;\n    int tot=0;\n    if (L<=mid) tot+=Query(L,R,ls);\n    if (R> mid) tot+=Query(L,R,rs);\n    if (tot>=P) tot-=P;\n    return tot;\n}\n\nint main()\n{\n    fread(fs=buf,1,1<<24,stdin);\n    int n=read(),m=read();phi[0]=P=read(),c=read();Sqrt[0]=sqrt(P);\n    CalcPower(P,0);\n    for (int i=1;i<=n;++i) a[i]=read();\n    Prework(P);BuildSeg(1,n,1);\n    for (int i=1,opt,l,r;i<=m;++i)\n    {\n        opt=read();l=read();r=read();\n        if (opt) printf(\"%d\\n\",Query(l,r,1,n,1));\n        else Modify(l,r,1,n,1);\n    }\n}\n```","source":"_posts/九省联考2018-相逢是问候.md","raw":"---\ntitle: '[六省联考2017]相逢是问候'\ndate: 2019-03-18 13:17:04\ntags:\n- 线段树\n- 数学\n- 欧拉定理\ncategories:\n- 题解\ncomments:\n---\n\n~~不要在意网址...打错了qwq~~\n\n# 题目大意\n> Informatik verbindet dich und mich.  \n> 信息将你我连结。 \n\n维护一个数列A，支持两种操作：\n* 0 l r ：表示将A[l..r]这个区间的每个数$A_i$变成$c^{A_i}$（c是输入给定的常量）\n* 1 l r : 表示求$A[l..r]$的和，结果对p（输入给定的常量）取模。\n\n<!-- more -->\n# 数据范围与约定\n* 对于 100% 的测试点， $1 \\leq n \\leq 50000; 1 \\leq m \\leq 50000; 1 \\leq p \\leq 100000000; 0 < c <p; 0 \\leq ai < p$。\n\n# 解法\n观察数据范围，$n,m\\leq 50000$。这个~~不伦不类的~~范围应该是$O(n \\log n \\log C)$之类的吧？  \n还有区间求和...?线段树？  \n不知道大家有没有做过线段树区间取模和区间开方之类维护奇怪运算的题？它们有一个共同点：暴力递归到叶子节点修改，因为运算的特殊性质决定了修改次数不超过$O(n\\log C)$，所以复杂度正确。\n考虑这个奇怪的运算。现在我们要解决的问题就是如何快速（$O(\\log\\ n)$以内）求这个：\n$$\\LARGE{c^{c^{c^{c^{...a_i}}}}}$$\n不知道您有没有做过[这个题](https://www.luogu.org/problemnew/show/P4139)，如果没有珂以去做一下qwq.  \n做完了吧？那现在您一定会了欧拉定理：\n$$\na^b \\bmod p=\\left \\{\n\\begin{aligned}\n&a^{b \\bmod \\phi (p) +\\phi (p)} &b\\geq \\phi (p)\\\\\\\\\n&a^b &b<\\phi (p)\n\\end{aligned}\n\\right.\n$$\n> 引理：对于一个数$n\\in \\mathbb N^*$，一直取$\\phi (n)$,最多取$O(\\log n)$次就会变成1.  \n> 简要证明：对于偶数，所有偶数都与它不互质。取$\\phi (n)$至少会除以2.对于奇数，考虑定义式，它一定会变成偶数。所以最多$2\\log n$次会变成1.\n\n所以当修改次数太大的时候，从某一层开始，模数都是1.这就没必要算了。所以用区间开方的思路，线段树记录区间和、区间修改次数。修改次数超过最大值时忽略修改。否则继续递归。每递归到叶子节点时，暴力修改叶子的值。顺便维护区间和。这时，总复杂度是$O(n \\log^2 n\\log C)$的。不太能承受。但是我们发现计算过程中模数只有$O(\\log n)$种取值，所以光速幂预处理一下，就可以少掉一个log啦。然后就珂以愉快地通过本题啦。好像还要wys~~或者mcfx~~一下代码\n# 代码：\n```cpp\n#pragma GCC optimize(\"-Ofast\")\n#pragma GCC optimize(3)\n#include <cstdio>\n#include <cctype>\n#include <cmath>\n#include <utility>\n#define ls l,mid,o<<1\n#define rs mid+1,r,o<<1|1\n\nusing std::pair;\nusing std::make_pair;\n\ntypedef long long ll;\n\nconst int maxn=(5e4+100)*2;\n\nint a[maxn<<2],count[maxn<<2],P,c,maxlim;\nll sumv[maxn<<2];\nint phi[maxn],Sqrt[maxn];\n\nchar buf[1<<24],*fs;\nll c_sqrt[150][maxn],c_x[150][maxn];\nbool is_greater[100][maxn],is_greater_sqrt[100][maxn];\n\n// #define gc() getchar()\n#define gc() (*fs++)\n\ntemplate<class T>inline T max(T a,T b){return a<b?b:a;}\ntemplate<class T>inline T min(T a,T b){return a<b?a:b;}\n\ninline int read()\n{\n    char ch;\n    while (!isdigit(ch=gc()));\n    int x=ch^48;\n    while (isdigit(ch=gc())) x=x*10+ch-48;\n    return x;\n}\n\ninline pair<ll,bool> qpow(ll a,ll b,ll P)\n{\n    ll ans=1%P;\n    bool gr=false;\n    for (;b;b>>=1)\n    {\n        if (b&1) ans=ans*a;\n        if (ans>=P) ans%=P,gr=true;\n        a=a*a%P;\n    }\n    return make_pair(ans,gr);\n}\n\ninline void CalcPower(int x,int now)\n{\n    int T=Sqrt[now]=sqrt(x);\n    c_x[now][0]=1;c_x[now][1]=c;\n    c_sqrt[now][0]=1;pair<ll,bool> pr=qpow(c,T,x);c_sqrt[now][1]=pr.first;\n    if (c_x[now][1]>=x) is_greater[now][1]=true,c_x[now][1]%=x;\n    if (pr.second) is_greater_sqrt[now][1]=true;\n    if (c_x[now][0]>=x) is_greater[now][0]=true,c_x[now][0]%=x;\n    if (c_sqrt[now][0]>=x) is_greater_sqrt[now][0]=true,c_sqrt[now][0]%=x;\n    for (int i=2;i<=T*2;++i)\n    {\n        c_x[now][i]=c_x[now][i-1]*c;\n        c_sqrt[now][i]=c_sqrt[now][i-1]*c_sqrt[now][1];\n        if (c_x[now][i]>=x) is_greater[now][i]=true,c_x[now][i]%=x;\n        if (c_sqrt[now][i]>=x) is_greater_sqrt[now][i]=true,c_sqrt[now][i]%=x;\n    }\n}\n\ninline pair<ll,bool> Fastpow(int b,int now)\n{\n    ll t=c_x[now][b%Sqrt[now]]*c_sqrt[now][b/Sqrt[now]];\n    bool flag=is_greater[now][b%Sqrt[now]]|is_greater_sqrt[now][b/Sqrt[now]];\n    if (t>=phi[now]) flag=true,t%=phi[now];\n    return make_pair(t,flag);\n}\n\ninline int Getphi(int x)\n{\n    int ret=x;\n    for (int i=2;i<=x;++i)\n    {\n        if (x%i==0)\n        {\n            while (x%i==0) x/=i;\n            ret=ret/i*(i-1);\n        }\n    }\n    if (x>1) ret=ret/x*(x-1);\n    return ret;\n}\n\ninline void Prework(int P,int i=1)\n{\n    ++maxlim;\n    if (P==1) phi[i]=1;\n    CalcPower(phi[i]=Getphi(P),i);\n    if (P==1) return;\n    Prework(phi[i],i+1);\n}\n\ninline ll CalcNumber(int expo,int depth,int limit)\n{\n    // if (phi[depth-1]==1) return 0;\n    if (depth==limit+1) return expo>phi[limit]?expo%phi[limit]+phi[limit]:expo;\n    int t=CalcNumber(expo,depth+1,limit);\n    pair<ll,bool> pr=Fastpow(t,depth-1);\n    // printf(\"depth=%d ,exp=%d\\n\",depth,pr.second?pr.first+phi[depth-1]:pr.first);\n    if (pr.second==1) return pr.first+phi[depth-1];\n    return pr.first;\n}\n\ninline void Pushup(int o)\n{\n    sumv[o]=sumv[o<<1]+sumv[o<<1|1];\n    if (sumv[o]>=P) sumv[o]-=P;\n}\n\ninline void BuildSeg(int l,int r,int o)\n{\n    if (l==r) return void(sumv[o]=a[l]);\n    int mid=(l+r)>>1;\n    BuildSeg(ls);BuildSeg(rs);\n    Pushup(o);\n}\n\ninline void Modify(int L,int R,int l,int r,int o)\n{\n    if (count[o]>=maxlim) return;\n    if (l==r)\n    {\n        ++count[o];\n        sumv[o]=CalcNumber(a[l],1,count[o])%P;\n        // printf(\"pos=%d num=%d\\n\",l,sumv[o]);\n        return;\n    }\n    int mid=(l+r)>>1;\n    if (L<=mid) Modify(L,R,ls);\n    if (R> mid) Modify(L,R,rs);\n    Pushup(o);\n    count[o]=min(count[o<<1],count[o<<1|1]);\n}\n\ninline int Query(int L,int R,int l,int r,int o)\n{\n    if (L<=l && R>=r) return sumv[o];\n    int mid=(l+r)>>1;\n    int tot=0;\n    if (L<=mid) tot+=Query(L,R,ls);\n    if (R> mid) tot+=Query(L,R,rs);\n    if (tot>=P) tot-=P;\n    return tot;\n}\n\nint main()\n{\n    fread(fs=buf,1,1<<24,stdin);\n    int n=read(),m=read();phi[0]=P=read(),c=read();Sqrt[0]=sqrt(P);\n    CalcPower(P,0);\n    for (int i=1;i<=n;++i) a[i]=read();\n    Prework(P);BuildSeg(1,n,1);\n    for (int i=1,opt,l,r;i<=m;++i)\n    {\n        opt=read();l=read();r=read();\n        if (opt) printf(\"%d\\n\",Query(l,r,1,n,1));\n        else Modify(l,r,1,n,1);\n    }\n}\n```","slug":"九省联考2018-相逢是问候","published":1,"updated":"2019-03-18T14:52:41.770Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm1z0010v4ty1ldov5fv","content":"<p><del>不要在意网址…打错了qwq</del></p>\n<h1 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h1><blockquote>\n<p>Informatik verbindet dich und mich.<br>信息将你我连结。 </p>\n</blockquote>\n<p>维护一个数列A，支持两种操作：</p>\n<ul>\n<li>0 l r ：表示将A[l..r]这个区间的每个数$A_i$变成$c^{A_i}$（c是输入给定的常量）</li>\n<li>1 l r : 表示求$A[l..r]$的和，结果对p（输入给定的常量）取模。</li>\n</ul>\n<a id=\"more\"></a>\n<h1 id=\"数据范围与约定\"><a href=\"#数据范围与约定\" class=\"headerlink\" title=\"数据范围与约定\"></a>数据范围与约定</h1><ul>\n<li>对于 100% 的测试点， $1 \\leq n \\leq 50000; 1 \\leq m \\leq 50000; 1 \\leq p \\leq 100000000; 0 &lt; c &lt;p; 0 \\leq ai &lt; p$。</li>\n</ul>\n<h1 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h1><p>观察数据范围，$n,m\\leq 50000$。这个<del>不伦不类的</del>范围应该是$O(n \\log n \\log C)$之类的吧？<br>还有区间求和…?线段树？<br>不知道大家有没有做过线段树区间取模和区间开方之类维护奇怪运算的题？它们有一个共同点：暴力递归到叶子节点修改，因为运算的特殊性质决定了修改次数不超过$O(n\\log C)$，所以复杂度正确。<br>考虑这个奇怪的运算。现在我们要解决的问题就是如何快速（$O(\\log\\ n)$以内）求这个：<br>$$\\LARGE{c^{c^{c^{c^{…a_i}}}}}$$<br>不知道您有没有做过<a href=\"https://www.luogu.org/problemnew/show/P4139\" target=\"_blank\" rel=\"noopener\">这个题</a>，如果没有珂以去做一下qwq.<br>做完了吧？那现在您一定会了欧拉定理：<br>$$<br>a^b \\bmod p=\\left {<br>\\begin{aligned}<br>&amp;a^{b \\bmod \\phi (p) +\\phi (p)} &amp;b\\geq \\phi (p)\\\\<br>&amp;a^b &amp;b&lt;\\phi (p)<br>\\end{aligned}<br>\\right.<br>$$</p>\n<blockquote>\n<p>引理：对于一个数$n\\in \\mathbb N^*$，一直取$\\phi (n)$,最多取$O(\\log n)$次就会变成1.<br>简要证明：对于偶数，所有偶数都与它不互质。取$\\phi (n)$至少会除以2.对于奇数，考虑定义式，它一定会变成偶数。所以最多$2\\log n$次会变成1.</p>\n</blockquote>\n<p>所以当修改次数太大的时候，从某一层开始，模数都是1.这就没必要算了。所以用区间开方的思路，线段树记录区间和、区间修改次数。修改次数超过最大值时忽略修改。否则继续递归。每递归到叶子节点时，暴力修改叶子的值。顺便维护区间和。这时，总复杂度是$O(n \\log^2 n\\log C)$的。不太能承受。但是我们发现计算过程中模数只有$O(\\log n)$种取值，所以光速幂预处理一下，就可以少掉一个log啦。然后就珂以愉快地通过本题啦。好像还要wys<del>或者mcfx</del>一下代码</p>\n<h1 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(<span class=\"meta-string\">\"-Ofast\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(3)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;utility&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ls l,mid,o&lt;&lt;1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rs mid+1,r,o&lt;&lt;1|1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::pair;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::make_pair;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=(<span class=\"number\">5e4</span>+<span class=\"number\">100</span>)*<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn&lt;&lt;<span class=\"number\">2</span>],count[maxn&lt;&lt;<span class=\"number\">2</span>],P,c,maxlim;</span><br><span class=\"line\">ll sumv[maxn&lt;&lt;<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> phi[maxn],Sqrt[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> buf[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">24</span>],*fs;</span><br><span class=\"line\">ll c_sqrt[<span class=\"number\">150</span>][maxn],c_x[<span class=\"number\">150</span>][maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> is_greater[<span class=\"number\">100</span>][maxn],is_greater_sqrt[<span class=\"number\">100</span>][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// #define gc() getchar()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc() (*fs++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">max</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?b:a;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">min</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?a:b;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch=gc()));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=ch^<span class=\"number\">48</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch=gc())) x=x*<span class=\"number\">10</span>+ch<span class=\"number\">-48</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> pair&lt;ll,<span class=\"keyword\">bool</span>&gt; qpow(ll a,ll b,ll P)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">1</span>%P;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> gr=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=ans*a;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans&gt;=P) ans%=P,gr=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        a=a*a%P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> make_pair(ans,gr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">CalcPower</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> now)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T=Sqrt[now]=<span class=\"built_in\">sqrt</span>(x);</span><br><span class=\"line\">    c_x[now][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;c_x[now][<span class=\"number\">1</span>]=c;</span><br><span class=\"line\">    c_sqrt[now][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;pair&lt;ll,<span class=\"keyword\">bool</span>&gt; pr=qpow(c,T,x);c_sqrt[now][<span class=\"number\">1</span>]=pr.first;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c_x[now][<span class=\"number\">1</span>]&gt;=x) is_greater[now][<span class=\"number\">1</span>]=<span class=\"literal\">true</span>,c_x[now][<span class=\"number\">1</span>]%=x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pr.second) is_greater_sqrt[now][<span class=\"number\">1</span>]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c_x[now][<span class=\"number\">0</span>]&gt;=x) is_greater[now][<span class=\"number\">0</span>]=<span class=\"literal\">true</span>,c_x[now][<span class=\"number\">0</span>]%=x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c_sqrt[now][<span class=\"number\">0</span>]&gt;=x) is_greater_sqrt[now][<span class=\"number\">0</span>]=<span class=\"literal\">true</span>,c_sqrt[now][<span class=\"number\">0</span>]%=x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=T*<span class=\"number\">2</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c_x[now][i]=c_x[now][i<span class=\"number\">-1</span>]*c;</span><br><span class=\"line\">        c_sqrt[now][i]=c_sqrt[now][i<span class=\"number\">-1</span>]*c_sqrt[now][<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c_x[now][i]&gt;=x) is_greater[now][i]=<span class=\"literal\">true</span>,c_x[now][i]%=x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c_sqrt[now][i]&gt;=x) is_greater_sqrt[now][i]=<span class=\"literal\">true</span>,c_sqrt[now][i]%=x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> pair&lt;ll,<span class=\"keyword\">bool</span>&gt; Fastpow(<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> now)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ll t=c_x[now][b%Sqrt[now]]*c_sqrt[now][b/Sqrt[now]];</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> flag=is_greater[now][b%Sqrt[now]]|is_greater_sqrt[now][b/Sqrt[now]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t&gt;=phi[now]) flag=<span class=\"literal\">true</span>,t%=phi[now];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> make_pair(t,flag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Getphi</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret=x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=x;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x%i==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (x%i==<span class=\"number\">0</span>) x/=i;</span><br><span class=\"line\">            ret=ret/i*(i<span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&gt;<span class=\"number\">1</span>) ret=ret/x*(x<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Prework</span><span class=\"params\">(<span class=\"keyword\">int</span> P,<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ++maxlim;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (P==<span class=\"number\">1</span>) phi[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    CalcPower(phi[i]=Getphi(P),i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (P==<span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    Prework(phi[i],i+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">CalcNumber</span><span class=\"params\">(<span class=\"keyword\">int</span> expo,<span class=\"keyword\">int</span> depth,<span class=\"keyword\">int</span> limit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// if (phi[depth-1]==1) return 0;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (depth==limit+<span class=\"number\">1</span>) <span class=\"keyword\">return</span> expo&gt;phi[limit]?expo%phi[limit]+phi[limit]:expo;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t=CalcNumber(expo,depth+<span class=\"number\">1</span>,limit);</span><br><span class=\"line\">    pair&lt;ll,<span class=\"keyword\">bool</span>&gt; pr=Fastpow(t,depth<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// printf(\"depth=%d ,exp=%d\\n\",depth,pr.second?pr.first+phi[depth-1]:pr.first);</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pr.second==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> pr.first+phi[depth<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pr.first;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    sumv[o]=sumv[o&lt;&lt;<span class=\"number\">1</span>]+sumv[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sumv[o]&gt;=P) sumv[o]-=P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">BuildSeg</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span> <span class=\"keyword\">void</span>(sumv[o]=a[l]);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    BuildSeg(ls);BuildSeg(rs);</span><br><span class=\"line\">    Pushup(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Modify</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count[o]&gt;=maxlim) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++count[o];</span><br><span class=\"line\">        sumv[o]=CalcNumber(a[l],<span class=\"number\">1</span>,count[o])%P;</span><br><span class=\"line\">        <span class=\"comment\">// printf(\"pos=%d num=%d\\n\",l,sumv[o]);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=mid) Modify(L,R,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt; mid) Modify(L,R,rs);</span><br><span class=\"line\">    Pushup(o);</span><br><span class=\"line\">    count[o]=min(count[o&lt;&lt;<span class=\"number\">1</span>],count[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Query</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r) <span class=\"keyword\">return</span> sumv[o];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=mid) tot+=Query(L,R,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt; mid) tot+=Query(L,R,rs);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tot&gt;=P) tot-=P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fread(fs=buf,<span class=\"number\">1</span>,<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">24</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=read(),m=read();phi[<span class=\"number\">0</span>]=P=read(),c=read();Sqrt[<span class=\"number\">0</span>]=<span class=\"built_in\">sqrt</span>(P);</span><br><span class=\"line\">    CalcPower(P,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) a[i]=read();</span><br><span class=\"line\">    Prework(P);BuildSeg(<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,opt,l,r;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        opt=read();l=read();r=read();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (opt) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,Query(l,r,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> Modify(l,r,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><del>不要在意网址…打错了qwq</del></p>\n<h1 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h1><blockquote>\n<p>Informatik verbindet dich und mich.<br>信息将你我连结。 </p>\n</blockquote>\n<p>维护一个数列A，支持两种操作：</p>\n<ul>\n<li>0 l r ：表示将A[l..r]这个区间的每个数$A_i$变成$c^{A_i}$（c是输入给定的常量）</li>\n<li>1 l r : 表示求$A[l..r]$的和，结果对p（输入给定的常量）取模。</li>\n</ul>","more":"<h1 id=\"数据范围与约定\"><a href=\"#数据范围与约定\" class=\"headerlink\" title=\"数据范围与约定\"></a>数据范围与约定</h1><ul>\n<li>对于 100% 的测试点， $1 \\leq n \\leq 50000; 1 \\leq m \\leq 50000; 1 \\leq p \\leq 100000000; 0 &lt; c &lt;p; 0 \\leq ai &lt; p$。</li>\n</ul>\n<h1 id=\"解法\"><a href=\"#解法\" class=\"headerlink\" title=\"解法\"></a>解法</h1><p>观察数据范围，$n,m\\leq 50000$。这个<del>不伦不类的</del>范围应该是$O(n \\log n \\log C)$之类的吧？<br>还有区间求和…?线段树？<br>不知道大家有没有做过线段树区间取模和区间开方之类维护奇怪运算的题？它们有一个共同点：暴力递归到叶子节点修改，因为运算的特殊性质决定了修改次数不超过$O(n\\log C)$，所以复杂度正确。<br>考虑这个奇怪的运算。现在我们要解决的问题就是如何快速（$O(\\log\\ n)$以内）求这个：<br>$$\\LARGE{c^{c^{c^{c^{…a_i}}}}}$$<br>不知道您有没有做过<a href=\"https://www.luogu.org/problemnew/show/P4139\" target=\"_blank\" rel=\"noopener\">这个题</a>，如果没有珂以去做一下qwq.<br>做完了吧？那现在您一定会了欧拉定理：<br>$$<br>a^b \\bmod p=\\left {<br>\\begin{aligned}<br>&amp;a^{b \\bmod \\phi (p) +\\phi (p)} &amp;b\\geq \\phi (p)\\\\<br>&amp;a^b &amp;b&lt;\\phi (p)<br>\\end{aligned}<br>\\right.<br>$$</p>\n<blockquote>\n<p>引理：对于一个数$n\\in \\mathbb N^*$，一直取$\\phi (n)$,最多取$O(\\log n)$次就会变成1.<br>简要证明：对于偶数，所有偶数都与它不互质。取$\\phi (n)$至少会除以2.对于奇数，考虑定义式，它一定会变成偶数。所以最多$2\\log n$次会变成1.</p>\n</blockquote>\n<p>所以当修改次数太大的时候，从某一层开始，模数都是1.这就没必要算了。所以用区间开方的思路，线段树记录区间和、区间修改次数。修改次数超过最大值时忽略修改。否则继续递归。每递归到叶子节点时，暴力修改叶子的值。顺便维护区间和。这时，总复杂度是$O(n \\log^2 n\\log C)$的。不太能承受。但是我们发现计算过程中模数只有$O(\\log n)$种取值，所以光速幂预处理一下，就可以少掉一个log啦。然后就珂以愉快地通过本题啦。好像还要wys<del>或者mcfx</del>一下代码</p>\n<h1 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(<span class=\"meta-string\">\"-Ofast\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(3)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;utility&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ls l,mid,o&lt;&lt;1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rs mid+1,r,o&lt;&lt;1|1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::pair;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::make_pair;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=(<span class=\"number\">5e4</span>+<span class=\"number\">100</span>)*<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn&lt;&lt;<span class=\"number\">2</span>],count[maxn&lt;&lt;<span class=\"number\">2</span>],P,c,maxlim;</span><br><span class=\"line\">ll sumv[maxn&lt;&lt;<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> phi[maxn],Sqrt[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> buf[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">24</span>],*fs;</span><br><span class=\"line\">ll c_sqrt[<span class=\"number\">150</span>][maxn],c_x[<span class=\"number\">150</span>][maxn];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> is_greater[<span class=\"number\">100</span>][maxn],is_greater_sqrt[<span class=\"number\">100</span>][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// #define gc() getchar()</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc() (*fs++)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">max</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?b:a;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">min</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?a:b;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch=gc()));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=ch^<span class=\"number\">48</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch=gc())) x=x*<span class=\"number\">10</span>+ch<span class=\"number\">-48</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> pair&lt;ll,<span class=\"keyword\">bool</span>&gt; qpow(ll a,ll b,ll P)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">1</span>%P;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> gr=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=ans*a;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans&gt;=P) ans%=P,gr=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        a=a*a%P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> make_pair(ans,gr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">CalcPower</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> now)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T=Sqrt[now]=<span class=\"built_in\">sqrt</span>(x);</span><br><span class=\"line\">    c_x[now][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;c_x[now][<span class=\"number\">1</span>]=c;</span><br><span class=\"line\">    c_sqrt[now][<span class=\"number\">0</span>]=<span class=\"number\">1</span>;pair&lt;ll,<span class=\"keyword\">bool</span>&gt; pr=qpow(c,T,x);c_sqrt[now][<span class=\"number\">1</span>]=pr.first;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c_x[now][<span class=\"number\">1</span>]&gt;=x) is_greater[now][<span class=\"number\">1</span>]=<span class=\"literal\">true</span>,c_x[now][<span class=\"number\">1</span>]%=x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pr.second) is_greater_sqrt[now][<span class=\"number\">1</span>]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c_x[now][<span class=\"number\">0</span>]&gt;=x) is_greater[now][<span class=\"number\">0</span>]=<span class=\"literal\">true</span>,c_x[now][<span class=\"number\">0</span>]%=x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c_sqrt[now][<span class=\"number\">0</span>]&gt;=x) is_greater_sqrt[now][<span class=\"number\">0</span>]=<span class=\"literal\">true</span>,c_sqrt[now][<span class=\"number\">0</span>]%=x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=T*<span class=\"number\">2</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c_x[now][i]=c_x[now][i<span class=\"number\">-1</span>]*c;</span><br><span class=\"line\">        c_sqrt[now][i]=c_sqrt[now][i<span class=\"number\">-1</span>]*c_sqrt[now][<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c_x[now][i]&gt;=x) is_greater[now][i]=<span class=\"literal\">true</span>,c_x[now][i]%=x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c_sqrt[now][i]&gt;=x) is_greater_sqrt[now][i]=<span class=\"literal\">true</span>,c_sqrt[now][i]%=x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> pair&lt;ll,<span class=\"keyword\">bool</span>&gt; Fastpow(<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> now)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ll t=c_x[now][b%Sqrt[now]]*c_sqrt[now][b/Sqrt[now]];</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> flag=is_greater[now][b%Sqrt[now]]|is_greater_sqrt[now][b/Sqrt[now]];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t&gt;=phi[now]) flag=<span class=\"literal\">true</span>,t%=phi[now];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> make_pair(t,flag);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Getphi</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret=x;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=x;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x%i==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (x%i==<span class=\"number\">0</span>) x/=i;</span><br><span class=\"line\">            ret=ret/i*(i<span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&gt;<span class=\"number\">1</span>) ret=ret/x*(x<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Prework</span><span class=\"params\">(<span class=\"keyword\">int</span> P,<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ++maxlim;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (P==<span class=\"number\">1</span>) phi[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    CalcPower(phi[i]=Getphi(P),i);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (P==<span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    Prework(phi[i],i+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">CalcNumber</span><span class=\"params\">(<span class=\"keyword\">int</span> expo,<span class=\"keyword\">int</span> depth,<span class=\"keyword\">int</span> limit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// if (phi[depth-1]==1) return 0;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (depth==limit+<span class=\"number\">1</span>) <span class=\"keyword\">return</span> expo&gt;phi[limit]?expo%phi[limit]+phi[limit]:expo;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t=CalcNumber(expo,depth+<span class=\"number\">1</span>,limit);</span><br><span class=\"line\">    pair&lt;ll,<span class=\"keyword\">bool</span>&gt; pr=Fastpow(t,depth<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// printf(\"depth=%d ,exp=%d\\n\",depth,pr.second?pr.first+phi[depth-1]:pr.first);</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pr.second==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> pr.first+phi[depth<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pr.first;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    sumv[o]=sumv[o&lt;&lt;<span class=\"number\">1</span>]+sumv[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sumv[o]&gt;=P) sumv[o]-=P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">BuildSeg</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span> <span class=\"keyword\">void</span>(sumv[o]=a[l]);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    BuildSeg(ls);BuildSeg(rs);</span><br><span class=\"line\">    Pushup(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Modify</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count[o]&gt;=maxlim) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++count[o];</span><br><span class=\"line\">        sumv[o]=CalcNumber(a[l],<span class=\"number\">1</span>,count[o])%P;</span><br><span class=\"line\">        <span class=\"comment\">// printf(\"pos=%d num=%d\\n\",l,sumv[o]);</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=mid) Modify(L,R,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt; mid) Modify(L,R,rs);</span><br><span class=\"line\">    Pushup(o);</span><br><span class=\"line\">    count[o]=min(count[o&lt;&lt;<span class=\"number\">1</span>],count[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Query</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r) <span class=\"keyword\">return</span> sumv[o];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=mid) tot+=Query(L,R,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt; mid) tot+=Query(L,R,rs);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tot&gt;=P) tot-=P;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fread(fs=buf,<span class=\"number\">1</span>,<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">24</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=read(),m=read();phi[<span class=\"number\">0</span>]=P=read(),c=read();Sqrt[<span class=\"number\">0</span>]=<span class=\"built_in\">sqrt</span>(P);</span><br><span class=\"line\">    CalcPower(P,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) a[i]=read();</span><br><span class=\"line\">    Prework(P);BuildSeg(<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,opt,l,r;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        opt=read();l=read();r=read();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (opt) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,Query(l,r,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">else</span> Modify(l,r,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"多项式算法做题记录","date":"2019-02-15T15:04:57.000Z","comments":1,"_content":"\n从今天开始，蒟蒻_WA自动机也要学多项式辣！虽然我什么都不会，但是好在我们机房有~~HA A队队长~~LCH~~CTP_998244353~~巨佬啊！~~所以天天被巨佬爆踩~~\n\n# [lg P3723](https://www.luogu.org/problemnew/show/P3723) [AH/HNOI2017]礼物\n## 题目大意\n两个长度为n的环形整数数列，您可以进行两种操作：\n1. 对一个数列的所有数加上一个值C\n2. 将一个数列旋转一位  \n定义两个数列的差异值为  \n$$\\sum_{i=1}^{n}(x_i-y_i)^2$$\n求差异值的最小值。  \n<!-- more -->\n## 数据范围\n30%的数据满足$n≤500,m≤10$；  \n70%的数据满足$n≤5000$；  \n100%的数据满足$1≤n≤50000, 1≤m≤100, 1≤a_i≤m$。\n## 题解：\n考虑如何使上式值最小  \n设给x序列加了一个数$C\\in \\mathbb{Z}$,则答案为$(x_i-y_i+C)^2$  \n拆掉上面的柿子..  \n$$(x_i-y_i+C)^2=x_i^2+y_i^2+C^2-2x_iy_i+2C(x_i-y_i)$$\n柿子中除了$-2x_iy_i$都是定值，所以我们只需要最大化$x_iy_i$\n这个非常像一个卷积..再看看数据范围，也是FFT的数据范围。。  \n对于这样的柿子我们通常的处理方法就是把一个序列翻转。这样就变成了卷积，可以$O(n \\log n)$算出值了。现在我们要最大化所有可能的这样的值，所以考虑断环为链，把A复制一遍接在末尾。算出来的$a[n+1..n+n]$就是所有可能的答案。\n再考虑关于C的项，含有C的项总和为\n$$nC^2-2C\\sum_{i=1}^{n}x_iy_i$$\n这是关于C的二次函数，用对称轴就好了。注意C是整数，所以算出对称轴后要四舍五入取接近的整数。\n**注意数学函数调用时一定要加std::，不然会出现奇怪的精度问题。。**\n### 我的代码（NTT实现\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n\nusing std::reverse;\n\ntypedef long long ll;\n\nconst int P=1004535809;\nconst int g=3;\nconst int maxn=4e6+2000;\n\nint A[maxn],B[maxn],limit=1,w[maxn],winv[maxn],rev[maxn];\n\ninline void swap(int &a,int & b){a^=b^=a^=b;}\n\ninline int qpow(int a,int b,int p)\n{\n    int ans=1%p;\n    for (;b;b>>=1,a=(ll)a*a%p)\n        if (b&1) ans=(ll)ans*a%p;\n    return ans;\n}\n\ninline void prework(int n,int m)\n{\n    int l=0;\n    while (limit<=(n+m+1)) limit<<=1,++l;\n    w[0]=1;w[1]=qpow(g,(P-1)/limit,P),winv[0]=1,winv[1]=qpow(w[1],P-2,P);\n    for (int i=2;i<limit;++i)\n        w[i]=(ll)w[i-1]*w[1]%P,winv[i]=1ll*winv[i-1]*winv[1]%P;\n    for (int i=1;i<limit;++i)\n        rev[i]=(rev[i>>1]>>1)|((i&1)<<(l-1));\n}\n\ninline void NTT(int *A,int *w,int limit)\n{\n    for (int i=0;i<limit;++i)\n        if (i<rev[i]) swap(A[i],A[rev[i]]);\n    for (int mid=1;mid<limit;mid<<=1)\n        for (int R=mid<<1,j=0;j<limit;j+=R)\n            for (int k=0;k<mid;++k)\n            {\n                int x=A[j+k],y=(ll)A[j+k+mid]*w[limit/2/mid*k]%P;\n                A[j+k]=(x+y)%P;A[j+mid+k]=(x-y+P)%P;\n            }\n}\n\ninline void DFT(int *A){ NTT(A,w,limit); }\n\ninline void IDFT(int *A)\n{\n    NTT(A,winv,limit);\n    int inv=qpow(limit,P-2,P);\n    for (int i=0;i<=limit;++i)\n        A[i]=((ll)A[i]*inv)%P;\n}\n\nint main()\n{\n    // freopen(\"./4827/4827/10.in\",\"r\",stdin);\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;++i)\n        scanf(\"%d\",A+i);\n    for (int i=1;i<=n;++i)\n        scanf(\"%d\",B+i);\n    ll k=0;\n    for (int i=1;i<=n;++i)\n        k+=A[i]-B[i];\n    ll C=std::round((double)-k/n);\n    ll tot=0;\n    for (int i=1;i<=n;++i)\n        tot+=(ll)A[i]*A[i]+(ll)B[i]*B[i]+2*C*(A[i]-B[i])+C*C;\n    std::reverse(A+1,A+n+1);\n    std::copy(A+1,A+n+1,A+n+1);\n    prework(n,2*n);\n    DFT(A);DFT(B);\n    for (int i=0;i<limit;++i)\n        A[i]=(ll)B[i]*A[i]%P;\n    IDFT(A);\n    ll ans=-0x3f3f3f3f;\n    for (int i=1;i<=n;++i)\n        if (A[i+n]>ans) ans=A[i+n];\n    printf(\"%lld\",tot-2*ans);\n}\n```\n\n# [lg P3338](https://www.luogu.org/problemnew/show/P3338) [ZJOI2014]力\n## 题目大意：\n给出$n$个数$q_i$，给出$F_j$的定义如下：\n\n$F_j = \\sum_{i<j}\\frac{q_i q_j}{(i-j)^2 }-\\sum_{i>j}\\frac{q_i q_j}{(i-j)^2 }$  \n令$E_i=F_i/q_i$，求$E_i$.\n\n## 数据范围：\n对于$30\\%$的数据，$n≤1000$。\n对于$50\\%$的数据，$n≤60000$。\n对于$100\\%$的数据，$n≤100000$，$0<q_i<1000000000$。\n\n## 题解：\n首先，珂以直接得到$E_i$的表达式：\n$$E_i=\\sum_{j<i}\\frac{q_j}{(i-j)^2}-\\sum_{j>i}\\frac{q_j}{(i-j)^2}$$\n分开考虑每一项：\n两项的推导方式差不多，所以只用后面的那一项做栗子吧：\n我们观察到这很像一个卷积的形式，所以我们考虑化成卷积：  \n设\n$$G_i=\\sum_{j>i}\\frac{q_j}{(i-j)^2}=\\sum_{j=i+1}^n\\frac{q_j}{(i-j)^2}$$\n令$A_i=q_i,B_i=\\frac{1}{i^2}$  \n则上式珂变形为：\n$$G_i=\\sum_{j=i+1}^n A_jB_{j-i}$$\n看到A和B的下标和不是定值，考虑翻转系数：\n$$G_i = \\sum_{j=i+1}^nA^R_{n-j}B_{j-i}$$\n这时下标和是定值了，要化成卷积还要把sigma的上下标换一下：  \n平移j的取值范围：  \n$$G_i=\\sum_{j=1}^{n-i}A^R_{n-j+i}B_{j}$$\n令$B_0=0$，此时j可以取到0，并将$G$翻转\n$$G^R_i=\\sum_{j=0}^{i}A^R_{i-j}B_j$$\n然后做卷积就珂以了！\n代码:\n```cpp\n// luogu-judger-enable-o2\n#pragma GCC optimize(\"-O3\")\n#pragma GCC optimize(\"-Ofast\")\n#pragma GCC optimize(\"-funroll-loops\")\n#pragma GCC optimize(\"-ffast-math\")\n#include <cstdio>\n#include <cmath>\n#include <cctype>\n#include <algorithm>\n\nconst double Pi=acos(-1.0);\nconst int maxn=4e5+100;\n\ndouble q[maxn];\nint limit=1,rev[maxn];\n\nstruct Complex\n{\n    double real,imag;\n    Complex(double real,double imag):real(real),imag(imag){}\n    Complex(){}\n    Complex conj();\n}w[maxn],winv[maxn],A[maxn],B[maxn],C[maxn];\n\ninline Complex Complex::conj(){return Complex(real,-imag);}\ninline Complex operator+(const Complex& a,const Complex& b){return Complex(a.real+b.real,a.imag+b.imag);}\ninline Complex operator-(const Complex& a,const Complex& b){return Complex(a.real-b.real,a.imag-b.imag);}\ninline Complex operator*(const Complex& a,const Complex& b){return Complex(a.real*b.real-a.imag*b.imag,a.real*b.imag+a.imag*b.real);}\n\ntemplate<typename T>\ninline void swap(T& a,T& b){T t=a;a=b;b=t;}\n\ninline void DFT(Complex* A,Complex* w,int limit)\n{\n    for (register int i=0;i<limit;++i)\n        if (i<rev[i]) swap(A[i],A[rev[i]]);\n    for (register int mid=1;mid<limit;mid<<=1)\n        for (register int R=mid<<1,j=0;j<limit;j+=R)\n            for (register int k=0;k<mid;++k)\n            {\n                Complex x=A[j+k],y=w[limit/mid/2*k]*A[j+mid+k];\n                A[j+k]=x+y;\n                A[j+mid+k]=x-y;\n            }\n}\n\ninline void prework(int n)\n{\n    int l=0;\n    while (limit<=(n<<1)+1) limit<<=1,++l;\n    for (register int i=0;i<limit;++i)\n        rev[i]=(rev[i>>1]>>1)|((i&1)<<(l-1));\n    for (register int i=0;i<limit;++i) \n        w[i]=Complex(cos(Pi*2/limit*i),sin(Pi*2/limit*i)),winv[i]=w[i].conj();\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;++i)\n        scanf(\"%lf\",q+i),A[i].real=q[i];\n    prework(n);\n    for (int i=1;i<=n;++i)\n        B[i].real=1.0/i/i;\n    DFT(A,w,limit);DFT(B,w,limit);\n    static Complex G[maxn],H[maxn];\n    for (int i=0;i<limit;++i)\n        G[i]=A[i]*B[i];\n    DFT(G,winv,limit);\n    for (int i=0;i<limit;++i)\n        G[i].real/=limit;\n    std::reverse(q,q+n+1);\n    for (int i=0;i<limit;++i)\n        A[i]=Complex(q[i],0);\n    // for (int i=0;i<=n;++i)\n    //     B[i]=Complex(1.0/(i+1)/(i+1),0);\n    DFT(A,w,limit);\n    // DFT(B,w,limit);\n    for (int i=0;i<limit;++i)\n        H[i]=A[i]*B[i];\n    DFT(H,winv,limit);\n    for (int i=0;i<limit;++i)\n        H[i].real/=limit;\n    for (int i=1;i<=n;++i)\n        printf(\"%.5lf\\n\",G[i].real-H[n-i].real);\n    // while (~puts(\"\\a\"));\n}\n```\n\n","source":"_posts/多项式算法做题记录.md","raw":"---\ntitle: 多项式算法做题记录\ndate: 2019-02-15 23:04:57\ntags:\ncategories:\ncomments:\n---\n\n从今天开始，蒟蒻_WA自动机也要学多项式辣！虽然我什么都不会，但是好在我们机房有~~HA A队队长~~LCH~~CTP_998244353~~巨佬啊！~~所以天天被巨佬爆踩~~\n\n# [lg P3723](https://www.luogu.org/problemnew/show/P3723) [AH/HNOI2017]礼物\n## 题目大意\n两个长度为n的环形整数数列，您可以进行两种操作：\n1. 对一个数列的所有数加上一个值C\n2. 将一个数列旋转一位  \n定义两个数列的差异值为  \n$$\\sum_{i=1}^{n}(x_i-y_i)^2$$\n求差异值的最小值。  \n<!-- more -->\n## 数据范围\n30%的数据满足$n≤500,m≤10$；  \n70%的数据满足$n≤5000$；  \n100%的数据满足$1≤n≤50000, 1≤m≤100, 1≤a_i≤m$。\n## 题解：\n考虑如何使上式值最小  \n设给x序列加了一个数$C\\in \\mathbb{Z}$,则答案为$(x_i-y_i+C)^2$  \n拆掉上面的柿子..  \n$$(x_i-y_i+C)^2=x_i^2+y_i^2+C^2-2x_iy_i+2C(x_i-y_i)$$\n柿子中除了$-2x_iy_i$都是定值，所以我们只需要最大化$x_iy_i$\n这个非常像一个卷积..再看看数据范围，也是FFT的数据范围。。  \n对于这样的柿子我们通常的处理方法就是把一个序列翻转。这样就变成了卷积，可以$O(n \\log n)$算出值了。现在我们要最大化所有可能的这样的值，所以考虑断环为链，把A复制一遍接在末尾。算出来的$a[n+1..n+n]$就是所有可能的答案。\n再考虑关于C的项，含有C的项总和为\n$$nC^2-2C\\sum_{i=1}^{n}x_iy_i$$\n这是关于C的二次函数，用对称轴就好了。注意C是整数，所以算出对称轴后要四舍五入取接近的整数。\n**注意数学函数调用时一定要加std::，不然会出现奇怪的精度问题。。**\n### 我的代码（NTT实现\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n\nusing std::reverse;\n\ntypedef long long ll;\n\nconst int P=1004535809;\nconst int g=3;\nconst int maxn=4e6+2000;\n\nint A[maxn],B[maxn],limit=1,w[maxn],winv[maxn],rev[maxn];\n\ninline void swap(int &a,int & b){a^=b^=a^=b;}\n\ninline int qpow(int a,int b,int p)\n{\n    int ans=1%p;\n    for (;b;b>>=1,a=(ll)a*a%p)\n        if (b&1) ans=(ll)ans*a%p;\n    return ans;\n}\n\ninline void prework(int n,int m)\n{\n    int l=0;\n    while (limit<=(n+m+1)) limit<<=1,++l;\n    w[0]=1;w[1]=qpow(g,(P-1)/limit,P),winv[0]=1,winv[1]=qpow(w[1],P-2,P);\n    for (int i=2;i<limit;++i)\n        w[i]=(ll)w[i-1]*w[1]%P,winv[i]=1ll*winv[i-1]*winv[1]%P;\n    for (int i=1;i<limit;++i)\n        rev[i]=(rev[i>>1]>>1)|((i&1)<<(l-1));\n}\n\ninline void NTT(int *A,int *w,int limit)\n{\n    for (int i=0;i<limit;++i)\n        if (i<rev[i]) swap(A[i],A[rev[i]]);\n    for (int mid=1;mid<limit;mid<<=1)\n        for (int R=mid<<1,j=0;j<limit;j+=R)\n            for (int k=0;k<mid;++k)\n            {\n                int x=A[j+k],y=(ll)A[j+k+mid]*w[limit/2/mid*k]%P;\n                A[j+k]=(x+y)%P;A[j+mid+k]=(x-y+P)%P;\n            }\n}\n\ninline void DFT(int *A){ NTT(A,w,limit); }\n\ninline void IDFT(int *A)\n{\n    NTT(A,winv,limit);\n    int inv=qpow(limit,P-2,P);\n    for (int i=0;i<=limit;++i)\n        A[i]=((ll)A[i]*inv)%P;\n}\n\nint main()\n{\n    // freopen(\"./4827/4827/10.in\",\"r\",stdin);\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;++i)\n        scanf(\"%d\",A+i);\n    for (int i=1;i<=n;++i)\n        scanf(\"%d\",B+i);\n    ll k=0;\n    for (int i=1;i<=n;++i)\n        k+=A[i]-B[i];\n    ll C=std::round((double)-k/n);\n    ll tot=0;\n    for (int i=1;i<=n;++i)\n        tot+=(ll)A[i]*A[i]+(ll)B[i]*B[i]+2*C*(A[i]-B[i])+C*C;\n    std::reverse(A+1,A+n+1);\n    std::copy(A+1,A+n+1,A+n+1);\n    prework(n,2*n);\n    DFT(A);DFT(B);\n    for (int i=0;i<limit;++i)\n        A[i]=(ll)B[i]*A[i]%P;\n    IDFT(A);\n    ll ans=-0x3f3f3f3f;\n    for (int i=1;i<=n;++i)\n        if (A[i+n]>ans) ans=A[i+n];\n    printf(\"%lld\",tot-2*ans);\n}\n```\n\n# [lg P3338](https://www.luogu.org/problemnew/show/P3338) [ZJOI2014]力\n## 题目大意：\n给出$n$个数$q_i$，给出$F_j$的定义如下：\n\n$F_j = \\sum_{i<j}\\frac{q_i q_j}{(i-j)^2 }-\\sum_{i>j}\\frac{q_i q_j}{(i-j)^2 }$  \n令$E_i=F_i/q_i$，求$E_i$.\n\n## 数据范围：\n对于$30\\%$的数据，$n≤1000$。\n对于$50\\%$的数据，$n≤60000$。\n对于$100\\%$的数据，$n≤100000$，$0<q_i<1000000000$。\n\n## 题解：\n首先，珂以直接得到$E_i$的表达式：\n$$E_i=\\sum_{j<i}\\frac{q_j}{(i-j)^2}-\\sum_{j>i}\\frac{q_j}{(i-j)^2}$$\n分开考虑每一项：\n两项的推导方式差不多，所以只用后面的那一项做栗子吧：\n我们观察到这很像一个卷积的形式，所以我们考虑化成卷积：  \n设\n$$G_i=\\sum_{j>i}\\frac{q_j}{(i-j)^2}=\\sum_{j=i+1}^n\\frac{q_j}{(i-j)^2}$$\n令$A_i=q_i,B_i=\\frac{1}{i^2}$  \n则上式珂变形为：\n$$G_i=\\sum_{j=i+1}^n A_jB_{j-i}$$\n看到A和B的下标和不是定值，考虑翻转系数：\n$$G_i = \\sum_{j=i+1}^nA^R_{n-j}B_{j-i}$$\n这时下标和是定值了，要化成卷积还要把sigma的上下标换一下：  \n平移j的取值范围：  \n$$G_i=\\sum_{j=1}^{n-i}A^R_{n-j+i}B_{j}$$\n令$B_0=0$，此时j可以取到0，并将$G$翻转\n$$G^R_i=\\sum_{j=0}^{i}A^R_{i-j}B_j$$\n然后做卷积就珂以了！\n代码:\n```cpp\n// luogu-judger-enable-o2\n#pragma GCC optimize(\"-O3\")\n#pragma GCC optimize(\"-Ofast\")\n#pragma GCC optimize(\"-funroll-loops\")\n#pragma GCC optimize(\"-ffast-math\")\n#include <cstdio>\n#include <cmath>\n#include <cctype>\n#include <algorithm>\n\nconst double Pi=acos(-1.0);\nconst int maxn=4e5+100;\n\ndouble q[maxn];\nint limit=1,rev[maxn];\n\nstruct Complex\n{\n    double real,imag;\n    Complex(double real,double imag):real(real),imag(imag){}\n    Complex(){}\n    Complex conj();\n}w[maxn],winv[maxn],A[maxn],B[maxn],C[maxn];\n\ninline Complex Complex::conj(){return Complex(real,-imag);}\ninline Complex operator+(const Complex& a,const Complex& b){return Complex(a.real+b.real,a.imag+b.imag);}\ninline Complex operator-(const Complex& a,const Complex& b){return Complex(a.real-b.real,a.imag-b.imag);}\ninline Complex operator*(const Complex& a,const Complex& b){return Complex(a.real*b.real-a.imag*b.imag,a.real*b.imag+a.imag*b.real);}\n\ntemplate<typename T>\ninline void swap(T& a,T& b){T t=a;a=b;b=t;}\n\ninline void DFT(Complex* A,Complex* w,int limit)\n{\n    for (register int i=0;i<limit;++i)\n        if (i<rev[i]) swap(A[i],A[rev[i]]);\n    for (register int mid=1;mid<limit;mid<<=1)\n        for (register int R=mid<<1,j=0;j<limit;j+=R)\n            for (register int k=0;k<mid;++k)\n            {\n                Complex x=A[j+k],y=w[limit/mid/2*k]*A[j+mid+k];\n                A[j+k]=x+y;\n                A[j+mid+k]=x-y;\n            }\n}\n\ninline void prework(int n)\n{\n    int l=0;\n    while (limit<=(n<<1)+1) limit<<=1,++l;\n    for (register int i=0;i<limit;++i)\n        rev[i]=(rev[i>>1]>>1)|((i&1)<<(l-1));\n    for (register int i=0;i<limit;++i) \n        w[i]=Complex(cos(Pi*2/limit*i),sin(Pi*2/limit*i)),winv[i]=w[i].conj();\n}\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;++i)\n        scanf(\"%lf\",q+i),A[i].real=q[i];\n    prework(n);\n    for (int i=1;i<=n;++i)\n        B[i].real=1.0/i/i;\n    DFT(A,w,limit);DFT(B,w,limit);\n    static Complex G[maxn],H[maxn];\n    for (int i=0;i<limit;++i)\n        G[i]=A[i]*B[i];\n    DFT(G,winv,limit);\n    for (int i=0;i<limit;++i)\n        G[i].real/=limit;\n    std::reverse(q,q+n+1);\n    for (int i=0;i<limit;++i)\n        A[i]=Complex(q[i],0);\n    // for (int i=0;i<=n;++i)\n    //     B[i]=Complex(1.0/(i+1)/(i+1),0);\n    DFT(A,w,limit);\n    // DFT(B,w,limit);\n    for (int i=0;i<limit;++i)\n        H[i]=A[i]*B[i];\n    DFT(H,winv,limit);\n    for (int i=0;i<limit;++i)\n        H[i].real/=limit;\n    for (int i=1;i<=n;++i)\n        printf(\"%.5lf\\n\",G[i].real-H[n-i].real);\n    // while (~puts(\"\\a\"));\n}\n```\n\n","slug":"多项式算法做题记录","published":1,"updated":"2019-02-22T21:59:32.859Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm210015v4ty5dr1x0dp","content":"<p>从今天开始，蒟蒻_WA自动机也要学多项式辣！虽然我什么都不会，但是好在我们机房有<del>HA A队队长</del>LCH<del>CTP_998244353</del>巨佬啊！<del>所以天天被巨佬爆踩</del></p>\n<h1 id=\"lg-P3723-AH-HNOI2017-礼物\"><a href=\"#lg-P3723-AH-HNOI2017-礼物\" class=\"headerlink\" title=\"lg P3723 [AH/HNOI2017]礼物\"></a><a href=\"https://www.luogu.org/problemnew/show/P3723\" target=\"_blank\" rel=\"noopener\">lg P3723</a> [AH/HNOI2017]礼物</h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>两个长度为n的环形整数数列，您可以进行两种操作：</p>\n<ol>\n<li>对一个数列的所有数加上一个值C</li>\n<li>将一个数列旋转一位<br>定义两个数列的差异值为<br>$$\\sum_{i=1}^{n}(x_i-y_i)^2$$<br>求差异值的最小值。  <a id=\"more\"></a>\n<h2 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h2>30%的数据满足$n≤500,m≤10$；<br>70%的数据满足$n≤5000$；<br>100%的数据满足$1≤n≤50000, 1≤m≤100, 1≤a_i≤m$。<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2>考虑如何使上式值最小<br>设给x序列加了一个数$C\\in \\mathbb{Z}$,则答案为$(x_i-y_i+C)^2$<br>拆掉上面的柿子..<br>$$(x_i-y_i+C)^2=x_i^2+y_i^2+C^2-2x_iy_i+2C(x_i-y_i)$$<br>柿子中除了$-2x_iy_i$都是定值，所以我们只需要最大化$x_iy_i$<br>这个非常像一个卷积..再看看数据范围，也是FFT的数据范围。。<br>对于这样的柿子我们通常的处理方法就是把一个序列翻转。这样就变成了卷积，可以$O(n \\log n)$算出值了。现在我们要最大化所有可能的这样的值，所以考虑断环为链，把A复制一遍接在末尾。算出来的$a[n+1..n+n]$就是所有可能的答案。<br>再考虑关于C的项，含有C的项总和为<br>$$nC^2-2C\\sum_{i=1}^{n}x_iy_i$$<br>这是关于C的二次函数，用对称轴就好了。注意C是整数，所以算出对称轴后要四舍五入取接近的整数。<br><strong>注意数学函数调用时一定要加std::，不然会出现奇怪的精度问题。。</strong><h3 id=\"我的代码（NTT实现\"><a href=\"#我的代码（NTT实现\" class=\"headerlink\" title=\"我的代码（NTT实现\"></a>我的代码（NTT实现</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::reverse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> P=<span class=\"number\">1004535809</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> g=<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">4e6</span>+<span class=\"number\">2000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> A[maxn],B[maxn],limit=<span class=\"number\">1</span>,w[maxn],winv[maxn],rev[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a,<span class=\"keyword\">int</span> &amp; b)</span></span>&#123;a^=b^=a^=b;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">qpow</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">1</span>%p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>,a=(ll)a*a%p)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=(ll)ans*a%p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">prework</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (limit&lt;=(n+m+<span class=\"number\">1</span>)) limit&lt;&lt;=<span class=\"number\">1</span>,++l;</span><br><span class=\"line\">    w[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;w[<span class=\"number\">1</span>]=qpow(g,(P<span class=\"number\">-1</span>)/limit,P),winv[<span class=\"number\">0</span>]=<span class=\"number\">1</span>,winv[<span class=\"number\">1</span>]=qpow(w[<span class=\"number\">1</span>],P<span class=\"number\">-2</span>,P);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;limit;++i)</span><br><span class=\"line\">        w[i]=(ll)w[i<span class=\"number\">-1</span>]*w[<span class=\"number\">1</span>]%P,winv[i]=<span class=\"number\">1l</span>l*winv[i<span class=\"number\">-1</span>]*winv[<span class=\"number\">1</span>]%P;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;limit;++i)</span><br><span class=\"line\">        rev[i]=(rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> *w,<span class=\"keyword\">int</span> limit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;rev[i]) swap(A[i],A[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> mid=<span class=\"number\">1</span>;mid&lt;limit;mid&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> R=mid&lt;&lt;<span class=\"number\">1</span>,j=<span class=\"number\">0</span>;j&lt;limit;j+=R)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;mid;++k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x=A[j+k],y=(ll)A[j+k+mid]*w[limit/<span class=\"number\">2</span>/mid*k]%P;</span><br><span class=\"line\">                A[j+k]=(x+y)%P;A[j+mid+k]=(x-y+P)%P;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(<span class=\"keyword\">int</span> *A)</span></span>&#123; NTT(A,w,limit); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">IDFT</span><span class=\"params\">(<span class=\"keyword\">int</span> *A)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    NTT(A,winv,limit);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> inv=qpow(limit,P<span class=\"number\">-2</span>,P);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=limit;++i)</span><br><span class=\"line\">        A[i]=((ll)A[i]*inv)%P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// freopen(\"./4827/4827/10.in\",\"r\",stdin);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,A+i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,B+i);</span><br><span class=\"line\">    ll k=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        k+=A[i]-B[i];</span><br><span class=\"line\">    ll C=<span class=\"built_in\">std</span>::round((<span class=\"keyword\">double</span>)-k/n);</span><br><span class=\"line\">    ll tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        tot+=(ll)A[i]*A[i]+(ll)B[i]*B[i]+<span class=\"number\">2</span>*C*(A[i]-B[i])+C*C;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::reverse(A+<span class=\"number\">1</span>,A+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::copy(A+<span class=\"number\">1</span>,A+n+<span class=\"number\">1</span>,A+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    prework(n,<span class=\"number\">2</span>*n);</span><br><span class=\"line\">    DFT(A);DFT(B);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        A[i]=(ll)B[i]*A[i]%P;</span><br><span class=\"line\">    IDFT(A);</span><br><span class=\"line\">    ll ans=<span class=\"number\">-0x3f3f3f3f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[i+n]&gt;ans) ans=A[i+n];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\"</span>,tot<span class=\"number\">-2</span>*ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"lg-P3338-ZJOI2014-力\"><a href=\"#lg-P3338-ZJOI2014-力\" class=\"headerlink\" title=\"lg P3338 [ZJOI2014]力\"></a><a href=\"https://www.luogu.org/problemnew/show/P3338\" target=\"_blank\" rel=\"noopener\">lg P3338</a> [ZJOI2014]力</h1><h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>给出$n$个数$q_i$，给出$F_j$的定义如下：</p>\n<p>$F_j = \\sum_{i&lt;j}\\frac{q_i q_j}{(i-j)^2 }-\\sum_{i&gt;j}\\frac{q_i q_j}{(i-j)^2 }$<br>令$E_i=F_i/q_i$，求$E_i$.</p>\n<h2 id=\"数据范围：\"><a href=\"#数据范围：\" class=\"headerlink\" title=\"数据范围：\"></a>数据范围：</h2><p>对于$30\\%$的数据，$n≤1000$。<br>对于$50\\%$的数据，$n≤60000$。<br>对于$100\\%$的数据，$n≤100000$，$0&lt;q_i&lt;1000000000$。</p>\n<h2 id=\"题解：-1\"><a href=\"#题解：-1\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><p>首先，珂以直接得到$E_i$的表达式：<br>$$E_i=\\sum_{j&lt;i}\\frac{q_j}{(i-j)^2}-\\sum_{j&gt;i}\\frac{q_j}{(i-j)^2}$$<br>分开考虑每一项：<br>两项的推导方式差不多，所以只用后面的那一项做栗子吧：<br>我们观察到这很像一个卷积的形式，所以我们考虑化成卷积：<br>设<br>$$G_i=\\sum_{j&gt;i}\\frac{q_j}{(i-j)^2}=\\sum_{j=i+1}^n\\frac{q_j}{(i-j)^2}$$<br>令$A_i=q_i,B_i=\\frac{1}{i^2}$<br>则上式珂变形为：<br>$$G_i=\\sum_{j=i+1}^n A_jB_{j-i}$$<br>看到A和B的下标和不是定值，考虑翻转系数：<br>$$G_i = \\sum_{j=i+1}^nA^R_{n-j}B_{j-i}$$<br>这时下标和是定值了，要化成卷积还要把sigma的上下标换一下：<br>平移j的取值范围：<br>$$G_i=\\sum_{j=1}^{n-i}A^R_{n-j+i}B_{j}$$<br>令$B_0=0$，此时j可以取到0，并将$G$翻转<br>$$G^R_i=\\sum_{j=0}^{i}A^R_{i-j}B_j$$<br>然后做卷积就珂以了！<br>代码:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// luogu-judger-enable-o2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(<span class=\"meta-string\">\"-O3\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(<span class=\"meta-string\">\"-Ofast\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(<span class=\"meta-string\">\"-funroll-loops\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(<span class=\"meta-string\">\"-ffast-math\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> Pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">4e5</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> q[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> limit=<span class=\"number\">1</span>,rev[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> real,imag;</span><br><span class=\"line\">    Complex(<span class=\"keyword\">double</span> real,<span class=\"keyword\">double</span> imag):real(real),imag(imag)&#123;&#125;</span><br><span class=\"line\">    Complex()&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\">Complex <span class=\"title\">conj</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;w[maxn],winv[maxn],A[maxn],B[maxn],C[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> Complex Complex::conj()&#123;<span class=\"keyword\">return</span> Complex(real,-imag);&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Complex <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Complex&amp; a,<span class=\"keyword\">const</span> Complex&amp; b)&#123;<span class=\"keyword\">return</span> Complex(a.real+b.real,a.imag+b.imag);&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Complex <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> Complex&amp; a,<span class=\"keyword\">const</span> Complex&amp; b)&#123;<span class=\"keyword\">return</span> Complex(a.real-b.real,a.imag-b.imag);&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Complex <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> Complex&amp; a,<span class=\"keyword\">const</span> Complex&amp; b)&#123;<span class=\"keyword\">return</span> Complex(a.real*b.real-a.imag*b.imag,a.real*b.imag+a.imag*b.real);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T&amp; a,T&amp; b)</span></span>&#123;T t=a;a=b;b=t;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(Complex* A,Complex* w,<span class=\"keyword\">int</span> limit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;rev[i]) swap(A[i],A[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> mid=<span class=\"number\">1</span>;mid&lt;limit;mid&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> R=mid&lt;&lt;<span class=\"number\">1</span>,j=<span class=\"number\">0</span>;j&lt;limit;j+=R)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;mid;++k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Complex x=A[j+k],y=w[limit/mid/<span class=\"number\">2</span>*k]*A[j+mid+k];</span><br><span class=\"line\">                A[j+k]=x+y;</span><br><span class=\"line\">                A[j+mid+k]=x-y;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">prework</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (limit&lt;=(n&lt;&lt;<span class=\"number\">1</span>)+<span class=\"number\">1</span>) limit&lt;&lt;=<span class=\"number\">1</span>,++l;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        rev[i]=(rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i) </span><br><span class=\"line\">        w[i]=Complex(<span class=\"built_in\">cos</span>(Pi*<span class=\"number\">2</span>/limit*i),<span class=\"built_in\">sin</span>(Pi*<span class=\"number\">2</span>/limit*i)),winv[i]=w[i].conj();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,q+i),A[i].real=q[i];</span><br><span class=\"line\">    prework(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        B[i].real=<span class=\"number\">1.0</span>/i/i;</span><br><span class=\"line\">    DFT(A,w,limit);DFT(B,w,limit);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Complex G[maxn],H[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        G[i]=A[i]*B[i];</span><br><span class=\"line\">    DFT(G,winv,limit);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        G[i].real/=limit;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::reverse(q,q+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        A[i]=Complex(q[i],<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// for (int i=0;i&lt;=n;++i)</span></span><br><span class=\"line\">    <span class=\"comment\">//     B[i]=Complex(1.0/(i+1)/(i+1),0);</span></span><br><span class=\"line\">    DFT(A,w,limit);</span><br><span class=\"line\">    <span class=\"comment\">// DFT(B,w,limit);</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        H[i]=A[i]*B[i];</span><br><span class=\"line\">    DFT(H,winv,limit);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        H[i].real/=limit;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.5lf\\n\"</span>,G[i].real-H[n-i].real);</span><br><span class=\"line\">    <span class=\"comment\">// while (~puts(\"\\a\"));</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>从今天开始，蒟蒻_WA自动机也要学多项式辣！虽然我什么都不会，但是好在我们机房有<del>HA A队队长</del>LCH<del>CTP_998244353</del>巨佬啊！<del>所以天天被巨佬爆踩</del></p>\n<h1 id=\"lg-P3723-AH-HNOI2017-礼物\"><a href=\"#lg-P3723-AH-HNOI2017-礼物\" class=\"headerlink\" title=\"lg P3723 [AH/HNOI2017]礼物\"></a><a href=\"https://www.luogu.org/problemnew/show/P3723\" target=\"_blank\" rel=\"noopener\">lg P3723</a> [AH/HNOI2017]礼物</h1><h2 id=\"题目大意\"><a href=\"#题目大意\" class=\"headerlink\" title=\"题目大意\"></a>题目大意</h2><p>两个长度为n的环形整数数列，您可以进行两种操作：</p>\n<ol>\n<li>对一个数列的所有数加上一个值C</li>\n<li>将一个数列旋转一位<br>定义两个数列的差异值为<br>$$\\sum_{i=1}^{n}(x_i-y_i)^2$$<br>求差异值的最小值。","more":"<h2 id=\"数据范围\"><a href=\"#数据范围\" class=\"headerlink\" title=\"数据范围\"></a>数据范围</h2>30%的数据满足$n≤500,m≤10$；<br>70%的数据满足$n≤5000$；<br>100%的数据满足$1≤n≤50000, 1≤m≤100, 1≤a_i≤m$。<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2>考虑如何使上式值最小<br>设给x序列加了一个数$C\\in \\mathbb{Z}$,则答案为$(x_i-y_i+C)^2$<br>拆掉上面的柿子..<br>$$(x_i-y_i+C)^2=x_i^2+y_i^2+C^2-2x_iy_i+2C(x_i-y_i)$$<br>柿子中除了$-2x_iy_i$都是定值，所以我们只需要最大化$x_iy_i$<br>这个非常像一个卷积..再看看数据范围，也是FFT的数据范围。。<br>对于这样的柿子我们通常的处理方法就是把一个序列翻转。这样就变成了卷积，可以$O(n \\log n)$算出值了。现在我们要最大化所有可能的这样的值，所以考虑断环为链，把A复制一遍接在末尾。算出来的$a[n+1..n+n]$就是所有可能的答案。<br>再考虑关于C的项，含有C的项总和为<br>$$nC^2-2C\\sum_{i=1}^{n}x_iy_i$$<br>这是关于C的二次函数，用对称轴就好了。注意C是整数，所以算出对称轴后要四舍五入取接近的整数。<br><strong>注意数学函数调用时一定要加std::，不然会出现奇怪的精度问题。。</strong><h3 id=\"我的代码（NTT实现\"><a href=\"#我的代码（NTT实现\" class=\"headerlink\" title=\"我的代码（NTT实现\"></a>我的代码（NTT实现</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::reverse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> P=<span class=\"number\">1004535809</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> g=<span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">4e6</span>+<span class=\"number\">2000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> A[maxn],B[maxn],limit=<span class=\"number\">1</span>,w[maxn],winv[maxn],rev[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a,<span class=\"keyword\">int</span> &amp; b)</span></span>&#123;a^=b^=a^=b;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">qpow</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">1</span>%p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>,a=(ll)a*a%p)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=(ll)ans*a%p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">prework</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (limit&lt;=(n+m+<span class=\"number\">1</span>)) limit&lt;&lt;=<span class=\"number\">1</span>,++l;</span><br><span class=\"line\">    w[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;w[<span class=\"number\">1</span>]=qpow(g,(P<span class=\"number\">-1</span>)/limit,P),winv[<span class=\"number\">0</span>]=<span class=\"number\">1</span>,winv[<span class=\"number\">1</span>]=qpow(w[<span class=\"number\">1</span>],P<span class=\"number\">-2</span>,P);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;limit;++i)</span><br><span class=\"line\">        w[i]=(ll)w[i<span class=\"number\">-1</span>]*w[<span class=\"number\">1</span>]%P,winv[i]=<span class=\"number\">1l</span>l*winv[i<span class=\"number\">-1</span>]*winv[<span class=\"number\">1</span>]%P;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;limit;++i)</span><br><span class=\"line\">        rev[i]=(rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> *w,<span class=\"keyword\">int</span> limit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;rev[i]) swap(A[i],A[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> mid=<span class=\"number\">1</span>;mid&lt;limit;mid&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> R=mid&lt;&lt;<span class=\"number\">1</span>,j=<span class=\"number\">0</span>;j&lt;limit;j+=R)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;mid;++k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x=A[j+k],y=(ll)A[j+k+mid]*w[limit/<span class=\"number\">2</span>/mid*k]%P;</span><br><span class=\"line\">                A[j+k]=(x+y)%P;A[j+mid+k]=(x-y+P)%P;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(<span class=\"keyword\">int</span> *A)</span></span>&#123; NTT(A,w,limit); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">IDFT</span><span class=\"params\">(<span class=\"keyword\">int</span> *A)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    NTT(A,winv,limit);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> inv=qpow(limit,P<span class=\"number\">-2</span>,P);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=limit;++i)</span><br><span class=\"line\">        A[i]=((ll)A[i]*inv)%P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// freopen(\"./4827/4827/10.in\",\"r\",stdin);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,A+i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,B+i);</span><br><span class=\"line\">    ll k=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        k+=A[i]-B[i];</span><br><span class=\"line\">    ll C=<span class=\"built_in\">std</span>::round((<span class=\"keyword\">double</span>)-k/n);</span><br><span class=\"line\">    ll tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        tot+=(ll)A[i]*A[i]+(ll)B[i]*B[i]+<span class=\"number\">2</span>*C*(A[i]-B[i])+C*C;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::reverse(A+<span class=\"number\">1</span>,A+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::copy(A+<span class=\"number\">1</span>,A+n+<span class=\"number\">1</span>,A+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    prework(n,<span class=\"number\">2</span>*n);</span><br><span class=\"line\">    DFT(A);DFT(B);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        A[i]=(ll)B[i]*A[i]%P;</span><br><span class=\"line\">    IDFT(A);</span><br><span class=\"line\">    ll ans=<span class=\"number\">-0x3f3f3f3f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[i+n]&gt;ans) ans=A[i+n];</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\"</span>,tot<span class=\"number\">-2</span>*ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"lg-P3338-ZJOI2014-力\"><a href=\"#lg-P3338-ZJOI2014-力\" class=\"headerlink\" title=\"lg P3338 [ZJOI2014]力\"></a><a href=\"https://www.luogu.org/problemnew/show/P3338\" target=\"_blank\" rel=\"noopener\">lg P3338</a> [ZJOI2014]力</h1><h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>给出$n$个数$q_i$，给出$F_j$的定义如下：</p>\n<p>$F_j = \\sum_{i&lt;j}\\frac{q_i q_j}{(i-j)^2 }-\\sum_{i&gt;j}\\frac{q_i q_j}{(i-j)^2 }$<br>令$E_i=F_i/q_i$，求$E_i$.</p>\n<h2 id=\"数据范围：\"><a href=\"#数据范围：\" class=\"headerlink\" title=\"数据范围：\"></a>数据范围：</h2><p>对于$30\\%$的数据，$n≤1000$。<br>对于$50\\%$的数据，$n≤60000$。<br>对于$100\\%$的数据，$n≤100000$，$0&lt;q_i&lt;1000000000$。</p>\n<h2 id=\"题解：-1\"><a href=\"#题解：-1\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><p>首先，珂以直接得到$E_i$的表达式：<br>$$E_i=\\sum_{j&lt;i}\\frac{q_j}{(i-j)^2}-\\sum_{j&gt;i}\\frac{q_j}{(i-j)^2}$$<br>分开考虑每一项：<br>两项的推导方式差不多，所以只用后面的那一项做栗子吧：<br>我们观察到这很像一个卷积的形式，所以我们考虑化成卷积：<br>设<br>$$G_i=\\sum_{j&gt;i}\\frac{q_j}{(i-j)^2}=\\sum_{j=i+1}^n\\frac{q_j}{(i-j)^2}$$<br>令$A_i=q_i,B_i=\\frac{1}{i^2}$<br>则上式珂变形为：<br>$$G_i=\\sum_{j=i+1}^n A_jB_{j-i}$$<br>看到A和B的下标和不是定值，考虑翻转系数：<br>$$G_i = \\sum_{j=i+1}^nA^R_{n-j}B_{j-i}$$<br>这时下标和是定值了，要化成卷积还要把sigma的上下标换一下：<br>平移j的取值范围：<br>$$G_i=\\sum_{j=1}^{n-i}A^R_{n-j+i}B_{j}$$<br>令$B_0=0$，此时j可以取到0，并将$G$翻转<br>$$G^R_i=\\sum_{j=0}^{i}A^R_{i-j}B_j$$<br>然后做卷积就珂以了！<br>代码:<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// luogu-judger-enable-o2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(<span class=\"meta-string\">\"-O3\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(<span class=\"meta-string\">\"-Ofast\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(<span class=\"meta-string\">\"-funroll-loops\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(<span class=\"meta-string\">\"-ffast-math\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> Pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">4e5</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> q[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> limit=<span class=\"number\">1</span>,rev[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> real,imag;</span><br><span class=\"line\">    Complex(<span class=\"keyword\">double</span> real,<span class=\"keyword\">double</span> imag):real(real),imag(imag)&#123;&#125;</span><br><span class=\"line\">    Complex()&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\">Complex <span class=\"title\">conj</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;w[maxn],winv[maxn],A[maxn],B[maxn],C[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> Complex Complex::conj()&#123;<span class=\"keyword\">return</span> Complex(real,-imag);&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Complex <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Complex&amp; a,<span class=\"keyword\">const</span> Complex&amp; b)&#123;<span class=\"keyword\">return</span> Complex(a.real+b.real,a.imag+b.imag);&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Complex <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> Complex&amp; a,<span class=\"keyword\">const</span> Complex&amp; b)&#123;<span class=\"keyword\">return</span> Complex(a.real-b.real,a.imag-b.imag);&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Complex <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> Complex&amp; a,<span class=\"keyword\">const</span> Complex&amp; b)&#123;<span class=\"keyword\">return</span> Complex(a.real*b.real-a.imag*b.imag,a.real*b.imag+a.imag*b.real);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T&amp; a,T&amp; b)</span></span>&#123;T t=a;a=b;b=t;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(Complex* A,Complex* w,<span class=\"keyword\">int</span> limit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;rev[i]) swap(A[i],A[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> mid=<span class=\"number\">1</span>;mid&lt;limit;mid&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> R=mid&lt;&lt;<span class=\"number\">1</span>,j=<span class=\"number\">0</span>;j&lt;limit;j+=R)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;mid;++k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Complex x=A[j+k],y=w[limit/mid/<span class=\"number\">2</span>*k]*A[j+mid+k];</span><br><span class=\"line\">                A[j+k]=x+y;</span><br><span class=\"line\">                A[j+mid+k]=x-y;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">prework</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (limit&lt;=(n&lt;&lt;<span class=\"number\">1</span>)+<span class=\"number\">1</span>) limit&lt;&lt;=<span class=\"number\">1</span>,++l;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        rev[i]=(rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i) </span><br><span class=\"line\">        w[i]=Complex(<span class=\"built_in\">cos</span>(Pi*<span class=\"number\">2</span>/limit*i),<span class=\"built_in\">sin</span>(Pi*<span class=\"number\">2</span>/limit*i)),winv[i]=w[i].conj();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,q+i),A[i].real=q[i];</span><br><span class=\"line\">    prework(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        B[i].real=<span class=\"number\">1.0</span>/i/i;</span><br><span class=\"line\">    DFT(A,w,limit);DFT(B,w,limit);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Complex G[maxn],H[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        G[i]=A[i]*B[i];</span><br><span class=\"line\">    DFT(G,winv,limit);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        G[i].real/=limit;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::reverse(q,q+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        A[i]=Complex(q[i],<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// for (int i=0;i&lt;=n;++i)</span></span><br><span class=\"line\">    <span class=\"comment\">//     B[i]=Complex(1.0/(i+1)/(i+1),0);</span></span><br><span class=\"line\">    DFT(A,w,limit);</span><br><span class=\"line\">    <span class=\"comment\">// DFT(B,w,limit);</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        H[i]=A[i]*B[i];</span><br><span class=\"line\">    DFT(H,winv,limit);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        H[i].real/=limit;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.5lf\\n\"</span>,G[i].real-H[n-i].real);</span><br><span class=\"line\">    <span class=\"comment\">// while (~puts(\"\\a\"));</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"可持久化平衡树","date":"2018-07-21T06:04:18.000Z","comments":1,"_content":"","source":"_posts/可持久化平衡树.md","raw":"---\ntitle: 可持久化平衡树\ndate: 2018-07-21 14:04:18\ntags: \n     - 可持久化\n     - 平衡树\n     - 可持久化平衡树\ncategories: \n     - 学习笔记\ncomments: true\n---\n","slug":"可持久化平衡树","published":1,"updated":"2018-07-21T08:43:00.033Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm220016v4ty7voz9uw5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"点分治","date":"2018-07-19T23:50:31.000Z","comments":1,"_content":"\n","source":"_posts/点分治.md","raw":"---\ntitle: 点分治\ndate: 2018-07-20 07:50:31\ntags: \n     - 点分治\n     - 分治\ncategories: \n     - 学习笔记\ncomments: true\n---\n\n","slug":"点分治","published":1,"updated":"2018-07-21T08:43:05.803Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm24001av4ty48d4tnqp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"虚树","date":"2018-07-21T06:03:42.000Z","comments":1,"_content":"","source":"_posts/虚树.md","raw":"---\ntitle: 虚树\ndate: 2018-07-21 14:03:42\ntags: \n     - 虚树\n     - 动态规划\ncategories: \n     - 学习笔记\ncomments: true\n---\n","slug":"虚树","published":1,"updated":"2018-07-21T08:42:48.158Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm25001cv4tyyk0iy097","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"平衡树总结","date":"2018-07-21T06:04:58.000Z","comments":1,"_content":"\n## BST：\n\n#### 概念：\n\nBST(Binary Search Tree)：二叉排序树或者是一棵空树，或者是具有下列性质的[二叉树](https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%A0%91)：\n\n* 若左子树不空，则左子树上所有结点的值均小于或等于它的[根结](https://baike.baidu.com/item/%E6%A0%B9%E7%BB%93)点的值；\n\n* 若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；\n\n* 左、右子树也分别为二叉排序树。\n\n  <!-- more -->\n\n#### 应用：\n\n在BST上可以进行这样的操作：\n\n1. 插入 $x$数\n2. 删除 $x$ 数(若有多个相同的数，因只删除一个)\n3. 查询 $x$ 数的排名(排名定义为比当前数小的数的个数 +1+1 。若有多个相同的数，因输出最小的排名)\n4. 查询排名为 $ x$ 的数\n5. 求 $x$ 的前驱(前驱定义为小于 $x$，且最大的数)\n6. 求 $x$ 的后继(后继定义为大于 $x$，且最小的数)  \n\n#### 实现：\n\n**(1.2操作略，s为子树大小)**\n\n3.求排名\n\n```cpp\nint rank(int x,node* o=root)\n{\n\tif (!o) return INT_MAX;\n\tint s=o->ch[0]?o->ch[0]->s:0;\n\tif (o->v==x) return s+1;\n\tif (o->v>x) return rank(x,o->ch[0]);\n\tif (o->v<x) return rank(x,o->ch[1])+s+o->cnt; \n}\n```\n\n4.求第k大\n\n```cpp\nint kth(int k,node* o=root)\n{\n\tif (!o) return INT_MIN;\n\tint s=o->ch[0]?o->ch[0]->s:0;\n\tif (k>s && k<=s+o->cnt) return o->v;\n\tif (k<=s) return kth(k,o->ch[0]);\n\treturn kth(k-s-o->cnt,o->ch[1]);\n}\n```\n\n5.求前驱\n\n```cpp\n//全局变量prec\nvoid pre(int x,node* o=root)\n{\n\tif (!o) return;\n\tif (o->v>prec && o->v<x) prec=o->v;\n\tif (o->v>=x) pre(x,o->ch[0]);\n\t\telse pre(x,o->ch[1]); \n}\n```\n\n6.求后继\n\n```cpp\n//全局变量succ\nvoid suc(int x,node* o=root)\n{\n\tif (!o) return;\n\tif (o->v<succ && o->v>x) succ=o->v;\n\tif (o->v<=x) suc(x,o->ch[1]);\n\t\telse suc(x,o->ch[0]);\n}\n```\n\n## 平衡树\n\n随机数据下，树期望高度为$O(\\log n)$。所以，当树平衡时，所有这些操作时间都为$O(\\log n)$。但树不一定平衡：按递增或递减顺序插入元素，树就会退化成一条链。在实际应用中，树几乎不会非常平衡。所以，朴素BST表现不佳。\n\n易知，元素相同的BST可能有多种形态（朴素BST的形态与插入顺序有关）。我们我们采用一些方式来使BST的形态发生变化，但仍然为合法BST。这样树就变得平衡。\n\n常见的BST有**Splay，Treap，替罪羊树**，红黑树，SBT等。\n\n~~还有权值线段树、01trie、跳表等~~\n\n大多数BST基于旋转操作。\n\n#### 旋转：  \n\n令一个节点换到它的父亲位置上。为了维护BST性质，节点的子节点的位置也会跟着发生变化。\n\n原来是这样：![](https://cdn.luogu.org/upload/pic/26185.png)\n\n现在是这样：\n\n![](https://cdn.luogu.org/upload/pic/26186.png)\n\n> 令x为被旋转节点，y为其父亲，则：  \n\n<font color=#EE0000>\n\n1.  x变到原来y的位置\n\n2.  y与x的位置关系与原来x与y的位置关系相反（如：x为y的左儿子，则后来y为x的右儿子）\n\n3.  y非x的儿子不变，x的与x.y共线的儿子不变\n\n4. 原来x位置的节点变成了x的与x.y不共线的儿子\n\n   </font>\n\n代码实现大概是这个样子(建议假设x是左儿子来理解,此时k==0)：\n\n```cpp\n//数组版：\ninline void rotate(int x)\n{//把x旋转到爸爸的位置\n    int y=f[x],z=f[y],k=(c[y][1]==x),w=c[x][!k];//k是x相对y的位置，w是x的不与x.y共线的儿子\n    c[z][c[z][1]==y]=x;//x变到原来y的位置\n    c[x][!k]=y;//x为y的左儿子，则后来y为x的右儿子\n    c[y][k]=w;//原来x位置的节点变成了x的与xy不共线的儿子\n    if(w)f[w]=y;//更新父亲，下同\n    f[y]=x;f[x]=z;\n    pushup(y);pushup(x);//只有x.y的子树信息发生改变\n}\n//指针版：\nvoid rotate(node* &o,int d)\n{//o为根，d=0表示右儿子左旋，d=1表示左儿子右旋。此版本未维护父亲指针。\n\tnode* k=o->ch[d^1];\n\to->ch[d^1]=k->ch[d];\n\tk->ch[d]=o;\n\to->pushup();\n\tk->pushup();\n\to=k;\n}\n```\n\n~~数组和指针操作明显不同是因为我学习时抄的模板不是一个人写的~~\n\n### Treap\n\n* Treap=Tree+Heap\n\ntreap的每个节点有一个随机的优先级。对于键值而言，它是BST；对于优先级而言，它是堆（即，每棵子树中，根的优先级总是最大的）。因为优先级随机，所以树期望平衡。虽然基于随机，但不容易被卡掉，跑得也很快。\n\n我采用刘汝佳式的指针写法，节点定义如下：\n\n```cpp\nstruct node\n{\n\tint v,cnt,rank,s;//cnt是重复元素个数，rank为优先级，s为子树大小。\n\tnode *ch[2];\n\tnode(int v):v(v),cnt(1),s(1),rank(rand()){ch[0]=ch[1]=0;}\n\tvoid pushup()\n\t{\n\t\ts=cnt;\n\t\tif (ch[0]) s+=ch[0]->s;\n\t\tif (ch[1]) s+=ch[1]->s;\n\t}\n\tint cmp(int x)\n\t{\n\t\tif (x==v) return -1;\n\t\treturn v<x;\n\t}\n}*root;\n```\n\n#### insert\n\ninsert操作基本思想为dfs找到新节点应该在的位置并新建该节点，然后回溯判断是否违反堆性质并通过旋转维护堆性质。（注意对重复元素的处理）\n\n```cpp\nvoid insert(node* &o,int v)\n{\n\tif (!o) {o=new node(v);return;}\n\tint d=o->cmp(v);\n\tif (d==-1) {++o->cnt;++o->s;return;}\n\tinsert(o->ch[d],v);\n\tif (o->ch[d]->rank>o->rank) rotate(o,d^1);\n\to->pushup();\n}\n```\n\n#### remove\n\n当要删除的节点只有一个儿子时，删除操作很简单：直接用这个儿子代替它即可。remove操作正是基于这样的理念：将要删除的节点向下转到有至少一棵子树为空，然后删除。若有子树非空，则用非空的儿子代替它。\n\n```cpp\nvoid remove(node* &o,int v)\n{\n    //if (!o) return;\n\tint d=o->cmp(v);\n\tif (d==-1)\n\t{\n\t\tif (o->cnt>1) {--o->cnt;--o->s;return;}\n\t\tif (!(o->ch[0])) {node* k=o;o=o->ch[1];delete k;}\n\t\telse if (!(o->ch[1])) {node* k=o;o=o->ch[0];delete k;}\n\t\telse\n\t\t{\n\t\t\tint d2=o->ch[0]->rank>o->ch[1]->rank;\n\t\t\trotate(o,d2);\n\t\t\tremove(o->ch[d2],v);\n\t\t}\n\t}\n\telse remove(o->ch[d],v);\n\tif (o) o->pushup();\n}\n```\n\n完整实现如下：\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cctype>\n#include<climits>\n#include<cstdlib>\n#include<ctime>\nstruct node\n{\n\tint v,cnt,rank,s;\n\tnode *ch[2];\n\tnode(int v):v(v),cnt(1),s(1),rank(rand()){ch[0]=ch[1]=0;}\n\tvoid pushup()\n\t{\n\t\ts=cnt;\n\t\tif (ch[0]) s+=ch[0]->s;\n\t\tif (ch[1]) s+=ch[1]->s;\n\t}\n\tint cmp(int x)\n\t{\n\t\tif (x==v) return -1;\n\t\treturn v<x;\n\t}\n}*root;\nvoid rotate(node* &o,int d)\n{\n\tnode* k=o->ch[d^1];\n\to->ch[d^1]=k->ch[d];\n\tk->ch[d]=o;\n\to->pushup();\n\tk->pushup();\n\to=k;\n}\nvoid insert(node* &o,int v)\n{\n\tif (!o) {o=new node(v);return;}\n\tint d=o->cmp(v);\n\tif (d==-1) {++o->cnt;++o->s;return;}\n\tinsert(o->ch[d],v);\n\tif (o->ch[d]->rank>o->rank) rotate(o,d^1);\n\to->pushup();\n}\nvoid remove(node* &o,int v)\n{\n\tint d=o->cmp(v);\n\tif (d==-1)\n\t{\n\t\tif (o->cnt>1) {--o->cnt;--o->s;return;}\n\t\tif (!(o->ch[0])) {node* k=o;o=o->ch[1];delete k;}\n\t\telse if (!(o->ch[1])) {node* k=o;o=o->ch[0];delete k;}\n\t\telse\n\t\t{\n\t\t\tint d2=o->ch[0]->rank>o->ch[1]->rank;\n\t\t\trotate(o,d2);\n\t\t\tremove(o->ch[d2],v);\n\t\t}\n\t}\n\telse remove(o->ch[d],v);\n\tif (o) o->pushup();\n}\nint rank(int x,node* o=root)\n{\n\tif (!o) return INT_MAX;\n\tint s=o->ch[0]?o->ch[0]->s:0;\n\tif (o->v==x) return s+1;\n\tif (o->v>x) return rank(x,o->ch[0]);\n\tif (o->v<x) return rank(x,o->ch[1])+s+o->cnt; \n}\nint kth(int k,node* o=root)\n{\n\tif (!o) return INT_MIN;\n\tint s=o->ch[0]?o->ch[0]->s:0;\n\tif (k>s && k<=s+o->cnt) return o->v;\n\tif (k<=s) return kth(k,o->ch[0]);\n\treturn kth(k-s-o->cnt,o->ch[1]);\n}\nint prec,succ;\nvoid pre(int x,node* o=root)\n{\n\tif (!o) return;\n\tif (o->v>prec && o->v<x) prec=o->v;\n\tif (o->v>=x) pre(x,o->ch[0]);\n\t\telse pre(x,o->ch[1]); \n}\nvoid suc(int x,node* o=root)\n{\n\tif (!o) return;\n\tif (o->v<succ && o->v>x) succ=o->v;\n\tif (o->v<=x) suc(x,o->ch[1]);\n\t\telse suc(x,o->ch[0]);\n}\nint main()\n{\n\t//freopen(\"phs.in\",\"r\",stdin);\n\t//freopen(\"phs.out\",\"w\",stdout);\n\tsrand(time(0));\n\tint n;\n\tint opt,x;\n\tscanf(\"%d\",&n);\n\twhile (n--)\n\t{\n\t\tscanf(\"%d%d\",&opt,&x);\n\t\tswitch (opt)\n\t\t{\n\t\t\tcase 1:insert(root,x);break;\n\t\t\tcase 2:remove(root,x);break;\n\t\t\tcase 3:printf(\"%d\\n\",rank(x));break;\n\t\t\tcase 4:printf(\"%d\\n\",kth(x));break;\n\t\t\tcase 5:prec=INT_MIN;pre(x);printf(\"%d\\n\",prec);break;\n\t\t\tcase 6:succ=INT_MAX;suc(x);printf(\"%d\\n\",succ);\n\t\t}\n\t}\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n```\n\n\n\n### Splay\n\nSplay最核心的操作为splay操作。它把一个节点旋转到指定位置。~~因为指针Splay太麻烦会调死人~~，我们采用数组实现。","source":"_posts/替罪羊树.md","raw":"---\ntitle: 平衡树总结\ndate: 2018-07-21 14:04:58\ntags: \n     - 暴力\n     - 平衡树\n     - 替罪羊树\n     - splay\n     - treap\n     - 可持久化平衡树\ncategories: \n     - 学习笔记\ncomments: true\n---\n\n## BST：\n\n#### 概念：\n\nBST(Binary Search Tree)：二叉排序树或者是一棵空树，或者是具有下列性质的[二叉树](https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%A0%91)：\n\n* 若左子树不空，则左子树上所有结点的值均小于或等于它的[根结](https://baike.baidu.com/item/%E6%A0%B9%E7%BB%93)点的值；\n\n* 若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；\n\n* 左、右子树也分别为二叉排序树。\n\n  <!-- more -->\n\n#### 应用：\n\n在BST上可以进行这样的操作：\n\n1. 插入 $x$数\n2. 删除 $x$ 数(若有多个相同的数，因只删除一个)\n3. 查询 $x$ 数的排名(排名定义为比当前数小的数的个数 +1+1 。若有多个相同的数，因输出最小的排名)\n4. 查询排名为 $ x$ 的数\n5. 求 $x$ 的前驱(前驱定义为小于 $x$，且最大的数)\n6. 求 $x$ 的后继(后继定义为大于 $x$，且最小的数)  \n\n#### 实现：\n\n**(1.2操作略，s为子树大小)**\n\n3.求排名\n\n```cpp\nint rank(int x,node* o=root)\n{\n\tif (!o) return INT_MAX;\n\tint s=o->ch[0]?o->ch[0]->s:0;\n\tif (o->v==x) return s+1;\n\tif (o->v>x) return rank(x,o->ch[0]);\n\tif (o->v<x) return rank(x,o->ch[1])+s+o->cnt; \n}\n```\n\n4.求第k大\n\n```cpp\nint kth(int k,node* o=root)\n{\n\tif (!o) return INT_MIN;\n\tint s=o->ch[0]?o->ch[0]->s:0;\n\tif (k>s && k<=s+o->cnt) return o->v;\n\tif (k<=s) return kth(k,o->ch[0]);\n\treturn kth(k-s-o->cnt,o->ch[1]);\n}\n```\n\n5.求前驱\n\n```cpp\n//全局变量prec\nvoid pre(int x,node* o=root)\n{\n\tif (!o) return;\n\tif (o->v>prec && o->v<x) prec=o->v;\n\tif (o->v>=x) pre(x,o->ch[0]);\n\t\telse pre(x,o->ch[1]); \n}\n```\n\n6.求后继\n\n```cpp\n//全局变量succ\nvoid suc(int x,node* o=root)\n{\n\tif (!o) return;\n\tif (o->v<succ && o->v>x) succ=o->v;\n\tif (o->v<=x) suc(x,o->ch[1]);\n\t\telse suc(x,o->ch[0]);\n}\n```\n\n## 平衡树\n\n随机数据下，树期望高度为$O(\\log n)$。所以，当树平衡时，所有这些操作时间都为$O(\\log n)$。但树不一定平衡：按递增或递减顺序插入元素，树就会退化成一条链。在实际应用中，树几乎不会非常平衡。所以，朴素BST表现不佳。\n\n易知，元素相同的BST可能有多种形态（朴素BST的形态与插入顺序有关）。我们我们采用一些方式来使BST的形态发生变化，但仍然为合法BST。这样树就变得平衡。\n\n常见的BST有**Splay，Treap，替罪羊树**，红黑树，SBT等。\n\n~~还有权值线段树、01trie、跳表等~~\n\n大多数BST基于旋转操作。\n\n#### 旋转：  \n\n令一个节点换到它的父亲位置上。为了维护BST性质，节点的子节点的位置也会跟着发生变化。\n\n原来是这样：![](https://cdn.luogu.org/upload/pic/26185.png)\n\n现在是这样：\n\n![](https://cdn.luogu.org/upload/pic/26186.png)\n\n> 令x为被旋转节点，y为其父亲，则：  \n\n<font color=#EE0000>\n\n1.  x变到原来y的位置\n\n2.  y与x的位置关系与原来x与y的位置关系相反（如：x为y的左儿子，则后来y为x的右儿子）\n\n3.  y非x的儿子不变，x的与x.y共线的儿子不变\n\n4. 原来x位置的节点变成了x的与x.y不共线的儿子\n\n   </font>\n\n代码实现大概是这个样子(建议假设x是左儿子来理解,此时k==0)：\n\n```cpp\n//数组版：\ninline void rotate(int x)\n{//把x旋转到爸爸的位置\n    int y=f[x],z=f[y],k=(c[y][1]==x),w=c[x][!k];//k是x相对y的位置，w是x的不与x.y共线的儿子\n    c[z][c[z][1]==y]=x;//x变到原来y的位置\n    c[x][!k]=y;//x为y的左儿子，则后来y为x的右儿子\n    c[y][k]=w;//原来x位置的节点变成了x的与xy不共线的儿子\n    if(w)f[w]=y;//更新父亲，下同\n    f[y]=x;f[x]=z;\n    pushup(y);pushup(x);//只有x.y的子树信息发生改变\n}\n//指针版：\nvoid rotate(node* &o,int d)\n{//o为根，d=0表示右儿子左旋，d=1表示左儿子右旋。此版本未维护父亲指针。\n\tnode* k=o->ch[d^1];\n\to->ch[d^1]=k->ch[d];\n\tk->ch[d]=o;\n\to->pushup();\n\tk->pushup();\n\to=k;\n}\n```\n\n~~数组和指针操作明显不同是因为我学习时抄的模板不是一个人写的~~\n\n### Treap\n\n* Treap=Tree+Heap\n\ntreap的每个节点有一个随机的优先级。对于键值而言，它是BST；对于优先级而言，它是堆（即，每棵子树中，根的优先级总是最大的）。因为优先级随机，所以树期望平衡。虽然基于随机，但不容易被卡掉，跑得也很快。\n\n我采用刘汝佳式的指针写法，节点定义如下：\n\n```cpp\nstruct node\n{\n\tint v,cnt,rank,s;//cnt是重复元素个数，rank为优先级，s为子树大小。\n\tnode *ch[2];\n\tnode(int v):v(v),cnt(1),s(1),rank(rand()){ch[0]=ch[1]=0;}\n\tvoid pushup()\n\t{\n\t\ts=cnt;\n\t\tif (ch[0]) s+=ch[0]->s;\n\t\tif (ch[1]) s+=ch[1]->s;\n\t}\n\tint cmp(int x)\n\t{\n\t\tif (x==v) return -1;\n\t\treturn v<x;\n\t}\n}*root;\n```\n\n#### insert\n\ninsert操作基本思想为dfs找到新节点应该在的位置并新建该节点，然后回溯判断是否违反堆性质并通过旋转维护堆性质。（注意对重复元素的处理）\n\n```cpp\nvoid insert(node* &o,int v)\n{\n\tif (!o) {o=new node(v);return;}\n\tint d=o->cmp(v);\n\tif (d==-1) {++o->cnt;++o->s;return;}\n\tinsert(o->ch[d],v);\n\tif (o->ch[d]->rank>o->rank) rotate(o,d^1);\n\to->pushup();\n}\n```\n\n#### remove\n\n当要删除的节点只有一个儿子时，删除操作很简单：直接用这个儿子代替它即可。remove操作正是基于这样的理念：将要删除的节点向下转到有至少一棵子树为空，然后删除。若有子树非空，则用非空的儿子代替它。\n\n```cpp\nvoid remove(node* &o,int v)\n{\n    //if (!o) return;\n\tint d=o->cmp(v);\n\tif (d==-1)\n\t{\n\t\tif (o->cnt>1) {--o->cnt;--o->s;return;}\n\t\tif (!(o->ch[0])) {node* k=o;o=o->ch[1];delete k;}\n\t\telse if (!(o->ch[1])) {node* k=o;o=o->ch[0];delete k;}\n\t\telse\n\t\t{\n\t\t\tint d2=o->ch[0]->rank>o->ch[1]->rank;\n\t\t\trotate(o,d2);\n\t\t\tremove(o->ch[d2],v);\n\t\t}\n\t}\n\telse remove(o->ch[d],v);\n\tif (o) o->pushup();\n}\n```\n\n完整实现如下：\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<cctype>\n#include<climits>\n#include<cstdlib>\n#include<ctime>\nstruct node\n{\n\tint v,cnt,rank,s;\n\tnode *ch[2];\n\tnode(int v):v(v),cnt(1),s(1),rank(rand()){ch[0]=ch[1]=0;}\n\tvoid pushup()\n\t{\n\t\ts=cnt;\n\t\tif (ch[0]) s+=ch[0]->s;\n\t\tif (ch[1]) s+=ch[1]->s;\n\t}\n\tint cmp(int x)\n\t{\n\t\tif (x==v) return -1;\n\t\treturn v<x;\n\t}\n}*root;\nvoid rotate(node* &o,int d)\n{\n\tnode* k=o->ch[d^1];\n\to->ch[d^1]=k->ch[d];\n\tk->ch[d]=o;\n\to->pushup();\n\tk->pushup();\n\to=k;\n}\nvoid insert(node* &o,int v)\n{\n\tif (!o) {o=new node(v);return;}\n\tint d=o->cmp(v);\n\tif (d==-1) {++o->cnt;++o->s;return;}\n\tinsert(o->ch[d],v);\n\tif (o->ch[d]->rank>o->rank) rotate(o,d^1);\n\to->pushup();\n}\nvoid remove(node* &o,int v)\n{\n\tint d=o->cmp(v);\n\tif (d==-1)\n\t{\n\t\tif (o->cnt>1) {--o->cnt;--o->s;return;}\n\t\tif (!(o->ch[0])) {node* k=o;o=o->ch[1];delete k;}\n\t\telse if (!(o->ch[1])) {node* k=o;o=o->ch[0];delete k;}\n\t\telse\n\t\t{\n\t\t\tint d2=o->ch[0]->rank>o->ch[1]->rank;\n\t\t\trotate(o,d2);\n\t\t\tremove(o->ch[d2],v);\n\t\t}\n\t}\n\telse remove(o->ch[d],v);\n\tif (o) o->pushup();\n}\nint rank(int x,node* o=root)\n{\n\tif (!o) return INT_MAX;\n\tint s=o->ch[0]?o->ch[0]->s:0;\n\tif (o->v==x) return s+1;\n\tif (o->v>x) return rank(x,o->ch[0]);\n\tif (o->v<x) return rank(x,o->ch[1])+s+o->cnt; \n}\nint kth(int k,node* o=root)\n{\n\tif (!o) return INT_MIN;\n\tint s=o->ch[0]?o->ch[0]->s:0;\n\tif (k>s && k<=s+o->cnt) return o->v;\n\tif (k<=s) return kth(k,o->ch[0]);\n\treturn kth(k-s-o->cnt,o->ch[1]);\n}\nint prec,succ;\nvoid pre(int x,node* o=root)\n{\n\tif (!o) return;\n\tif (o->v>prec && o->v<x) prec=o->v;\n\tif (o->v>=x) pre(x,o->ch[0]);\n\t\telse pre(x,o->ch[1]); \n}\nvoid suc(int x,node* o=root)\n{\n\tif (!o) return;\n\tif (o->v<succ && o->v>x) succ=o->v;\n\tif (o->v<=x) suc(x,o->ch[1]);\n\t\telse suc(x,o->ch[0]);\n}\nint main()\n{\n\t//freopen(\"phs.in\",\"r\",stdin);\n\t//freopen(\"phs.out\",\"w\",stdout);\n\tsrand(time(0));\n\tint n;\n\tint opt,x;\n\tscanf(\"%d\",&n);\n\twhile (n--)\n\t{\n\t\tscanf(\"%d%d\",&opt,&x);\n\t\tswitch (opt)\n\t\t{\n\t\t\tcase 1:insert(root,x);break;\n\t\t\tcase 2:remove(root,x);break;\n\t\t\tcase 3:printf(\"%d\\n\",rank(x));break;\n\t\t\tcase 4:printf(\"%d\\n\",kth(x));break;\n\t\t\tcase 5:prec=INT_MIN;pre(x);printf(\"%d\\n\",prec);break;\n\t\t\tcase 6:succ=INT_MAX;suc(x);printf(\"%d\\n\",succ);\n\t\t}\n\t}\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n```\n\n\n\n### Splay\n\nSplay最核心的操作为splay操作。它把一个节点旋转到指定位置。~~因为指针Splay太麻烦会调死人~~，我们采用数组实现。","slug":"替罪羊树","published":1,"updated":"2019-01-21T23:35:32.187Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm3g002uv4typl45ydha","content":"<h2 id=\"BST：\"><a href=\"#BST：\" class=\"headerlink\" title=\"BST：\"></a>BST：</h2><h4 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h4><p>BST(Binary Search Tree)：二叉排序树或者是一棵空树，或者是具有下列性质的<a href=\"https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%A0%91\" target=\"_blank\" rel=\"noopener\">二叉树</a>：</p>\n<ul>\n<li><p>若左子树不空，则左子树上所有结点的值均小于或等于它的<a href=\"https://baike.baidu.com/item/%E6%A0%B9%E7%BB%93\" target=\"_blank\" rel=\"noopener\">根结</a>点的值；</p>\n</li>\n<li><p>若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；</p>\n</li>\n<li><p>左、右子树也分别为二叉排序树。</p>\n<a id=\"more\"></a>\n</li>\n</ul>\n<h4 id=\"应用：\"><a href=\"#应用：\" class=\"headerlink\" title=\"应用：\"></a>应用：</h4><p>在BST上可以进行这样的操作：</p>\n<ol>\n<li>插入 $x$数</li>\n<li>删除 $x$ 数(若有多个相同的数，因只删除一个)</li>\n<li>查询 $x$ 数的排名(排名定义为比当前数小的数的个数 +1+1 。若有多个相同的数，因输出最小的排名)</li>\n<li>查询排名为 $ x$ 的数</li>\n<li>求 $x$ 的前驱(前驱定义为小于 $x$，且最大的数)</li>\n<li>求 $x$ 的后继(后继定义为大于 $x$，且最小的数)  </li>\n</ol>\n<h4 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a>实现：</h4><p><strong>(1.2操作略，s为子树大小)</strong></p>\n<p>3.求排名</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(<span class=\"keyword\">int</span> x,node* o=root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s=o-&gt;ch[<span class=\"number\">0</span>]?o-&gt;ch[<span class=\"number\">0</span>]-&gt;s:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v==x) <span class=\"keyword\">return</span> s+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&gt;x) <span class=\"keyword\">return</span> rank(x,o-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&lt;x) <span class=\"keyword\">return</span> rank(x,o-&gt;ch[<span class=\"number\">1</span>])+s+o-&gt;cnt; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.求第k大</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> k,node* o=root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> INT_MIN;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s=o-&gt;ch[<span class=\"number\">0</span>]?o-&gt;ch[<span class=\"number\">0</span>]-&gt;s:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k&gt;s &amp;&amp; k&lt;=s+o-&gt;cnt) <span class=\"keyword\">return</span> o-&gt;v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k&lt;=s) <span class=\"keyword\">return</span> kth(k,o-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kth(k-s-o-&gt;cnt,o-&gt;ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5.求前驱</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局变量prec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pre</span><span class=\"params\">(<span class=\"keyword\">int</span> x,node* o=root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&gt;prec &amp;&amp; o-&gt;v&lt;x) prec=o-&gt;v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&gt;=x) pre(x,o-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> pre(x,o-&gt;ch[<span class=\"number\">1</span>]); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>6.求后继</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局变量succ</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">suc</span><span class=\"params\">(<span class=\"keyword\">int</span> x,node* o=root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&lt;succ &amp;&amp; o-&gt;v&gt;x) succ=o-&gt;v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&lt;=x) suc(x,o-&gt;ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> suc(x,o-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"平衡树\"><a href=\"#平衡树\" class=\"headerlink\" title=\"平衡树\"></a>平衡树</h2><p>随机数据下，树期望高度为$O(\\log n)$。所以，当树平衡时，所有这些操作时间都为$O(\\log n)$。但树不一定平衡：按递增或递减顺序插入元素，树就会退化成一条链。在实际应用中，树几乎不会非常平衡。所以，朴素BST表现不佳。</p>\n<p>易知，元素相同的BST可能有多种形态（朴素BST的形态与插入顺序有关）。我们我们采用一些方式来使BST的形态发生变化，但仍然为合法BST。这样树就变得平衡。</p>\n<p>常见的BST有<strong>Splay，Treap，替罪羊树</strong>，红黑树，SBT等。</p>\n<p><del>还有权值线段树、01trie、跳表等</del></p>\n<p>大多数BST基于旋转操作。</p>\n<h4 id=\"旋转：\"><a href=\"#旋转：\" class=\"headerlink\" title=\"旋转：\"></a>旋转：</h4><p>令一个节点换到它的父亲位置上。为了维护BST性质，节点的子节点的位置也会跟着发生变化。</p>\n<p>原来是这样：<img src=\"https://cdn.luogu.org/upload/pic/26185.png\" alt></p>\n<p>现在是这样：</p>\n<p><img src=\"https://cdn.luogu.org/upload/pic/26186.png\" alt></p>\n<blockquote>\n<p>令x为被旋转节点，y为其父亲，则：  </p>\n</blockquote>\n<font color=\"#EE0000\"><br><br>1.  x变到原来y的位置<br><br>2.  y与x的位置关系与原来x与y的位置关系相反（如：x为y的左儿子，则后来y为x的右儿子）<br><br>3.  y非x的儿子不变，x的与x.y共线的儿子不变<br><br>4. 原来x位置的节点变成了x的与x.y不共线的儿子<br><br>   </font>\n\n<p>代码实现大概是这个样子(建议假设x是左儿子来理解,此时k==0)：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数组版：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"comment\">//把x旋转到爸爸的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> y=f[x],z=f[y],k=(c[y][<span class=\"number\">1</span>]==x),w=c[x][!k];<span class=\"comment\">//k是x相对y的位置，w是x的不与x.y共线的儿子</span></span><br><span class=\"line\">    c[z][c[z][<span class=\"number\">1</span>]==y]=x;<span class=\"comment\">//x变到原来y的位置</span></span><br><span class=\"line\">    c[x][!k]=y;<span class=\"comment\">//x为y的左儿子，则后来y为x的右儿子</span></span><br><span class=\"line\">    c[y][k]=w;<span class=\"comment\">//原来x位置的节点变成了x的与xy不共线的儿子</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(w)f[w]=y;<span class=\"comment\">//更新父亲，下同</span></span><br><span class=\"line\">    f[y]=x;f[x]=z;</span><br><span class=\"line\">    pushup(y);pushup(x);<span class=\"comment\">//只有x.y的子树信息发生改变</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//指针版：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(node* &amp;o,<span class=\"keyword\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"comment\">//o为根，d=0表示右儿子左旋，d=1表示左儿子右旋。此版本未维护父亲指针。</span></span><br><span class=\"line\">    node* k=o-&gt;ch[d^<span class=\"number\">1</span>];</span><br><span class=\"line\">    o-&gt;ch[d^<span class=\"number\">1</span>]=k-&gt;ch[d];</span><br><span class=\"line\">    k-&gt;ch[d]=o;</span><br><span class=\"line\">    o-&gt;pushup();</span><br><span class=\"line\">    k-&gt;pushup();</span><br><span class=\"line\">    o=k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><del>数组和指针操作明显不同是因为我学习时抄的模板不是一个人写的</del></p>\n<h3 id=\"Treap\"><a href=\"#Treap\" class=\"headerlink\" title=\"Treap\"></a>Treap</h3><ul>\n<li>Treap=Tree+Heap</li>\n</ul>\n<p>treap的每个节点有一个随机的优先级。对于键值而言，它是BST；对于优先级而言，它是堆（即，每棵子树中，根的优先级总是最大的）。因为优先级随机，所以树期望平衡。虽然基于随机，但不容易被卡掉，跑得也很快。</p>\n<p>我采用刘汝佳式的指针写法，节点定义如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v,cnt,rank,s;<span class=\"comment\">//cnt是重复元素个数，rank为优先级，s为子树大小。</span></span><br><span class=\"line\">    node *ch[<span class=\"number\">2</span>];</span><br><span class=\"line\">    node(<span class=\"keyword\">int</span> v):v(v),cnt(<span class=\"number\">1</span>),s(<span class=\"number\">1</span>),rank(rand())&#123;ch[<span class=\"number\">0</span>]=ch[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">        s=cnt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[<span class=\"number\">0</span>]) s+=ch[<span class=\"number\">0</span>]-&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[<span class=\"number\">1</span>]) s+=ch[<span class=\"number\">1</span>]-&gt;s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x==v) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v&lt;x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;*root;</span><br></pre></td></tr></table></figure>\n<h4 id=\"insert\"><a href=\"#insert\" class=\"headerlink\" title=\"insert\"></a>insert</h4><p>insert操作基本思想为dfs找到新节点应该在的位置并新建该节点，然后回溯判断是否违反堆性质并通过旋转维护堆性质。（注意对重复元素的处理）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(node* &amp;o,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) &#123;o=<span class=\"keyword\">new</span> node(v);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> d=o-&gt;cmp(v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d==<span class=\"number\">-1</span>) &#123;++o-&gt;cnt;++o-&gt;s;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    insert(o-&gt;ch[d],v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;ch[d]-&gt;rank&gt;o-&gt;rank) rotate(o,d^<span class=\"number\">1</span>);</span><br><span class=\"line\">    o-&gt;pushup();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove\"></a>remove</h4><p>当要删除的节点只有一个儿子时，删除操作很简单：直接用这个儿子代替它即可。remove操作正是基于这样的理念：将要删除的节点向下转到有至少一棵子树为空，然后删除。若有子树非空，则用非空的儿子代替它。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(node* &amp;o,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//if (!o) return;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> d=o-&gt;cmp(v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d==<span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o-&gt;cnt&gt;<span class=\"number\">1</span>) &#123;--o-&gt;cnt;--o-&gt;s;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(o-&gt;ch[<span class=\"number\">0</span>])) &#123;node* k=o;o=o-&gt;ch[<span class=\"number\">1</span>];<span class=\"keyword\">delete</span> k;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!(o-&gt;ch[<span class=\"number\">1</span>])) &#123;node* k=o;o=o-&gt;ch[<span class=\"number\">0</span>];<span class=\"keyword\">delete</span> k;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d2=o-&gt;ch[<span class=\"number\">0</span>]-&gt;rank&gt;o-&gt;ch[<span class=\"number\">1</span>]-&gt;rank;</span><br><span class=\"line\">            rotate(o,d2);</span><br><span class=\"line\">            remove(o-&gt;ch[d2],v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> remove(o-&gt;ch[d],v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o) o-&gt;pushup();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完整实现如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v,cnt,rank,s;</span><br><span class=\"line\">    node *ch[<span class=\"number\">2</span>];</span><br><span class=\"line\">    node(<span class=\"keyword\">int</span> v):v(v),cnt(<span class=\"number\">1</span>),s(<span class=\"number\">1</span>),rank(rand())&#123;ch[<span class=\"number\">0</span>]=ch[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">        s=cnt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[<span class=\"number\">0</span>]) s+=ch[<span class=\"number\">0</span>]-&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[<span class=\"number\">1</span>]) s+=ch[<span class=\"number\">1</span>]-&gt;s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x==v) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v&lt;x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;*root;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(node* &amp;o,<span class=\"keyword\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    node* k=o-&gt;ch[d^<span class=\"number\">1</span>];</span><br><span class=\"line\">    o-&gt;ch[d^<span class=\"number\">1</span>]=k-&gt;ch[d];</span><br><span class=\"line\">    k-&gt;ch[d]=o;</span><br><span class=\"line\">    o-&gt;pushup();</span><br><span class=\"line\">    k-&gt;pushup();</span><br><span class=\"line\">    o=k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(node* &amp;o,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) &#123;o=<span class=\"keyword\">new</span> node(v);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> d=o-&gt;cmp(v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d==<span class=\"number\">-1</span>) &#123;++o-&gt;cnt;++o-&gt;s;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    insert(o-&gt;ch[d],v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;ch[d]-&gt;rank&gt;o-&gt;rank) rotate(o,d^<span class=\"number\">1</span>);</span><br><span class=\"line\">    o-&gt;pushup();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(node* &amp;o,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> d=o-&gt;cmp(v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d==<span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o-&gt;cnt&gt;<span class=\"number\">1</span>) &#123;--o-&gt;cnt;--o-&gt;s;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(o-&gt;ch[<span class=\"number\">0</span>])) &#123;node* k=o;o=o-&gt;ch[<span class=\"number\">1</span>];<span class=\"keyword\">delete</span> k;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!(o-&gt;ch[<span class=\"number\">1</span>])) &#123;node* k=o;o=o-&gt;ch[<span class=\"number\">0</span>];<span class=\"keyword\">delete</span> k;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d2=o-&gt;ch[<span class=\"number\">0</span>]-&gt;rank&gt;o-&gt;ch[<span class=\"number\">1</span>]-&gt;rank;</span><br><span class=\"line\">            rotate(o,d2);</span><br><span class=\"line\">            remove(o-&gt;ch[d2],v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> remove(o-&gt;ch[d],v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o) o-&gt;pushup();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(<span class=\"keyword\">int</span> x,node* o=root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s=o-&gt;ch[<span class=\"number\">0</span>]?o-&gt;ch[<span class=\"number\">0</span>]-&gt;s:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v==x) <span class=\"keyword\">return</span> s+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&gt;x) <span class=\"keyword\">return</span> rank(x,o-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&lt;x) <span class=\"keyword\">return</span> rank(x,o-&gt;ch[<span class=\"number\">1</span>])+s+o-&gt;cnt; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> k,node* o=root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> INT_MIN;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s=o-&gt;ch[<span class=\"number\">0</span>]?o-&gt;ch[<span class=\"number\">0</span>]-&gt;s:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k&gt;s &amp;&amp; k&lt;=s+o-&gt;cnt) <span class=\"keyword\">return</span> o-&gt;v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k&lt;=s) <span class=\"keyword\">return</span> kth(k,o-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kth(k-s-o-&gt;cnt,o-&gt;ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> prec,succ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pre</span><span class=\"params\">(<span class=\"keyword\">int</span> x,node* o=root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&gt;prec &amp;&amp; o-&gt;v&lt;x) prec=o-&gt;v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&gt;=x) pre(x,o-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> pre(x,o-&gt;ch[<span class=\"number\">1</span>]); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">suc</span><span class=\"params\">(<span class=\"keyword\">int</span> x,node* o=root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&lt;succ &amp;&amp; o-&gt;v&gt;x) succ=o-&gt;v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&lt;=x) suc(x,o-&gt;ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> suc(x,o-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"phs.in\",\"r\",stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"phs.out\",\"w\",stdout);</span></span><br><span class=\"line\">    srand(time(<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> opt,x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;opt,&amp;x);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (opt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:insert(root,x);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:remove(root,x);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,rank(x));<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>:<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,kth(x));<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">5</span>:prec=INT_MIN;pre(x);<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,prec);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">6</span>:succ=INT_MAX;suc(x);<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,succ);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fclose(<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    fclose(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Splay\"><a href=\"#Splay\" class=\"headerlink\" title=\"Splay\"></a>Splay</h3><p>Splay最核心的操作为splay操作。它把一个节点旋转到指定位置。<del>因为指针Splay太麻烦会调死人</del>，我们采用数组实现。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"BST：\"><a href=\"#BST：\" class=\"headerlink\" title=\"BST：\"></a>BST：</h2><h4 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h4><p>BST(Binary Search Tree)：二叉排序树或者是一棵空树，或者是具有下列性质的<a href=\"https://baike.baidu.com/item/%E4%BA%8C%E5%8F%89%E6%A0%91\" target=\"_blank\" rel=\"noopener\">二叉树</a>：</p>\n<ul>\n<li><p>若左子树不空，则左子树上所有结点的值均小于或等于它的<a href=\"https://baike.baidu.com/item/%E6%A0%B9%E7%BB%93\" target=\"_blank\" rel=\"noopener\">根结</a>点的值；</p>\n</li>\n<li><p>若右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；</p>\n</li>\n<li><p>左、右子树也分别为二叉排序树。</p>","more":"</li>\n</ul>\n<h4 id=\"应用：\"><a href=\"#应用：\" class=\"headerlink\" title=\"应用：\"></a>应用：</h4><p>在BST上可以进行这样的操作：</p>\n<ol>\n<li>插入 $x$数</li>\n<li>删除 $x$ 数(若有多个相同的数，因只删除一个)</li>\n<li>查询 $x$ 数的排名(排名定义为比当前数小的数的个数 +1+1 。若有多个相同的数，因输出最小的排名)</li>\n<li>查询排名为 $ x$ 的数</li>\n<li>求 $x$ 的前驱(前驱定义为小于 $x$，且最大的数)</li>\n<li>求 $x$ 的后继(后继定义为大于 $x$，且最小的数)  </li>\n</ol>\n<h4 id=\"实现：\"><a href=\"#实现：\" class=\"headerlink\" title=\"实现：\"></a>实现：</h4><p><strong>(1.2操作略，s为子树大小)</strong></p>\n<p>3.求排名</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(<span class=\"keyword\">int</span> x,node* o=root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s=o-&gt;ch[<span class=\"number\">0</span>]?o-&gt;ch[<span class=\"number\">0</span>]-&gt;s:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v==x) <span class=\"keyword\">return</span> s+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&gt;x) <span class=\"keyword\">return</span> rank(x,o-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&lt;x) <span class=\"keyword\">return</span> rank(x,o-&gt;ch[<span class=\"number\">1</span>])+s+o-&gt;cnt; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4.求第k大</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> k,node* o=root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> INT_MIN;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s=o-&gt;ch[<span class=\"number\">0</span>]?o-&gt;ch[<span class=\"number\">0</span>]-&gt;s:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k&gt;s &amp;&amp; k&lt;=s+o-&gt;cnt) <span class=\"keyword\">return</span> o-&gt;v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k&lt;=s) <span class=\"keyword\">return</span> kth(k,o-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kth(k-s-o-&gt;cnt,o-&gt;ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5.求前驱</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局变量prec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pre</span><span class=\"params\">(<span class=\"keyword\">int</span> x,node* o=root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&gt;prec &amp;&amp; o-&gt;v&lt;x) prec=o-&gt;v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&gt;=x) pre(x,o-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> pre(x,o-&gt;ch[<span class=\"number\">1</span>]); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>6.求后继</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局变量succ</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">suc</span><span class=\"params\">(<span class=\"keyword\">int</span> x,node* o=root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&lt;succ &amp;&amp; o-&gt;v&gt;x) succ=o-&gt;v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&lt;=x) suc(x,o-&gt;ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> suc(x,o-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"平衡树\"><a href=\"#平衡树\" class=\"headerlink\" title=\"平衡树\"></a>平衡树</h2><p>随机数据下，树期望高度为$O(\\log n)$。所以，当树平衡时，所有这些操作时间都为$O(\\log n)$。但树不一定平衡：按递增或递减顺序插入元素，树就会退化成一条链。在实际应用中，树几乎不会非常平衡。所以，朴素BST表现不佳。</p>\n<p>易知，元素相同的BST可能有多种形态（朴素BST的形态与插入顺序有关）。我们我们采用一些方式来使BST的形态发生变化，但仍然为合法BST。这样树就变得平衡。</p>\n<p>常见的BST有<strong>Splay，Treap，替罪羊树</strong>，红黑树，SBT等。</p>\n<p><del>还有权值线段树、01trie、跳表等</del></p>\n<p>大多数BST基于旋转操作。</p>\n<h4 id=\"旋转：\"><a href=\"#旋转：\" class=\"headerlink\" title=\"旋转：\"></a>旋转：</h4><p>令一个节点换到它的父亲位置上。为了维护BST性质，节点的子节点的位置也会跟着发生变化。</p>\n<p>原来是这样：<img src=\"https://cdn.luogu.org/upload/pic/26185.png\" alt></p>\n<p>现在是这样：</p>\n<p><img src=\"https://cdn.luogu.org/upload/pic/26186.png\" alt></p>\n<blockquote>\n<p>令x为被旋转节点，y为其父亲，则：  </p>\n</blockquote>\n<font color=\"#EE0000\"><br><br>1.  x变到原来y的位置<br><br>2.  y与x的位置关系与原来x与y的位置关系相反（如：x为y的左儿子，则后来y为x的右儿子）<br><br>3.  y非x的儿子不变，x的与x.y共线的儿子不变<br><br>4. 原来x位置的节点变成了x的与x.y不共线的儿子<br><br>   </font>\n\n<p>代码实现大概是这个样子(建议假设x是左儿子来理解,此时k==0)：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数组版：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"comment\">//把x旋转到爸爸的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> y=f[x],z=f[y],k=(c[y][<span class=\"number\">1</span>]==x),w=c[x][!k];<span class=\"comment\">//k是x相对y的位置，w是x的不与x.y共线的儿子</span></span><br><span class=\"line\">    c[z][c[z][<span class=\"number\">1</span>]==y]=x;<span class=\"comment\">//x变到原来y的位置</span></span><br><span class=\"line\">    c[x][!k]=y;<span class=\"comment\">//x为y的左儿子，则后来y为x的右儿子</span></span><br><span class=\"line\">    c[y][k]=w;<span class=\"comment\">//原来x位置的节点变成了x的与xy不共线的儿子</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(w)f[w]=y;<span class=\"comment\">//更新父亲，下同</span></span><br><span class=\"line\">    f[y]=x;f[x]=z;</span><br><span class=\"line\">    pushup(y);pushup(x);<span class=\"comment\">//只有x.y的子树信息发生改变</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//指针版：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(node* &amp;o,<span class=\"keyword\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;<span class=\"comment\">//o为根，d=0表示右儿子左旋，d=1表示左儿子右旋。此版本未维护父亲指针。</span></span><br><span class=\"line\">    node* k=o-&gt;ch[d^<span class=\"number\">1</span>];</span><br><span class=\"line\">    o-&gt;ch[d^<span class=\"number\">1</span>]=k-&gt;ch[d];</span><br><span class=\"line\">    k-&gt;ch[d]=o;</span><br><span class=\"line\">    o-&gt;pushup();</span><br><span class=\"line\">    k-&gt;pushup();</span><br><span class=\"line\">    o=k;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><del>数组和指针操作明显不同是因为我学习时抄的模板不是一个人写的</del></p>\n<h3 id=\"Treap\"><a href=\"#Treap\" class=\"headerlink\" title=\"Treap\"></a>Treap</h3><ul>\n<li>Treap=Tree+Heap</li>\n</ul>\n<p>treap的每个节点有一个随机的优先级。对于键值而言，它是BST；对于优先级而言，它是堆（即，每棵子树中，根的优先级总是最大的）。因为优先级随机，所以树期望平衡。虽然基于随机，但不容易被卡掉，跑得也很快。</p>\n<p>我采用刘汝佳式的指针写法，节点定义如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v,cnt,rank,s;<span class=\"comment\">//cnt是重复元素个数，rank为优先级，s为子树大小。</span></span><br><span class=\"line\">    node *ch[<span class=\"number\">2</span>];</span><br><span class=\"line\">    node(<span class=\"keyword\">int</span> v):v(v),cnt(<span class=\"number\">1</span>),s(<span class=\"number\">1</span>),rank(rand())&#123;ch[<span class=\"number\">0</span>]=ch[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">        s=cnt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[<span class=\"number\">0</span>]) s+=ch[<span class=\"number\">0</span>]-&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[<span class=\"number\">1</span>]) s+=ch[<span class=\"number\">1</span>]-&gt;s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x==v) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v&lt;x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;*root;</span><br></pre></td></tr></table></figure>\n<h4 id=\"insert\"><a href=\"#insert\" class=\"headerlink\" title=\"insert\"></a>insert</h4><p>insert操作基本思想为dfs找到新节点应该在的位置并新建该节点，然后回溯判断是否违反堆性质并通过旋转维护堆性质。（注意对重复元素的处理）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(node* &amp;o,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) &#123;o=<span class=\"keyword\">new</span> node(v);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> d=o-&gt;cmp(v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d==<span class=\"number\">-1</span>) &#123;++o-&gt;cnt;++o-&gt;s;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    insert(o-&gt;ch[d],v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;ch[d]-&gt;rank&gt;o-&gt;rank) rotate(o,d^<span class=\"number\">1</span>);</span><br><span class=\"line\">    o-&gt;pushup();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove\"></a>remove</h4><p>当要删除的节点只有一个儿子时，删除操作很简单：直接用这个儿子代替它即可。remove操作正是基于这样的理念：将要删除的节点向下转到有至少一棵子树为空，然后删除。若有子树非空，则用非空的儿子代替它。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(node* &amp;o,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//if (!o) return;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> d=o-&gt;cmp(v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d==<span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o-&gt;cnt&gt;<span class=\"number\">1</span>) &#123;--o-&gt;cnt;--o-&gt;s;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(o-&gt;ch[<span class=\"number\">0</span>])) &#123;node* k=o;o=o-&gt;ch[<span class=\"number\">1</span>];<span class=\"keyword\">delete</span> k;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!(o-&gt;ch[<span class=\"number\">1</span>])) &#123;node* k=o;o=o-&gt;ch[<span class=\"number\">0</span>];<span class=\"keyword\">delete</span> k;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d2=o-&gt;ch[<span class=\"number\">0</span>]-&gt;rank&gt;o-&gt;ch[<span class=\"number\">1</span>]-&gt;rank;</span><br><span class=\"line\">            rotate(o,d2);</span><br><span class=\"line\">            remove(o-&gt;ch[d2],v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> remove(o-&gt;ch[d],v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o) o-&gt;pushup();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完整实现如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v,cnt,rank,s;</span><br><span class=\"line\">    node *ch[<span class=\"number\">2</span>];</span><br><span class=\"line\">    node(<span class=\"keyword\">int</span> v):v(v),cnt(<span class=\"number\">1</span>),s(<span class=\"number\">1</span>),rank(rand())&#123;ch[<span class=\"number\">0</span>]=ch[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">        s=cnt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[<span class=\"number\">0</span>]) s+=ch[<span class=\"number\">0</span>]-&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[<span class=\"number\">1</span>]) s+=ch[<span class=\"number\">1</span>]-&gt;s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x==v) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v&lt;x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;*root;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(node* &amp;o,<span class=\"keyword\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    node* k=o-&gt;ch[d^<span class=\"number\">1</span>];</span><br><span class=\"line\">    o-&gt;ch[d^<span class=\"number\">1</span>]=k-&gt;ch[d];</span><br><span class=\"line\">    k-&gt;ch[d]=o;</span><br><span class=\"line\">    o-&gt;pushup();</span><br><span class=\"line\">    k-&gt;pushup();</span><br><span class=\"line\">    o=k;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(node* &amp;o,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) &#123;o=<span class=\"keyword\">new</span> node(v);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> d=o-&gt;cmp(v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d==<span class=\"number\">-1</span>) &#123;++o-&gt;cnt;++o-&gt;s;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    insert(o-&gt;ch[d],v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;ch[d]-&gt;rank&gt;o-&gt;rank) rotate(o,d^<span class=\"number\">1</span>);</span><br><span class=\"line\">    o-&gt;pushup();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(node* &amp;o,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> d=o-&gt;cmp(v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d==<span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (o-&gt;cnt&gt;<span class=\"number\">1</span>) &#123;--o-&gt;cnt;--o-&gt;s;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(o-&gt;ch[<span class=\"number\">0</span>])) &#123;node* k=o;o=o-&gt;ch[<span class=\"number\">1</span>];<span class=\"keyword\">delete</span> k;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!(o-&gt;ch[<span class=\"number\">1</span>])) &#123;node* k=o;o=o-&gt;ch[<span class=\"number\">0</span>];<span class=\"keyword\">delete</span> k;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d2=o-&gt;ch[<span class=\"number\">0</span>]-&gt;rank&gt;o-&gt;ch[<span class=\"number\">1</span>]-&gt;rank;</span><br><span class=\"line\">            rotate(o,d2);</span><br><span class=\"line\">            remove(o-&gt;ch[d2],v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> remove(o-&gt;ch[d],v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o) o-&gt;pushup();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(<span class=\"keyword\">int</span> x,node* o=root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s=o-&gt;ch[<span class=\"number\">0</span>]?o-&gt;ch[<span class=\"number\">0</span>]-&gt;s:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v==x) <span class=\"keyword\">return</span> s+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&gt;x) <span class=\"keyword\">return</span> rank(x,o-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&lt;x) <span class=\"keyword\">return</span> rank(x,o-&gt;ch[<span class=\"number\">1</span>])+s+o-&gt;cnt; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> k,node* o=root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> INT_MIN;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s=o-&gt;ch[<span class=\"number\">0</span>]?o-&gt;ch[<span class=\"number\">0</span>]-&gt;s:<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k&gt;s &amp;&amp; k&lt;=s+o-&gt;cnt) <span class=\"keyword\">return</span> o-&gt;v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k&lt;=s) <span class=\"keyword\">return</span> kth(k,o-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kth(k-s-o-&gt;cnt,o-&gt;ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> prec,succ;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pre</span><span class=\"params\">(<span class=\"keyword\">int</span> x,node* o=root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&gt;prec &amp;&amp; o-&gt;v&lt;x) prec=o-&gt;v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&gt;=x) pre(x,o-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> pre(x,o-&gt;ch[<span class=\"number\">1</span>]); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">suc</span><span class=\"params\">(<span class=\"keyword\">int</span> x,node* o=root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&lt;succ &amp;&amp; o-&gt;v&gt;x) succ=o-&gt;v;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (o-&gt;v&lt;=x) suc(x,o-&gt;ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> suc(x,o-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"phs.in\",\"r\",stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"phs.out\",\"w\",stdout);</span></span><br><span class=\"line\">    srand(time(<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> opt,x;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;opt,&amp;x);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (opt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:insert(root,x);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:remove(root,x);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,rank(x));<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>:<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,kth(x));<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">5</span>:prec=INT_MIN;pre(x);<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,prec);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">6</span>:succ=INT_MAX;suc(x);<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,succ);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fclose(<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    fclose(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Splay\"><a href=\"#Splay\" class=\"headerlink\" title=\"Splay\"></a>Splay</h3><p>Splay最核心的操作为splay操作。它把一个节点旋转到指定位置。<del>因为指针Splay太麻烦会调死人</del>，我们采用数组实现。</p>"},{"title":"多项式算法小结","date":"2019-02-18T14:22:06.000Z","comments":1,"_content":"\n![万古神犇卢宸昊，数论算法碾众生！](LCHAK.jpg)\n\n# 多项式求逆\n\n> 给定一个多项式 $F(x)$ ，请求出一个多项式$G(x)$， 满足 $F(x) * G(x) \\equiv 1 ( \\mathrm{mod\\:} x^n )$。系数对$998244353$取模。\n\n<!-- more -->\n\n考虑边界情况：当$F(x)$只有常数项的时候，其逆元显然为常数项的逆元。\n我们递归处理这个问题：  \n现在假设我们已知一个多项式$G'(x)$,满足：\n$$F(x)*G'(x)\\equiv 1 (\\mathrm{mod\\:} \\ x^{\\lceil \\frac{n}{2} \\rceil})$$\n要求的$G(x)$满足：\n$$F(x)* G(x)\\equiv 1 (\\mathrm{mod\\:} \\ x^{\\lceil \\frac{n}{2} \\rceil})$$\n两式相减得：\n$$F(x)*[G(x)-G'(x)]\\equiv 0(\\mathrm{mod\\:} \\ x^{\\lceil \\frac{n}{2} \\rceil})$$\n则可得：\n$$G(x)-G'(x)\\equiv 0(\\mathrm{mod\\:}\\ x^{\\lceil \\frac{n}{2} \\rceil})$$\n两边同时平方得：\n$$G^2(x)-2G(x)*G'(x)+G'^2(x)\\equiv 0 (\\mathrm{mod\\:}\\ x^n)$$\n上式乘上$F(x)$:\n$$G(x)-2G'(x)+F(x)*G'^2(x)\\equiv 0 (\\mathrm{mod\\:}\\ x^n)$$\n移项得：\n$$G(x)\\equiv 2G'(x)-F(x)*G'^2(x) (\\mathrm{mod\\:}\\ x^n)$$\n所以我们珂以从下一层的答案推到这一层来。时间复杂度满足递归式:\n$$T(n)=T(\\frac{n}{2})+O(n \\log n)$$\n解得$T(n)=O(n \\log n)$,与FFT复杂度相同。  \n## 代码：\n```cpp\ninline void prework(int limit)\n{\n    for (int i=1;i<limit;++i)\n        rev[i]=(rev[i>>1]>>1)|((i&1)<<(l-1));\n    w[0]=winv[0]=1;w[1]=qpow(g,(p-1)/limit,p);winv[1]=qpow(w[1],p-2,p);\n    for (int i=2;i<limit;++i)\n        w[i]=(ll)w[i-1]*w[1]%p,winv[i]=(ll)winv[i-1]*winv[1]%p;\n}\n\nvoid polyinv(int *A,int *B,int deg)\n{\n    static int C[maxn];\n    if (deg==1) {B[0]=qpow(A[0],p-2,p);return;}\n    polyinv(A,B,(deg+1)>>1);\n    int l=0;limit=1;\n    while (limit<(deg<<1)) limit<<=1,++l;\n    for (int i=0;i<deg;++i) C[i]=A[i];\n    for (int i=deg;i<limit;++i) C[i]=0;\n    prework(limit);\n    DFT(C);DFT(B);\n    for (int i=0;i<limit;++i)\n        B[i]=((ll)B[i]*((2-(ll)C[i]*B[i]%p+p)%p))%p;\n    IDFT(B);\n    for (int i=deg;i<limit;++i) B[i]=0;\n}\n```\n# 分治FFT\n生成函数真的是人类智慧。。。  \n> 给定长度为 $n-1$ 的数组 $g[1],g[2],..,g[n-1]g[1],g[2],..,g[n−1]$，求 $f[0],f[1],..,f[n-1]f[0],f[1],..,f[n−1]$，其中\n> $$f[i]=\\sum_{j=1}^i f[i-j]g[j]$$\n> 边界为 $f[0]=1$。答案模$998244353$。\n\n考虑生成函数(不妨设$g[0]=0$)：\n$$F(x)=\\sum_{i=0}^{\\infty} f[i]*x^i$$\n$$G(x)=\\sum_{i=0}^{\\infty} g[i]*x^i$$\n则我们只要求出来$F(x)$这个多项式就珂以确定$f[]$的值了。  \n由定义：\n$$(F*G)=\\sum_{i=0}^{\\infty}[(\\sum_{j=0}^i f[j]*g[i-j])*x^i]$$\n分类讨论：\n当$i=0$时，\n$$(F*G)(0)=0$$\n当i>0时，因为\n$$f[i]=\\sum_{j=1}^i f[i-j]g[j]$$\n所以\n$$\\sum_{j=0}^i f[j]*g[i-j]=f[i]$$\n即得：\n$$(F*G)(i)=f[i]$$\n故，\n$$F(x)*G(x)=F(x)-f[0]=F(x)-1$$\n解得：\n$$F(x)=\\frac{1}{1-G(x)}$$\n然后套多项式求逆板子就好了。\n## 代码：（只贴主函数吧）\n```cpp\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for (int i=1;i<n;++i)\n        scanf(\"%d\",A+i),A[i]=p-A[i];\n    A[0]=1;\n    polyinv(A,B,n);\n    for (int i=0;i<n;++i)\n        printf(\"%d \",B[i]);\n}\n```\n\n# 多项式对数函数\n> 给出 $n-1$ 次多项式 $A(x)$,求一个 $\\bmod{\\:x^n}$下的多项式 $B(x)$，满足 $B(x) \\equiv \\ln A(x)$.在 $\\text{mod } 998244353$mod 998244353 下进行，且 $a_i \\in [0, 998244353) \\cap \\mathbb{Z}$\n\n对于一个函数$F(x)=\\sum kx^a$而言：\n$$F'(x)=\\sum kax^{a-1}$$\n同理，对于它的导函数而言，\n$$\\int F'(x)dx=F(x)$$\n即对于$F(x)=\\sum kx^a$，\n$$\\int F(x)dx=(\\sum \\frac{k}{a+1}x^{a+1})+C\\ (C\\in \\mathbb{R})$$\n**在下文中，一般把C视为0.**  把B'视为关于x的复合函数，\n$$\\because B(x)=\\ln A(x)$$\n$$\\therefore B'(x)=A'(x)/A(x)$$  \n再做一次积分，得：\n$$B(x)=\\int \\frac{A'(x)}{A(x)}$$\n因为求导和积分我们都可以$O(n)$完成，所以总复杂度$O(n \\log n)$.\n## 代码：\n```cpp\ninline void polyder(int *A,int *B,int deg)\n{\n    for (int i=1;i<deg;++i)\n        B[i-1]=(ll)A[i]*i%P;\n}\n\ninline void polyint(int *A,int *B,int deg)\n{\n    B[0]=0;\n    for (int i=1;i<=deg;++i)\n        B[i]=A[i-1]*(ll)qpow(i,P-2,P)%P;\n}\n\ninline void polyln(int *A,int *E,int n)\n{\n    static int B[maxn],C[maxn];\n    memset(B,0,sizeof(B));\n    memset(C,0,sizeof(C));\n    polyder(A,C,n);\n    polyinv(A,B,n);\n    int limit=1,l=0;\n    while (limit<=(n<<1)) limit<<=1,++l;\n    prework(limit,l);\n    NTT(C,w,limit);NTT(B,w,limit);\n    for (int i=0;i<limit;++i)\n        C[i]=(ll)C[i]*B[i]%P;\n    NTT(C,winv,limit);\n    int inv=qpow(limit,P-2,P);\n    for (int i=0;i<limit;++i)\n        C[i]=(ll)C[i]*inv%P;\n    polyint(C,E,n);\n}\n```\n\n# 多项式指数函数\n> 给出 $n-1$次多项式 $A(x)$，求一个 $\\bmod{\\:x^n}$下的多项式 $B(x)$，满足 $B(x) \\equiv e^{A(x)}$.  \n\n这就比较麻烦。。。\n我们考虑两边同时取对数：\n$$\\ln B(x)\\equiv A(x) (\\bmod\\  x^n)$$\n移项：\n$$\\ln B(x)-A(x)\\equiv 0\\ (\\mathrm{mod\\ } x^n)$$\n设$G(B(x))=\\ln B(x)-A(x)$\n则要求的$B(x)$就是$G(B(x))$的零点。  \n假设我们已经求得$B_0(x)$,使得\n$$G(B_0(x))\\equiv 0 (\\bmod \\ x^{\\lceil \\frac{n}{2}\\rceil})$$\n考虑在$B_0(x)$处泰勒展开：\n$$G(B(x))=\\frac{G(B_0(x))}{0!}+\\frac{G'(B_0(x))}{1!}(B(x)-B_0(x)) \\ (*)$$\n为什么后面不再写了呢，是因为:\n$$\\because G(B_0(x))\\equiv 0 (\\bmod \\ x^{\\lceil \\frac{n}{2}\\rceil}),G(B(x))\\equiv 0 (\\bmod \\ x^{\\lceil \\frac{n}{2}\\rceil})$$\n$$\\therefore B_0(x)\\equiv B(x)\\ (\\bmod \\ x^{\\lceil \\frac{n}{2}\\rceil})$$\n即$B_0(x)$和$B(x)$在$x^{\\lceil \\frac{n}{2}\\rceil}$之前都是相同的。    \n所以$(B(x)-B_0(x))^2$最低次的非零项次数也大于$n$.在膜意义下，后面的项就都为0了qwq。  \n由$G(B(x))\\equiv 0 \\ (\\bmod x^n)$,对$(*)$式整理可得：\n$$B(x)\\equiv B_0(x)-\\frac{G(B_0(x)}{G'(B_0(x))}$$\n即：\n$$B(x)\\equiv B_0(x)*(1-\\ln B_0(x)+A(x)) \\ (\\bmod x^n)$$\n套多项式ln板子即可。\n## 代码：\n```cpp\ninline void polyexp(int *A,int *B,int deg)\n{\n    if (deg==1) {B[0]=1;return;}\n    static int T[maxn];\n    polyexp(A,B,(deg+1)>>1);\n    polyln(B,T,deg);\n    T[0]=(T[0]-1+P)%P;\n    for (int i=0;i<deg;++i) T[i]=A[i]-T[i];\n    int limit=1,l=0;\n    while (limit<(deg<<1)) limit<<=1,++l;\n    prework(limit,l);\n    NTT(T,w,limit);NTT(B,w,limit);\n    for (int i=0;i<limit;++i)\n        B[i]=(ll)B[i]*T[i]%P;\n    NTT(B,winv,limit);\n    int inv=qpow(limit,P-2,P);\n    for (int i=0;i<deg;++i)\n        B[i]=(ll)B[i]*inv%P;\n    for (int i=deg;i<limit;++i) B[i]=0;\n}\n```\n\n# MTT（任意模数NTT）\n\n> 给定 $2$ 个多项式 $F(x), G(x)$ ，请求出 $F(x) * G(x)$。系数对 $p$ 取模，且不保证 $p$ 可以分解成 $p = a \\cdot 2^k + 1$之形式。\n> $1\\le n \\le 10^5\\ ;a_i,b_i\\le 10^9;p\\le 10^9+9$\n\n计数题膜数是$998244353$当然好，但就是有毒瘤出题人喜欢$998244853$,$99824453$和$10^9+7$。。。这样就比较麻烦。所以我们有了任意模数NTT这种操作，它有两种实现形式：三模数NTT和MTT。本文讲解MTT.（$\\texttt{Matthew99 Theorem Transform}$)\n首先，如果没有精度问题的话，FFT是可以直接做的。但是数太大啦，FFT会爆精度。所以我们把多项式每一个系数拆成A*m+b的形式，m取$\\sqrt P$,一般实现时取$32768$，这样A.B就都在int范围之内，乘积就不会超出double的精度范围,把他们分别DFT，计算，再IDFT，就可以认为没有精度误差。就像这样做：\n$$(am+b)(cm+d)=acm^2+(ad+bc)m+bd$$\n这样做八次FFT，合并就可以了  \n## 伪$\\cdot$代码\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<complex>\n#include<cmath>\nusing namespace std;\nconst double Pi=acos(-1);\nconst int N=400100;\nconst int M=30000;\nint n,m,p,F[N],G[N];\nint r[N],Ans[N],l,tt;\ncomplex<double> A1[N],B1[N],A2[N],B2[N],A[N],w[N];\nvoid FFT(complex<double> *P,int op)\n{\n    for(int i=0;i<l;i++) if(r[i]<i) swap(P[i],P[r[i]]);\n    for(int i=1;i<l;i<<=1)\n        for(int p=i<<1,j=0;j<l;j+=p)\n            for(int k=0;k<i;k++)\n            {\n                complex<double> W=w[l/i*k];W.imag()*=op;\n                complex<double> X=P[j+k],Y=W*P[j+k+i];\n                P[j+k]=X+Y;P[j+k+i]=X-Y;\n            }\n}\nvoid Work(complex<double> *P1,complex<double> *P2,int base)\n{\n    for(int i=0;i<l;i++) A[i]=P1[i]*P2[i];FFT(A,-1);\n    for(int i=0;i<=m+n;i++) (Ans[i]+=(long long)(A[i].real()/l+0.5)%p*base%p)%=p;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&p);\n    for(int i=0,x;i<=n;i++) scanf(\"%d\",&x),A1[i].real()=x/M,B1[i].real()=x%M;\n    for(int i=0,x;i<=m;i++) scanf(\"%d\",&x),A2[i].real()=x/M,B2[i].real()=x%M;\n    for(l=1;l<=n+m;l<<=1) tt++;tt--;\n    for(int i=0;i<l;i++) r[i]=(r[i>>1]>>1)|((i&1)<<tt);\n    for(int i=0;i<l;i++) w[i].real()=cos(Pi/l*i),w[i].imag()=sin(Pi/l*i);\n    FFT(A1,1);FFT(A2,1);FFT(B1,1);FFT(B2,1);\n    Work(A1,A2,M*M%p); Work(A1,B2,M%p);\n    Work(A2,B1,M%p); Work(B1,B2,1);\n    for(int i=0;i<=m+n;i++) printf(\"%d \",Ans[i]);\n}\n```\n。。。吗？  \n八次FFT是不是有点慢呐qwq..\n所以毛爷爷提出了一个优化方案，可以用四次FFT实现这个功能！\n## 前置知识：一次DFT实现将两个多项式在点值和系数表达之间转换（Orz myy\n这部分可以去看毛爷爷论文,在[2016国家集训队论文集](国家集训队2016论文集.pdf)中\n加上myy优化的真$\\cdot$MTT效果拔群，实测比Vectory巨佬的三模NTT快了十倍多....而且还不用解同余方程！但这样对精度要求还是比较高的，所以必须预处理单位复根，或者偷懒用long double.建议预处理一下吧，这样精度高还跑得快\n\n~~如果实在理解不了，MTT的代码有很强的规律性，所以可以直接背~~\n\n## 真$\\cdot$代码：\n```cpp\ninline void DFT(Complex *A,Complex *w,int limit)\n{\n    for (int i=0;i<limit;++i)\n        if (i<rev[i]) std::swap(A[i],A[rev[i]]);\n    for (int mid=1;mid<limit;mid<<=1)\n        for (int R=mid<<1,j=0;j<limit;j+=R)\n            for (int k=0;k<mid;++k)\n            {\n                Complex x=A[j+k],y=w[limit/2/mid*k]*A[j+mid+k];\n                A[j+k]=x+y;\n                A[j+mid+k]=x-y;\n            }\n}\n\ninline void MTT(int* F,int* G,int deg)//求F*G,答案保存在ans[]里。\n{\n    static Complex A[maxn],B[maxn],C[maxn],D[maxn];\n    int limit=1,l=0;\n    while (limit<=(deg)) limit<<=1,++l;\n    for (int i=0;i<=deg;++i)\n        A[i]=Complex(F[i]&32767,F[i]>>15),B[i]=Complex(G[i]&32767,G[i]>>15);\n    for (int i=0;i<limit;++i)\n    {\n        w[i]=Complex(std::cos(i*Pi*2/limit),std::sin(i*Pi*2/limit)),winv[i]=w[i].conj();\n        rev[i]=(rev[i>>1]>>1)|((i&1)<<(l-1));\n    }\n    DFT(A,w,limit);DFT(B,w,limit);\n    Complex da,db,dc,dd;\n    static Complex DFTA[maxn],DFTB[maxn],DFTC[maxn],DFTD[maxn];\n    for (int i=0,j;i<limit;++i)\n    {\n        j=(limit-i)&(limit-1);\n        da=(A[i]+A[j].conj())*Complex(0.5,0);\n        db=(A[i]-A[j].conj())*Complex(0,-0.5);\n        dc=(B[i]+B[j].conj())*Complex(0.5,0);\n        dd=(B[i]-B[j].conj())*Complex(0,-0.5);\n        DFTA[i]=da*dc;\n        DFTB[i]=da*dd;\n        DFTC[i]=db*dc;\n        DFTD[i]=db*dd;\n    }\n    for (int i=0;i<limit;++i)\n        A[i]=DFTA[i]+DFTB[i]*Complex(0,1),B[i]=DFTC[i]+DFTD[i]*Complex(0,1);\n    DFT(A,winv,limit);DFT(B,winv,limit);\n    ll a,b,c,d;\n    for (int i=0;i<=deg;++i)\n    {\n        a=(ll)(A[i].real/limit+0.5)%P;\n        b=(ll)(A[i].imag/limit+0.5)%P;\n        c=(ll)(B[i].real/limit+0.5)%P;\n        d=(ll)(B[i].imag/limit+0.5)%P;\n        ans[i]=(((d<<30)+((b+c)<<15)+a)%P+P)%P;\n    }\n}\n```","source":"_posts/多项式算法小结.md","raw":"---\ntitle: 多项式算法小结\ndate: 2019-02-18 22:22:06\ntags:\n    - 多项式算法\n    - 数论\ncategories:\n    - 学习笔记\ncomments:\n---\n\n![万古神犇卢宸昊，数论算法碾众生！](LCHAK.jpg)\n\n# 多项式求逆\n\n> 给定一个多项式 $F(x)$ ，请求出一个多项式$G(x)$， 满足 $F(x) * G(x) \\equiv 1 ( \\mathrm{mod\\:} x^n )$。系数对$998244353$取模。\n\n<!-- more -->\n\n考虑边界情况：当$F(x)$只有常数项的时候，其逆元显然为常数项的逆元。\n我们递归处理这个问题：  \n现在假设我们已知一个多项式$G'(x)$,满足：\n$$F(x)*G'(x)\\equiv 1 (\\mathrm{mod\\:} \\ x^{\\lceil \\frac{n}{2} \\rceil})$$\n要求的$G(x)$满足：\n$$F(x)* G(x)\\equiv 1 (\\mathrm{mod\\:} \\ x^{\\lceil \\frac{n}{2} \\rceil})$$\n两式相减得：\n$$F(x)*[G(x)-G'(x)]\\equiv 0(\\mathrm{mod\\:} \\ x^{\\lceil \\frac{n}{2} \\rceil})$$\n则可得：\n$$G(x)-G'(x)\\equiv 0(\\mathrm{mod\\:}\\ x^{\\lceil \\frac{n}{2} \\rceil})$$\n两边同时平方得：\n$$G^2(x)-2G(x)*G'(x)+G'^2(x)\\equiv 0 (\\mathrm{mod\\:}\\ x^n)$$\n上式乘上$F(x)$:\n$$G(x)-2G'(x)+F(x)*G'^2(x)\\equiv 0 (\\mathrm{mod\\:}\\ x^n)$$\n移项得：\n$$G(x)\\equiv 2G'(x)-F(x)*G'^2(x) (\\mathrm{mod\\:}\\ x^n)$$\n所以我们珂以从下一层的答案推到这一层来。时间复杂度满足递归式:\n$$T(n)=T(\\frac{n}{2})+O(n \\log n)$$\n解得$T(n)=O(n \\log n)$,与FFT复杂度相同。  \n## 代码：\n```cpp\ninline void prework(int limit)\n{\n    for (int i=1;i<limit;++i)\n        rev[i]=(rev[i>>1]>>1)|((i&1)<<(l-1));\n    w[0]=winv[0]=1;w[1]=qpow(g,(p-1)/limit,p);winv[1]=qpow(w[1],p-2,p);\n    for (int i=2;i<limit;++i)\n        w[i]=(ll)w[i-1]*w[1]%p,winv[i]=(ll)winv[i-1]*winv[1]%p;\n}\n\nvoid polyinv(int *A,int *B,int deg)\n{\n    static int C[maxn];\n    if (deg==1) {B[0]=qpow(A[0],p-2,p);return;}\n    polyinv(A,B,(deg+1)>>1);\n    int l=0;limit=1;\n    while (limit<(deg<<1)) limit<<=1,++l;\n    for (int i=0;i<deg;++i) C[i]=A[i];\n    for (int i=deg;i<limit;++i) C[i]=0;\n    prework(limit);\n    DFT(C);DFT(B);\n    for (int i=0;i<limit;++i)\n        B[i]=((ll)B[i]*((2-(ll)C[i]*B[i]%p+p)%p))%p;\n    IDFT(B);\n    for (int i=deg;i<limit;++i) B[i]=0;\n}\n```\n# 分治FFT\n生成函数真的是人类智慧。。。  \n> 给定长度为 $n-1$ 的数组 $g[1],g[2],..,g[n-1]g[1],g[2],..,g[n−1]$，求 $f[0],f[1],..,f[n-1]f[0],f[1],..,f[n−1]$，其中\n> $$f[i]=\\sum_{j=1}^i f[i-j]g[j]$$\n> 边界为 $f[0]=1$。答案模$998244353$。\n\n考虑生成函数(不妨设$g[0]=0$)：\n$$F(x)=\\sum_{i=0}^{\\infty} f[i]*x^i$$\n$$G(x)=\\sum_{i=0}^{\\infty} g[i]*x^i$$\n则我们只要求出来$F(x)$这个多项式就珂以确定$f[]$的值了。  \n由定义：\n$$(F*G)=\\sum_{i=0}^{\\infty}[(\\sum_{j=0}^i f[j]*g[i-j])*x^i]$$\n分类讨论：\n当$i=0$时，\n$$(F*G)(0)=0$$\n当i>0时，因为\n$$f[i]=\\sum_{j=1}^i f[i-j]g[j]$$\n所以\n$$\\sum_{j=0}^i f[j]*g[i-j]=f[i]$$\n即得：\n$$(F*G)(i)=f[i]$$\n故，\n$$F(x)*G(x)=F(x)-f[0]=F(x)-1$$\n解得：\n$$F(x)=\\frac{1}{1-G(x)}$$\n然后套多项式求逆板子就好了。\n## 代码：（只贴主函数吧）\n```cpp\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for (int i=1;i<n;++i)\n        scanf(\"%d\",A+i),A[i]=p-A[i];\n    A[0]=1;\n    polyinv(A,B,n);\n    for (int i=0;i<n;++i)\n        printf(\"%d \",B[i]);\n}\n```\n\n# 多项式对数函数\n> 给出 $n-1$ 次多项式 $A(x)$,求一个 $\\bmod{\\:x^n}$下的多项式 $B(x)$，满足 $B(x) \\equiv \\ln A(x)$.在 $\\text{mod } 998244353$mod 998244353 下进行，且 $a_i \\in [0, 998244353) \\cap \\mathbb{Z}$\n\n对于一个函数$F(x)=\\sum kx^a$而言：\n$$F'(x)=\\sum kax^{a-1}$$\n同理，对于它的导函数而言，\n$$\\int F'(x)dx=F(x)$$\n即对于$F(x)=\\sum kx^a$，\n$$\\int F(x)dx=(\\sum \\frac{k}{a+1}x^{a+1})+C\\ (C\\in \\mathbb{R})$$\n**在下文中，一般把C视为0.**  把B'视为关于x的复合函数，\n$$\\because B(x)=\\ln A(x)$$\n$$\\therefore B'(x)=A'(x)/A(x)$$  \n再做一次积分，得：\n$$B(x)=\\int \\frac{A'(x)}{A(x)}$$\n因为求导和积分我们都可以$O(n)$完成，所以总复杂度$O(n \\log n)$.\n## 代码：\n```cpp\ninline void polyder(int *A,int *B,int deg)\n{\n    for (int i=1;i<deg;++i)\n        B[i-1]=(ll)A[i]*i%P;\n}\n\ninline void polyint(int *A,int *B,int deg)\n{\n    B[0]=0;\n    for (int i=1;i<=deg;++i)\n        B[i]=A[i-1]*(ll)qpow(i,P-2,P)%P;\n}\n\ninline void polyln(int *A,int *E,int n)\n{\n    static int B[maxn],C[maxn];\n    memset(B,0,sizeof(B));\n    memset(C,0,sizeof(C));\n    polyder(A,C,n);\n    polyinv(A,B,n);\n    int limit=1,l=0;\n    while (limit<=(n<<1)) limit<<=1,++l;\n    prework(limit,l);\n    NTT(C,w,limit);NTT(B,w,limit);\n    for (int i=0;i<limit;++i)\n        C[i]=(ll)C[i]*B[i]%P;\n    NTT(C,winv,limit);\n    int inv=qpow(limit,P-2,P);\n    for (int i=0;i<limit;++i)\n        C[i]=(ll)C[i]*inv%P;\n    polyint(C,E,n);\n}\n```\n\n# 多项式指数函数\n> 给出 $n-1$次多项式 $A(x)$，求一个 $\\bmod{\\:x^n}$下的多项式 $B(x)$，满足 $B(x) \\equiv e^{A(x)}$.  \n\n这就比较麻烦。。。\n我们考虑两边同时取对数：\n$$\\ln B(x)\\equiv A(x) (\\bmod\\  x^n)$$\n移项：\n$$\\ln B(x)-A(x)\\equiv 0\\ (\\mathrm{mod\\ } x^n)$$\n设$G(B(x))=\\ln B(x)-A(x)$\n则要求的$B(x)$就是$G(B(x))$的零点。  \n假设我们已经求得$B_0(x)$,使得\n$$G(B_0(x))\\equiv 0 (\\bmod \\ x^{\\lceil \\frac{n}{2}\\rceil})$$\n考虑在$B_0(x)$处泰勒展开：\n$$G(B(x))=\\frac{G(B_0(x))}{0!}+\\frac{G'(B_0(x))}{1!}(B(x)-B_0(x)) \\ (*)$$\n为什么后面不再写了呢，是因为:\n$$\\because G(B_0(x))\\equiv 0 (\\bmod \\ x^{\\lceil \\frac{n}{2}\\rceil}),G(B(x))\\equiv 0 (\\bmod \\ x^{\\lceil \\frac{n}{2}\\rceil})$$\n$$\\therefore B_0(x)\\equiv B(x)\\ (\\bmod \\ x^{\\lceil \\frac{n}{2}\\rceil})$$\n即$B_0(x)$和$B(x)$在$x^{\\lceil \\frac{n}{2}\\rceil}$之前都是相同的。    \n所以$(B(x)-B_0(x))^2$最低次的非零项次数也大于$n$.在膜意义下，后面的项就都为0了qwq。  \n由$G(B(x))\\equiv 0 \\ (\\bmod x^n)$,对$(*)$式整理可得：\n$$B(x)\\equiv B_0(x)-\\frac{G(B_0(x)}{G'(B_0(x))}$$\n即：\n$$B(x)\\equiv B_0(x)*(1-\\ln B_0(x)+A(x)) \\ (\\bmod x^n)$$\n套多项式ln板子即可。\n## 代码：\n```cpp\ninline void polyexp(int *A,int *B,int deg)\n{\n    if (deg==1) {B[0]=1;return;}\n    static int T[maxn];\n    polyexp(A,B,(deg+1)>>1);\n    polyln(B,T,deg);\n    T[0]=(T[0]-1+P)%P;\n    for (int i=0;i<deg;++i) T[i]=A[i]-T[i];\n    int limit=1,l=0;\n    while (limit<(deg<<1)) limit<<=1,++l;\n    prework(limit,l);\n    NTT(T,w,limit);NTT(B,w,limit);\n    for (int i=0;i<limit;++i)\n        B[i]=(ll)B[i]*T[i]%P;\n    NTT(B,winv,limit);\n    int inv=qpow(limit,P-2,P);\n    for (int i=0;i<deg;++i)\n        B[i]=(ll)B[i]*inv%P;\n    for (int i=deg;i<limit;++i) B[i]=0;\n}\n```\n\n# MTT（任意模数NTT）\n\n> 给定 $2$ 个多项式 $F(x), G(x)$ ，请求出 $F(x) * G(x)$。系数对 $p$ 取模，且不保证 $p$ 可以分解成 $p = a \\cdot 2^k + 1$之形式。\n> $1\\le n \\le 10^5\\ ;a_i,b_i\\le 10^9;p\\le 10^9+9$\n\n计数题膜数是$998244353$当然好，但就是有毒瘤出题人喜欢$998244853$,$99824453$和$10^9+7$。。。这样就比较麻烦。所以我们有了任意模数NTT这种操作，它有两种实现形式：三模数NTT和MTT。本文讲解MTT.（$\\texttt{Matthew99 Theorem Transform}$)\n首先，如果没有精度问题的话，FFT是可以直接做的。但是数太大啦，FFT会爆精度。所以我们把多项式每一个系数拆成A*m+b的形式，m取$\\sqrt P$,一般实现时取$32768$，这样A.B就都在int范围之内，乘积就不会超出double的精度范围,把他们分别DFT，计算，再IDFT，就可以认为没有精度误差。就像这样做：\n$$(am+b)(cm+d)=acm^2+(ad+bc)m+bd$$\n这样做八次FFT，合并就可以了  \n## 伪$\\cdot$代码\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<complex>\n#include<cmath>\nusing namespace std;\nconst double Pi=acos(-1);\nconst int N=400100;\nconst int M=30000;\nint n,m,p,F[N],G[N];\nint r[N],Ans[N],l,tt;\ncomplex<double> A1[N],B1[N],A2[N],B2[N],A[N],w[N];\nvoid FFT(complex<double> *P,int op)\n{\n    for(int i=0;i<l;i++) if(r[i]<i) swap(P[i],P[r[i]]);\n    for(int i=1;i<l;i<<=1)\n        for(int p=i<<1,j=0;j<l;j+=p)\n            for(int k=0;k<i;k++)\n            {\n                complex<double> W=w[l/i*k];W.imag()*=op;\n                complex<double> X=P[j+k],Y=W*P[j+k+i];\n                P[j+k]=X+Y;P[j+k+i]=X-Y;\n            }\n}\nvoid Work(complex<double> *P1,complex<double> *P2,int base)\n{\n    for(int i=0;i<l;i++) A[i]=P1[i]*P2[i];FFT(A,-1);\n    for(int i=0;i<=m+n;i++) (Ans[i]+=(long long)(A[i].real()/l+0.5)%p*base%p)%=p;\n}\nint main()\n{\n    scanf(\"%d%d%d\",&n,&m,&p);\n    for(int i=0,x;i<=n;i++) scanf(\"%d\",&x),A1[i].real()=x/M,B1[i].real()=x%M;\n    for(int i=0,x;i<=m;i++) scanf(\"%d\",&x),A2[i].real()=x/M,B2[i].real()=x%M;\n    for(l=1;l<=n+m;l<<=1) tt++;tt--;\n    for(int i=0;i<l;i++) r[i]=(r[i>>1]>>1)|((i&1)<<tt);\n    for(int i=0;i<l;i++) w[i].real()=cos(Pi/l*i),w[i].imag()=sin(Pi/l*i);\n    FFT(A1,1);FFT(A2,1);FFT(B1,1);FFT(B2,1);\n    Work(A1,A2,M*M%p); Work(A1,B2,M%p);\n    Work(A2,B1,M%p); Work(B1,B2,1);\n    for(int i=0;i<=m+n;i++) printf(\"%d \",Ans[i]);\n}\n```\n。。。吗？  \n八次FFT是不是有点慢呐qwq..\n所以毛爷爷提出了一个优化方案，可以用四次FFT实现这个功能！\n## 前置知识：一次DFT实现将两个多项式在点值和系数表达之间转换（Orz myy\n这部分可以去看毛爷爷论文,在[2016国家集训队论文集](国家集训队2016论文集.pdf)中\n加上myy优化的真$\\cdot$MTT效果拔群，实测比Vectory巨佬的三模NTT快了十倍多....而且还不用解同余方程！但这样对精度要求还是比较高的，所以必须预处理单位复根，或者偷懒用long double.建议预处理一下吧，这样精度高还跑得快\n\n~~如果实在理解不了，MTT的代码有很强的规律性，所以可以直接背~~\n\n## 真$\\cdot$代码：\n```cpp\ninline void DFT(Complex *A,Complex *w,int limit)\n{\n    for (int i=0;i<limit;++i)\n        if (i<rev[i]) std::swap(A[i],A[rev[i]]);\n    for (int mid=1;mid<limit;mid<<=1)\n        for (int R=mid<<1,j=0;j<limit;j+=R)\n            for (int k=0;k<mid;++k)\n            {\n                Complex x=A[j+k],y=w[limit/2/mid*k]*A[j+mid+k];\n                A[j+k]=x+y;\n                A[j+mid+k]=x-y;\n            }\n}\n\ninline void MTT(int* F,int* G,int deg)//求F*G,答案保存在ans[]里。\n{\n    static Complex A[maxn],B[maxn],C[maxn],D[maxn];\n    int limit=1,l=0;\n    while (limit<=(deg)) limit<<=1,++l;\n    for (int i=0;i<=deg;++i)\n        A[i]=Complex(F[i]&32767,F[i]>>15),B[i]=Complex(G[i]&32767,G[i]>>15);\n    for (int i=0;i<limit;++i)\n    {\n        w[i]=Complex(std::cos(i*Pi*2/limit),std::sin(i*Pi*2/limit)),winv[i]=w[i].conj();\n        rev[i]=(rev[i>>1]>>1)|((i&1)<<(l-1));\n    }\n    DFT(A,w,limit);DFT(B,w,limit);\n    Complex da,db,dc,dd;\n    static Complex DFTA[maxn],DFTB[maxn],DFTC[maxn],DFTD[maxn];\n    for (int i=0,j;i<limit;++i)\n    {\n        j=(limit-i)&(limit-1);\n        da=(A[i]+A[j].conj())*Complex(0.5,0);\n        db=(A[i]-A[j].conj())*Complex(0,-0.5);\n        dc=(B[i]+B[j].conj())*Complex(0.5,0);\n        dd=(B[i]-B[j].conj())*Complex(0,-0.5);\n        DFTA[i]=da*dc;\n        DFTB[i]=da*dd;\n        DFTC[i]=db*dc;\n        DFTD[i]=db*dd;\n    }\n    for (int i=0;i<limit;++i)\n        A[i]=DFTA[i]+DFTB[i]*Complex(0,1),B[i]=DFTC[i]+DFTD[i]*Complex(0,1);\n    DFT(A,winv,limit);DFT(B,winv,limit);\n    ll a,b,c,d;\n    for (int i=0;i<=deg;++i)\n    {\n        a=(ll)(A[i].real/limit+0.5)%P;\n        b=(ll)(A[i].imag/limit+0.5)%P;\n        c=(ll)(B[i].real/limit+0.5)%P;\n        d=(ll)(B[i].imag/limit+0.5)%P;\n        ans[i]=(((d<<30)+((b+c)<<15)+a)%P+P)%P;\n    }\n}\n```","slug":"多项式算法小结","published":1,"updated":"2019-02-24T15:03:21.016Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm3h002vv4tynplii5bv","content":"<p><img src=\"LCHAK.jpg\" alt=\"万古神犇卢宸昊，数论算法碾众生！\"></p>\n<h1 id=\"多项式求逆\"><a href=\"#多项式求逆\" class=\"headerlink\" title=\"多项式求逆\"></a>多项式求逆</h1><blockquote>\n<p>给定一个多项式 $F(x)$ ，请求出一个多项式$G(x)$， 满足 $F(x) * G(x) \\equiv 1 ( \\mathrm{mod\\:} x^n )$。系数对$998244353$取模。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>考虑边界情况：当$F(x)$只有常数项的时候，其逆元显然为常数项的逆元。<br>我们递归处理这个问题：<br>现在假设我们已知一个多项式$G’(x)$,满足：<br>$$F(x)<em>G’(x)\\equiv 1 (\\mathrm{mod\\:} \\ x^{\\lceil \\frac{n}{2} \\rceil})$$<br>要求的$G(x)$满足：<br>$$F(x)</em> G(x)\\equiv 1 (\\mathrm{mod\\:} \\ x^{\\lceil \\frac{n}{2} \\rceil})$$<br>两式相减得：<br>$$F(x)<em>[G(x)-G’(x)]\\equiv 0(\\mathrm{mod\\:} \\ x^{\\lceil \\frac{n}{2} \\rceil})$$<br>则可得：<br>$$G(x)-G’(x)\\equiv 0(\\mathrm{mod\\:}\\ x^{\\lceil \\frac{n}{2} \\rceil})$$<br>两边同时平方得：<br>$$G^2(x)-2G(x)</em>G’(x)+G’^2(x)\\equiv 0 (\\mathrm{mod\\:}\\ x^n)$$<br>上式乘上$F(x)$:<br>$$G(x)-2G’(x)+F(x)<em>G’^2(x)\\equiv 0 (\\mathrm{mod\\:}\\ x^n)$$<br>移项得：<br>$$G(x)\\equiv 2G’(x)-F(x)</em>G’^2(x) (\\mathrm{mod\\:}\\ x^n)$$<br>所以我们珂以从下一层的答案推到这一层来。时间复杂度满足递归式:<br>$$T(n)=T(\\frac{n}{2})+O(n \\log n)$$<br>解得$T(n)=O(n \\log n)$,与FFT复杂度相同。  </p>\n<h2 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">prework</span><span class=\"params\">(<span class=\"keyword\">int</span> limit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;limit;++i)</span><br><span class=\"line\">        rev[i]=(rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">    w[<span class=\"number\">0</span>]=winv[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;w[<span class=\"number\">1</span>]=qpow(g,(p<span class=\"number\">-1</span>)/limit,p);winv[<span class=\"number\">1</span>]=qpow(w[<span class=\"number\">1</span>],p<span class=\"number\">-2</span>,p);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;limit;++i)</span><br><span class=\"line\">        w[i]=(ll)w[i<span class=\"number\">-1</span>]*w[<span class=\"number\">1</span>]%p,winv[i]=(ll)winv[i<span class=\"number\">-1</span>]*winv[<span class=\"number\">1</span>]%p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">polyinv</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> *B,<span class=\"keyword\">int</span> deg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> C[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (deg==<span class=\"number\">1</span>) &#123;B[<span class=\"number\">0</span>]=qpow(A[<span class=\"number\">0</span>],p<span class=\"number\">-2</span>,p);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    polyinv(A,B,(deg+<span class=\"number\">1</span>)&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;limit=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (limit&lt;(deg&lt;&lt;<span class=\"number\">1</span>)) limit&lt;&lt;=<span class=\"number\">1</span>,++l;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;deg;++i) C[i]=A[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=deg;i&lt;limit;++i) C[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    prework(limit);</span><br><span class=\"line\">    DFT(C);DFT(B);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        B[i]=((ll)B[i]*((<span class=\"number\">2</span>-(ll)C[i]*B[i]%p+p)%p))%p;</span><br><span class=\"line\">    IDFT(B);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=deg;i&lt;limit;++i) B[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"分治FFT\"><a href=\"#分治FFT\" class=\"headerlink\" title=\"分治FFT\"></a>分治FFT</h1><p>生成函数真的是人类智慧。。。  </p>\n<blockquote>\n<p>给定长度为 $n-1$ 的数组 $g[1],g[2],..,g[n-1]g[1],g[2],..,g[n−1]$，求 $f[0],f[1],..,f[n-1]f[0],f[1],..,f[n−1]$，其中<br>$$f[i]=\\sum_{j=1}^i f[i-j]g[j]$$<br>边界为 $f[0]=1$。答案模$998244353$。</p>\n</blockquote>\n<p>考虑生成函数(不妨设$g[0]=0$)：<br>$$F(x)=\\sum_{i=0}^{\\infty} f[i]<em>x^i$$<br>$$G(x)=\\sum_{i=0}^{\\infty} g[i]</em>x^i$$<br>则我们只要求出来$F(x)$这个多项式就珂以确定$f[]$的值了。<br>由定义：<br>$$(F<em>G)=\\sum_{i=0}^{\\infty}[(\\sum_{j=0}^i f[j]</em>g[i-j])<em>x^i]$$<br>分类讨论：<br>当$i=0$时，<br>$$(F</em>G)(0)=0$$<br>当i&gt;0时，因为<br>$$f[i]=\\sum_{j=1}^i f[i-j]g[j]$$<br>所以<br>$$\\sum_{j=0}^i f[j]<em>g[i-j]=f[i]$$<br>即得：<br>$$(F</em>G)(i)=f[i]$$<br>故，<br>$$F(x)*G(x)=F(x)-f[0]=F(x)-1$$<br>解得：<br>$$F(x)=\\frac{1}{1-G(x)}$$<br>然后套多项式求逆板子就好了。</p>\n<h2 id=\"代码：（只贴主函数吧）\"><a href=\"#代码：（只贴主函数吧）\" class=\"headerlink\" title=\"代码：（只贴主函数吧）\"></a>代码：（只贴主函数吧）</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,A+i),A[i]=p-A[i];</span><br><span class=\"line\">    A[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    polyinv(A,B,n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,B[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"多项式对数函数\"><a href=\"#多项式对数函数\" class=\"headerlink\" title=\"多项式对数函数\"></a>多项式对数函数</h1><blockquote>\n<p>给出 $n-1$ 次多项式 $A(x)$,求一个 $\\bmod{\\:x^n}$下的多项式 $B(x)$，满足 $B(x) \\equiv \\ln A(x)$.在 $\\text{mod } 998244353$mod 998244353 下进行，且 $a_i \\in [0, 998244353) \\cap \\mathbb{Z}$</p>\n</blockquote>\n<p>对于一个函数$F(x)=\\sum kx^a$而言：<br>$$F’(x)=\\sum kax^{a-1}$$<br>同理，对于它的导函数而言，<br>$$\\int F’(x)dx=F(x)$$<br>即对于$F(x)=\\sum kx^a$，<br>$$\\int F(x)dx=(\\sum \\frac{k}{a+1}x^{a+1})+C\\ (C\\in \\mathbb{R})$$<br><strong>在下文中，一般把C视为0.</strong>  把B’视为关于x的复合函数，<br>$$\\because B(x)=\\ln A(x)$$<br>$$\\therefore B’(x)=A’(x)/A(x)$$<br>再做一次积分，得：<br>$$B(x)=\\int \\frac{A’(x)}{A(x)}$$<br>因为求导和积分我们都可以$O(n)$完成，所以总复杂度$O(n \\log n)$.</p>\n<h2 id=\"代码：-1\"><a href=\"#代码：-1\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">polyder</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> *B,<span class=\"keyword\">int</span> deg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;deg;++i)</span><br><span class=\"line\">        B[i<span class=\"number\">-1</span>]=(ll)A[i]*i%P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">polyint</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> *B,<span class=\"keyword\">int</span> deg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    B[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=deg;++i)</span><br><span class=\"line\">        B[i]=A[i<span class=\"number\">-1</span>]*(ll)qpow(i,P<span class=\"number\">-2</span>,P)%P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">polyln</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> *E,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> B[maxn],C[maxn];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(B,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(B));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(C,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(C));</span><br><span class=\"line\">    polyder(A,C,n);</span><br><span class=\"line\">    polyinv(A,B,n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> limit=<span class=\"number\">1</span>,l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (limit&lt;=(n&lt;&lt;<span class=\"number\">1</span>)) limit&lt;&lt;=<span class=\"number\">1</span>,++l;</span><br><span class=\"line\">    prework(limit,l);</span><br><span class=\"line\">    NTT(C,w,limit);NTT(B,w,limit);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        C[i]=(ll)C[i]*B[i]%P;</span><br><span class=\"line\">    NTT(C,winv,limit);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> inv=qpow(limit,P<span class=\"number\">-2</span>,P);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        C[i]=(ll)C[i]*inv%P;</span><br><span class=\"line\">    polyint(C,E,n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"多项式指数函数\"><a href=\"#多项式指数函数\" class=\"headerlink\" title=\"多项式指数函数\"></a>多项式指数函数</h1><blockquote>\n<p>给出 $n-1$次多项式 $A(x)$，求一个 $\\bmod{\\:x^n}$下的多项式 $B(x)$，满足 $B(x) \\equiv e^{A(x)}$.  </p>\n</blockquote>\n<p>这就比较麻烦。。。<br>我们考虑两边同时取对数：<br>$$\\ln B(x)\\equiv A(x) (\\bmod\\  x^n)$$<br>移项：<br>$$\\ln B(x)-A(x)\\equiv 0\\ (\\mathrm{mod\\ } x^n)$$<br>设$G(B(x))=\\ln B(x)-A(x)$<br>则要求的$B(x)$就是$G(B(x))$的零点。<br>假设我们已经求得$B_0(x)$,使得<br>$$G(B_0(x))\\equiv 0 (\\bmod \\ x^{\\lceil \\frac{n}{2}\\rceil})$$<br>考虑在$B_0(x)$处泰勒展开：<br>$$G(B(x))=\\frac{G(B_0(x))}{0!}+\\frac{G’(B_0(x))}{1!}(B(x)-B_0(x)) \\ (<em>)$$<br>为什么后面不再写了呢，是因为:<br>$$\\because G(B_0(x))\\equiv 0 (\\bmod \\ x^{\\lceil \\frac{n}{2}\\rceil}),G(B(x))\\equiv 0 (\\bmod \\ x^{\\lceil \\frac{n}{2}\\rceil})$$<br>$$\\therefore B_0(x)\\equiv B(x)\\ (\\bmod \\ x^{\\lceil \\frac{n}{2}\\rceil})$$<br>即$B_0(x)$和$B(x)$在$x^{\\lceil \\frac{n}{2}\\rceil}$之前都是相同的。<br>所以$(B(x)-B_0(x))^2$最低次的非零项次数也大于$n$.在膜意义下，后面的项就都为0了qwq。<br>由$G(B(x))\\equiv 0 \\ (\\bmod x^n)$,对$(</em>)$式整理可得：<br>$$B(x)\\equiv B_0(x)-\\frac{G(B_0(x)}{G’(B_0(x))}$$<br>即：<br>$$B(x)\\equiv B_0(x)*(1-\\ln B_0(x)+A(x)) \\ (\\bmod x^n)$$<br>套多项式ln板子即可。</p>\n<h2 id=\"代码：-2\"><a href=\"#代码：-2\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">polyexp</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> *B,<span class=\"keyword\">int</span> deg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (deg==<span class=\"number\">1</span>) &#123;B[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> T[maxn];</span><br><span class=\"line\">    polyexp(A,B,(deg+<span class=\"number\">1</span>)&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    polyln(B,T,deg);</span><br><span class=\"line\">    T[<span class=\"number\">0</span>]=(T[<span class=\"number\">0</span>]<span class=\"number\">-1</span>+P)%P;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;deg;++i) T[i]=A[i]-T[i];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> limit=<span class=\"number\">1</span>,l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (limit&lt;(deg&lt;&lt;<span class=\"number\">1</span>)) limit&lt;&lt;=<span class=\"number\">1</span>,++l;</span><br><span class=\"line\">    prework(limit,l);</span><br><span class=\"line\">    NTT(T,w,limit);NTT(B,w,limit);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        B[i]=(ll)B[i]*T[i]%P;</span><br><span class=\"line\">    NTT(B,winv,limit);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> inv=qpow(limit,P<span class=\"number\">-2</span>,P);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;deg;++i)</span><br><span class=\"line\">        B[i]=(ll)B[i]*inv%P;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=deg;i&lt;limit;++i) B[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"MTT（任意模数NTT）\"><a href=\"#MTT（任意模数NTT）\" class=\"headerlink\" title=\"MTT（任意模数NTT）\"></a>MTT（任意模数NTT）</h1><blockquote>\n<p>给定 $2$ 个多项式 $F(x), G(x)$ ，请求出 $F(x) * G(x)$。系数对 $p$ 取模，且不保证 $p$ 可以分解成 $p = a \\cdot 2^k + 1$之形式。<br>$1\\le n \\le 10^5\\ ;a_i,b_i\\le 10^9;p\\le 10^9+9$</p>\n</blockquote>\n<p>计数题膜数是$998244353$当然好，但就是有毒瘤出题人喜欢$998244853$,$99824453$和$10^9+7$。。。这样就比较麻烦。所以我们有了任意模数NTT这种操作，它有两种实现形式：三模数NTT和MTT。本文讲解MTT.（$\\texttt{Matthew99 Theorem Transform}$)<br>首先，如果没有精度问题的话，FFT是可以直接做的。但是数太大啦，FFT会爆精度。所以我们把多项式每一个系数拆成A*m+b的形式，m取$\\sqrt P$,一般实现时取$32768$，这样A.B就都在int范围之内，乘积就不会超出double的精度范围,把他们分别DFT，计算，再IDFT，就可以认为没有精度误差。就像这样做：<br>$$(am+b)(cm+d)=acm^2+(ad+bc)m+bd$$<br>这样做八次FFT，合并就可以了  </p>\n<h2 id=\"伪-cdot-代码\"><a href=\"#伪-cdot-代码\" class=\"headerlink\" title=\"伪$\\cdot$代码\"></a>伪$\\cdot$代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;complex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> Pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">400100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M=<span class=\"number\">30000</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,p,F[N],G[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> r[N],Ans[N],l,tt;</span><br><span class=\"line\"><span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; A1[N],B1[N],A2[N],B2[N],A[N],w[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; *P,<span class=\"keyword\">int</span> op)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;l;i++) <span class=\"keyword\">if</span>(r[i]&lt;i) swap(P[i],P[r[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;l;i&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p=i&lt;&lt;<span class=\"number\">1</span>,j=<span class=\"number\">0</span>;j&lt;l;j+=p)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;i;k++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; W=w[l/i*k];W.imag()*=op;</span><br><span class=\"line\">                <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; X=P[j+k],Y=W*P[j+k+i];</span><br><span class=\"line\">                P[j+k]=X+Y;P[j+k+i]=X-Y;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Work</span><span class=\"params\">(<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; *P1,<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; *P2,<span class=\"keyword\">int</span> base)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;l;i++) A[i]=P1[i]*P2[i];FFT(A,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=m+n;i++) (Ans[i]+=(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)(A[i].real()/l+<span class=\"number\">0.5</span>)%p*base%p)%=p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;n,&amp;m,&amp;p);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,x;i&lt;=n;i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x),A1[i].real()=x/M,B1[i].real()=x%M;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,x;i&lt;=m;i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x),A2[i].real()=x/M,B2[i].real()=x%M;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(l=<span class=\"number\">1</span>;l&lt;=n+m;l&lt;&lt;=<span class=\"number\">1</span>) tt++;tt--;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;l;i++) r[i]=(r[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;tt);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;l;i++) w[i].real()=<span class=\"built_in\">cos</span>(Pi/l*i),w[i].imag()=<span class=\"built_in\">sin</span>(Pi/l*i);</span><br><span class=\"line\">    FFT(A1,<span class=\"number\">1</span>);FFT(A2,<span class=\"number\">1</span>);FFT(B1,<span class=\"number\">1</span>);FFT(B2,<span class=\"number\">1</span>);</span><br><span class=\"line\">    Work(A1,A2,M*M%p); Work(A1,B2,M%p);</span><br><span class=\"line\">    Work(A2,B1,M%p); Work(B1,B2,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=m+n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,Ans[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>。。。吗？<br>八次FFT是不是有点慢呐qwq..<br>所以毛爷爷提出了一个优化方案，可以用四次FFT实现这个功能！</p>\n<h2 id=\"前置知识：一次DFT实现将两个多项式在点值和系数表达之间转换（Orz-myy\"><a href=\"#前置知识：一次DFT实现将两个多项式在点值和系数表达之间转换（Orz-myy\" class=\"headerlink\" title=\"前置知识：一次DFT实现将两个多项式在点值和系数表达之间转换（Orz myy\"></a>前置知识：一次DFT实现将两个多项式在点值和系数表达之间转换（Orz myy</h2><p>这部分可以去看毛爷爷论文,在<a href=\"国家集训队2016论文集.pdf\">2016国家集训队论文集</a>中<br>加上myy优化的真$\\cdot$MTT效果拔群，实测比Vectory巨佬的三模NTT快了十倍多….而且还不用解同余方程！但这样对精度要求还是比较高的，所以必须预处理单位复根，或者偷懒用long double.建议预处理一下吧，这样精度高还跑得快</p>\n<p><del>如果实在理解不了，MTT的代码有很强的规律性，所以可以直接背</del></p>\n<h2 id=\"真-cdot-代码：\"><a href=\"#真-cdot-代码：\" class=\"headerlink\" title=\"真$\\cdot$代码：\"></a>真$\\cdot$代码：</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(Complex *A,Complex *w,<span class=\"keyword\">int</span> limit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;rev[i]) <span class=\"built_in\">std</span>::swap(A[i],A[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> mid=<span class=\"number\">1</span>;mid&lt;limit;mid&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> R=mid&lt;&lt;<span class=\"number\">1</span>,j=<span class=\"number\">0</span>;j&lt;limit;j+=R)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;mid;++k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Complex x=A[j+k],y=w[limit/<span class=\"number\">2</span>/mid*k]*A[j+mid+k];</span><br><span class=\"line\">                A[j+k]=x+y;</span><br><span class=\"line\">                A[j+mid+k]=x-y;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">MTT</span><span class=\"params\">(<span class=\"keyword\">int</span>* F,<span class=\"keyword\">int</span>* G,<span class=\"keyword\">int</span> deg)</span><span class=\"comment\">//求F*G,答案保存在ans[]里。</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Complex A[maxn],B[maxn],C[maxn],D[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> limit=<span class=\"number\">1</span>,l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (limit&lt;=(deg)) limit&lt;&lt;=<span class=\"number\">1</span>,++l;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=deg;++i)</span><br><span class=\"line\">        A[i]=Complex(F[i]&amp;<span class=\"number\">32767</span>,F[i]&gt;&gt;<span class=\"number\">15</span>),B[i]=Complex(G[i]&amp;<span class=\"number\">32767</span>,G[i]&gt;&gt;<span class=\"number\">15</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w[i]=Complex(<span class=\"built_in\">std</span>::<span class=\"built_in\">cos</span>(i*Pi*<span class=\"number\">2</span>/limit),<span class=\"built_in\">std</span>::<span class=\"built_in\">sin</span>(i*Pi*<span class=\"number\">2</span>/limit)),winv[i]=w[i].conj();</span><br><span class=\"line\">        rev[i]=(rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DFT(A,w,limit);DFT(B,w,limit);</span><br><span class=\"line\">    Complex da,db,dc,dd;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Complex DFTA[maxn],DFTB[maxn],DFTC[maxn],DFTD[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,j;i&lt;limit;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        j=(limit-i)&amp;(limit<span class=\"number\">-1</span>);</span><br><span class=\"line\">        da=(A[i]+A[j].conj())*Complex(<span class=\"number\">0.5</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        db=(A[i]-A[j].conj())*Complex(<span class=\"number\">0</span>,<span class=\"number\">-0.5</span>);</span><br><span class=\"line\">        dc=(B[i]+B[j].conj())*Complex(<span class=\"number\">0.5</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        dd=(B[i]-B[j].conj())*Complex(<span class=\"number\">0</span>,<span class=\"number\">-0.5</span>);</span><br><span class=\"line\">        DFTA[i]=da*dc;</span><br><span class=\"line\">        DFTB[i]=da*dd;</span><br><span class=\"line\">        DFTC[i]=db*dc;</span><br><span class=\"line\">        DFTD[i]=db*dd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        A[i]=DFTA[i]+DFTB[i]*Complex(<span class=\"number\">0</span>,<span class=\"number\">1</span>),B[i]=DFTC[i]+DFTD[i]*Complex(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    DFT(A,winv,limit);DFT(B,winv,limit);</span><br><span class=\"line\">    ll a,b,c,d;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=deg;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a=(ll)(A[i].real/limit+<span class=\"number\">0.5</span>)%P;</span><br><span class=\"line\">        b=(ll)(A[i].imag/limit+<span class=\"number\">0.5</span>)%P;</span><br><span class=\"line\">        c=(ll)(B[i].real/limit+<span class=\"number\">0.5</span>)%P;</span><br><span class=\"line\">        d=(ll)(B[i].imag/limit+<span class=\"number\">0.5</span>)%P;</span><br><span class=\"line\">        ans[i]=(((d&lt;&lt;<span class=\"number\">30</span>)+((b+c)&lt;&lt;<span class=\"number\">15</span>)+a)%P+P)%P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"LCHAK.jpg\" alt=\"万古神犇卢宸昊，数论算法碾众生！\"></p>\n<h1 id=\"多项式求逆\"><a href=\"#多项式求逆\" class=\"headerlink\" title=\"多项式求逆\"></a>多项式求逆</h1><blockquote>\n<p>给定一个多项式 $F(x)$ ，请求出一个多项式$G(x)$， 满足 $F(x) * G(x) \\equiv 1 ( \\mathrm{mod\\:} x^n )$。系数对$998244353$取模。</p>\n</blockquote>","more":"<p>考虑边界情况：当$F(x)$只有常数项的时候，其逆元显然为常数项的逆元。<br>我们递归处理这个问题：<br>现在假设我们已知一个多项式$G’(x)$,满足：<br>$$F(x)<em>G’(x)\\equiv 1 (\\mathrm{mod\\:} \\ x^{\\lceil \\frac{n}{2} \\rceil})$$<br>要求的$G(x)$满足：<br>$$F(x)</em> G(x)\\equiv 1 (\\mathrm{mod\\:} \\ x^{\\lceil \\frac{n}{2} \\rceil})$$<br>两式相减得：<br>$$F(x)<em>[G(x)-G’(x)]\\equiv 0(\\mathrm{mod\\:} \\ x^{\\lceil \\frac{n}{2} \\rceil})$$<br>则可得：<br>$$G(x)-G’(x)\\equiv 0(\\mathrm{mod\\:}\\ x^{\\lceil \\frac{n}{2} \\rceil})$$<br>两边同时平方得：<br>$$G^2(x)-2G(x)</em>G’(x)+G’^2(x)\\equiv 0 (\\mathrm{mod\\:}\\ x^n)$$<br>上式乘上$F(x)$:<br>$$G(x)-2G’(x)+F(x)<em>G’^2(x)\\equiv 0 (\\mathrm{mod\\:}\\ x^n)$$<br>移项得：<br>$$G(x)\\equiv 2G’(x)-F(x)</em>G’^2(x) (\\mathrm{mod\\:}\\ x^n)$$<br>所以我们珂以从下一层的答案推到这一层来。时间复杂度满足递归式:<br>$$T(n)=T(\\frac{n}{2})+O(n \\log n)$$<br>解得$T(n)=O(n \\log n)$,与FFT复杂度相同。  </p>\n<h2 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">prework</span><span class=\"params\">(<span class=\"keyword\">int</span> limit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;limit;++i)</span><br><span class=\"line\">        rev[i]=(rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">    w[<span class=\"number\">0</span>]=winv[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;w[<span class=\"number\">1</span>]=qpow(g,(p<span class=\"number\">-1</span>)/limit,p);winv[<span class=\"number\">1</span>]=qpow(w[<span class=\"number\">1</span>],p<span class=\"number\">-2</span>,p);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;limit;++i)</span><br><span class=\"line\">        w[i]=(ll)w[i<span class=\"number\">-1</span>]*w[<span class=\"number\">1</span>]%p,winv[i]=(ll)winv[i<span class=\"number\">-1</span>]*winv[<span class=\"number\">1</span>]%p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">polyinv</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> *B,<span class=\"keyword\">int</span> deg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> C[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (deg==<span class=\"number\">1</span>) &#123;B[<span class=\"number\">0</span>]=qpow(A[<span class=\"number\">0</span>],p<span class=\"number\">-2</span>,p);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    polyinv(A,B,(deg+<span class=\"number\">1</span>)&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;limit=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (limit&lt;(deg&lt;&lt;<span class=\"number\">1</span>)) limit&lt;&lt;=<span class=\"number\">1</span>,++l;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;deg;++i) C[i]=A[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=deg;i&lt;limit;++i) C[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    prework(limit);</span><br><span class=\"line\">    DFT(C);DFT(B);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        B[i]=((ll)B[i]*((<span class=\"number\">2</span>-(ll)C[i]*B[i]%p+p)%p))%p;</span><br><span class=\"line\">    IDFT(B);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=deg;i&lt;limit;++i) B[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"分治FFT\"><a href=\"#分治FFT\" class=\"headerlink\" title=\"分治FFT\"></a>分治FFT</h1><p>生成函数真的是人类智慧。。。  </p>\n<blockquote>\n<p>给定长度为 $n-1$ 的数组 $g[1],g[2],..,g[n-1]g[1],g[2],..,g[n−1]$，求 $f[0],f[1],..,f[n-1]f[0],f[1],..,f[n−1]$，其中<br>$$f[i]=\\sum_{j=1}^i f[i-j]g[j]$$<br>边界为 $f[0]=1$。答案模$998244353$。</p>\n</blockquote>\n<p>考虑生成函数(不妨设$g[0]=0$)：<br>$$F(x)=\\sum_{i=0}^{\\infty} f[i]<em>x^i$$<br>$$G(x)=\\sum_{i=0}^{\\infty} g[i]</em>x^i$$<br>则我们只要求出来$F(x)$这个多项式就珂以确定$f[]$的值了。<br>由定义：<br>$$(F<em>G)=\\sum_{i=0}^{\\infty}[(\\sum_{j=0}^i f[j]</em>g[i-j])<em>x^i]$$<br>分类讨论：<br>当$i=0$时，<br>$$(F</em>G)(0)=0$$<br>当i&gt;0时，因为<br>$$f[i]=\\sum_{j=1}^i f[i-j]g[j]$$<br>所以<br>$$\\sum_{j=0}^i f[j]<em>g[i-j]=f[i]$$<br>即得：<br>$$(F</em>G)(i)=f[i]$$<br>故，<br>$$F(x)*G(x)=F(x)-f[0]=F(x)-1$$<br>解得：<br>$$F(x)=\\frac{1}{1-G(x)}$$<br>然后套多项式求逆板子就好了。</p>\n<h2 id=\"代码：（只贴主函数吧）\"><a href=\"#代码：（只贴主函数吧）\" class=\"headerlink\" title=\"代码：（只贴主函数吧）\"></a>代码：（只贴主函数吧）</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,A+i),A[i]=p-A[i];</span><br><span class=\"line\">    A[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    polyinv(A,B,n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,B[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"多项式对数函数\"><a href=\"#多项式对数函数\" class=\"headerlink\" title=\"多项式对数函数\"></a>多项式对数函数</h1><blockquote>\n<p>给出 $n-1$ 次多项式 $A(x)$,求一个 $\\bmod{\\:x^n}$下的多项式 $B(x)$，满足 $B(x) \\equiv \\ln A(x)$.在 $\\text{mod } 998244353$mod 998244353 下进行，且 $a_i \\in [0, 998244353) \\cap \\mathbb{Z}$</p>\n</blockquote>\n<p>对于一个函数$F(x)=\\sum kx^a$而言：<br>$$F’(x)=\\sum kax^{a-1}$$<br>同理，对于它的导函数而言，<br>$$\\int F’(x)dx=F(x)$$<br>即对于$F(x)=\\sum kx^a$，<br>$$\\int F(x)dx=(\\sum \\frac{k}{a+1}x^{a+1})+C\\ (C\\in \\mathbb{R})$$<br><strong>在下文中，一般把C视为0.</strong>  把B’视为关于x的复合函数，<br>$$\\because B(x)=\\ln A(x)$$<br>$$\\therefore B’(x)=A’(x)/A(x)$$<br>再做一次积分，得：<br>$$B(x)=\\int \\frac{A’(x)}{A(x)}$$<br>因为求导和积分我们都可以$O(n)$完成，所以总复杂度$O(n \\log n)$.</p>\n<h2 id=\"代码：-1\"><a href=\"#代码：-1\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">polyder</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> *B,<span class=\"keyword\">int</span> deg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;deg;++i)</span><br><span class=\"line\">        B[i<span class=\"number\">-1</span>]=(ll)A[i]*i%P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">polyint</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> *B,<span class=\"keyword\">int</span> deg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    B[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=deg;++i)</span><br><span class=\"line\">        B[i]=A[i<span class=\"number\">-1</span>]*(ll)qpow(i,P<span class=\"number\">-2</span>,P)%P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">polyln</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> *E,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> B[maxn],C[maxn];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(B,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(B));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(C,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(C));</span><br><span class=\"line\">    polyder(A,C,n);</span><br><span class=\"line\">    polyinv(A,B,n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> limit=<span class=\"number\">1</span>,l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (limit&lt;=(n&lt;&lt;<span class=\"number\">1</span>)) limit&lt;&lt;=<span class=\"number\">1</span>,++l;</span><br><span class=\"line\">    prework(limit,l);</span><br><span class=\"line\">    NTT(C,w,limit);NTT(B,w,limit);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        C[i]=(ll)C[i]*B[i]%P;</span><br><span class=\"line\">    NTT(C,winv,limit);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> inv=qpow(limit,P<span class=\"number\">-2</span>,P);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        C[i]=(ll)C[i]*inv%P;</span><br><span class=\"line\">    polyint(C,E,n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"多项式指数函数\"><a href=\"#多项式指数函数\" class=\"headerlink\" title=\"多项式指数函数\"></a>多项式指数函数</h1><blockquote>\n<p>给出 $n-1$次多项式 $A(x)$，求一个 $\\bmod{\\:x^n}$下的多项式 $B(x)$，满足 $B(x) \\equiv e^{A(x)}$.  </p>\n</blockquote>\n<p>这就比较麻烦。。。<br>我们考虑两边同时取对数：<br>$$\\ln B(x)\\equiv A(x) (\\bmod\\  x^n)$$<br>移项：<br>$$\\ln B(x)-A(x)\\equiv 0\\ (\\mathrm{mod\\ } x^n)$$<br>设$G(B(x))=\\ln B(x)-A(x)$<br>则要求的$B(x)$就是$G(B(x))$的零点。<br>假设我们已经求得$B_0(x)$,使得<br>$$G(B_0(x))\\equiv 0 (\\bmod \\ x^{\\lceil \\frac{n}{2}\\rceil})$$<br>考虑在$B_0(x)$处泰勒展开：<br>$$G(B(x))=\\frac{G(B_0(x))}{0!}+\\frac{G’(B_0(x))}{1!}(B(x)-B_0(x)) \\ (<em>)$$<br>为什么后面不再写了呢，是因为:<br>$$\\because G(B_0(x))\\equiv 0 (\\bmod \\ x^{\\lceil \\frac{n}{2}\\rceil}),G(B(x))\\equiv 0 (\\bmod \\ x^{\\lceil \\frac{n}{2}\\rceil})$$<br>$$\\therefore B_0(x)\\equiv B(x)\\ (\\bmod \\ x^{\\lceil \\frac{n}{2}\\rceil})$$<br>即$B_0(x)$和$B(x)$在$x^{\\lceil \\frac{n}{2}\\rceil}$之前都是相同的。<br>所以$(B(x)-B_0(x))^2$最低次的非零项次数也大于$n$.在膜意义下，后面的项就都为0了qwq。<br>由$G(B(x))\\equiv 0 \\ (\\bmod x^n)$,对$(</em>)$式整理可得：<br>$$B(x)\\equiv B_0(x)-\\frac{G(B_0(x)}{G’(B_0(x))}$$<br>即：<br>$$B(x)\\equiv B_0(x)*(1-\\ln B_0(x)+A(x)) \\ (\\bmod x^n)$$<br>套多项式ln板子即可。</p>\n<h2 id=\"代码：-2\"><a href=\"#代码：-2\" class=\"headerlink\" title=\"代码：\"></a>代码：</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">polyexp</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> *B,<span class=\"keyword\">int</span> deg)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (deg==<span class=\"number\">1</span>) &#123;B[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> T[maxn];</span><br><span class=\"line\">    polyexp(A,B,(deg+<span class=\"number\">1</span>)&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    polyln(B,T,deg);</span><br><span class=\"line\">    T[<span class=\"number\">0</span>]=(T[<span class=\"number\">0</span>]<span class=\"number\">-1</span>+P)%P;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;deg;++i) T[i]=A[i]-T[i];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> limit=<span class=\"number\">1</span>,l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (limit&lt;(deg&lt;&lt;<span class=\"number\">1</span>)) limit&lt;&lt;=<span class=\"number\">1</span>,++l;</span><br><span class=\"line\">    prework(limit,l);</span><br><span class=\"line\">    NTT(T,w,limit);NTT(B,w,limit);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        B[i]=(ll)B[i]*T[i]%P;</span><br><span class=\"line\">    NTT(B,winv,limit);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> inv=qpow(limit,P<span class=\"number\">-2</span>,P);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;deg;++i)</span><br><span class=\"line\">        B[i]=(ll)B[i]*inv%P;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=deg;i&lt;limit;++i) B[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"MTT（任意模数NTT）\"><a href=\"#MTT（任意模数NTT）\" class=\"headerlink\" title=\"MTT（任意模数NTT）\"></a>MTT（任意模数NTT）</h1><blockquote>\n<p>给定 $2$ 个多项式 $F(x), G(x)$ ，请求出 $F(x) * G(x)$。系数对 $p$ 取模，且不保证 $p$ 可以分解成 $p = a \\cdot 2^k + 1$之形式。<br>$1\\le n \\le 10^5\\ ;a_i,b_i\\le 10^9;p\\le 10^9+9$</p>\n</blockquote>\n<p>计数题膜数是$998244353$当然好，但就是有毒瘤出题人喜欢$998244853$,$99824453$和$10^9+7$。。。这样就比较麻烦。所以我们有了任意模数NTT这种操作，它有两种实现形式：三模数NTT和MTT。本文讲解MTT.（$\\texttt{Matthew99 Theorem Transform}$)<br>首先，如果没有精度问题的话，FFT是可以直接做的。但是数太大啦，FFT会爆精度。所以我们把多项式每一个系数拆成A*m+b的形式，m取$\\sqrt P$,一般实现时取$32768$，这样A.B就都在int范围之内，乘积就不会超出double的精度范围,把他们分别DFT，计算，再IDFT，就可以认为没有精度误差。就像这样做：<br>$$(am+b)(cm+d)=acm^2+(ad+bc)m+bd$$<br>这样做八次FFT，合并就可以了  </p>\n<h2 id=\"伪-cdot-代码\"><a href=\"#伪-cdot-代码\" class=\"headerlink\" title=\"伪$\\cdot$代码\"></a>伪$\\cdot$代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;complex&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> Pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N=<span class=\"number\">400100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> M=<span class=\"number\">30000</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n,m,p,F[N],G[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> r[N],Ans[N],l,tt;</span><br><span class=\"line\"><span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; A1[N],B1[N],A2[N],B2[N],A[N],w[N];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FFT</span><span class=\"params\">(<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; *P,<span class=\"keyword\">int</span> op)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;l;i++) <span class=\"keyword\">if</span>(r[i]&lt;i) swap(P[i],P[r[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;l;i&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p=i&lt;&lt;<span class=\"number\">1</span>,j=<span class=\"number\">0</span>;j&lt;l;j+=p)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;i;k++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; W=w[l/i*k];W.imag()*=op;</span><br><span class=\"line\">                <span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; X=P[j+k],Y=W*P[j+k+i];</span><br><span class=\"line\">                P[j+k]=X+Y;P[j+k+i]=X-Y;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Work</span><span class=\"params\">(<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; *P1,<span class=\"keyword\">complex</span>&lt;<span class=\"keyword\">double</span>&gt; *P2,<span class=\"keyword\">int</span> base)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;l;i++) A[i]=P1[i]*P2[i];FFT(A,<span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=m+n;i++) (Ans[i]+=(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)(A[i].real()/l+<span class=\"number\">0.5</span>)%p*base%p)%=p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;n,&amp;m,&amp;p);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,x;i&lt;=n;i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x),A1[i].real()=x/M,B1[i].real()=x%M;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,x;i&lt;=m;i++) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;x),A2[i].real()=x/M,B2[i].real()=x%M;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(l=<span class=\"number\">1</span>;l&lt;=n+m;l&lt;&lt;=<span class=\"number\">1</span>) tt++;tt--;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;l;i++) r[i]=(r[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;tt);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;l;i++) w[i].real()=<span class=\"built_in\">cos</span>(Pi/l*i),w[i].imag()=<span class=\"built_in\">sin</span>(Pi/l*i);</span><br><span class=\"line\">    FFT(A1,<span class=\"number\">1</span>);FFT(A2,<span class=\"number\">1</span>);FFT(B1,<span class=\"number\">1</span>);FFT(B2,<span class=\"number\">1</span>);</span><br><span class=\"line\">    Work(A1,A2,M*M%p); Work(A1,B2,M%p);</span><br><span class=\"line\">    Work(A2,B1,M%p); Work(B1,B2,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=m+n;i++) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,Ans[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>。。。吗？<br>八次FFT是不是有点慢呐qwq..<br>所以毛爷爷提出了一个优化方案，可以用四次FFT实现这个功能！</p>\n<h2 id=\"前置知识：一次DFT实现将两个多项式在点值和系数表达之间转换（Orz-myy\"><a href=\"#前置知识：一次DFT实现将两个多项式在点值和系数表达之间转换（Orz-myy\" class=\"headerlink\" title=\"前置知识：一次DFT实现将两个多项式在点值和系数表达之间转换（Orz myy\"></a>前置知识：一次DFT实现将两个多项式在点值和系数表达之间转换（Orz myy</h2><p>这部分可以去看毛爷爷论文,在<a href=\"国家集训队2016论文集.pdf\">2016国家集训队论文集</a>中<br>加上myy优化的真$\\cdot$MTT效果拔群，实测比Vectory巨佬的三模NTT快了十倍多….而且还不用解同余方程！但这样对精度要求还是比较高的，所以必须预处理单位复根，或者偷懒用long double.建议预处理一下吧，这样精度高还跑得快</p>\n<p><del>如果实在理解不了，MTT的代码有很强的规律性，所以可以直接背</del></p>\n<h2 id=\"真-cdot-代码：\"><a href=\"#真-cdot-代码：\" class=\"headerlink\" title=\"真$\\cdot$代码：\"></a>真$\\cdot$代码：</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(Complex *A,Complex *w,<span class=\"keyword\">int</span> limit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;rev[i]) <span class=\"built_in\">std</span>::swap(A[i],A[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> mid=<span class=\"number\">1</span>;mid&lt;limit;mid&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> R=mid&lt;&lt;<span class=\"number\">1</span>,j=<span class=\"number\">0</span>;j&lt;limit;j+=R)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;mid;++k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Complex x=A[j+k],y=w[limit/<span class=\"number\">2</span>/mid*k]*A[j+mid+k];</span><br><span class=\"line\">                A[j+k]=x+y;</span><br><span class=\"line\">                A[j+mid+k]=x-y;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">MTT</span><span class=\"params\">(<span class=\"keyword\">int</span>* F,<span class=\"keyword\">int</span>* G,<span class=\"keyword\">int</span> deg)</span><span class=\"comment\">//求F*G,答案保存在ans[]里。</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Complex A[maxn],B[maxn],C[maxn],D[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> limit=<span class=\"number\">1</span>,l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (limit&lt;=(deg)) limit&lt;&lt;=<span class=\"number\">1</span>,++l;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=deg;++i)</span><br><span class=\"line\">        A[i]=Complex(F[i]&amp;<span class=\"number\">32767</span>,F[i]&gt;&gt;<span class=\"number\">15</span>),B[i]=Complex(G[i]&amp;<span class=\"number\">32767</span>,G[i]&gt;&gt;<span class=\"number\">15</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w[i]=Complex(<span class=\"built_in\">std</span>::<span class=\"built_in\">cos</span>(i*Pi*<span class=\"number\">2</span>/limit),<span class=\"built_in\">std</span>::<span class=\"built_in\">sin</span>(i*Pi*<span class=\"number\">2</span>/limit)),winv[i]=w[i].conj();</span><br><span class=\"line\">        rev[i]=(rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    DFT(A,w,limit);DFT(B,w,limit);</span><br><span class=\"line\">    Complex da,db,dc,dd;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> Complex DFTA[maxn],DFTB[maxn],DFTC[maxn],DFTD[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,j;i&lt;limit;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        j=(limit-i)&amp;(limit<span class=\"number\">-1</span>);</span><br><span class=\"line\">        da=(A[i]+A[j].conj())*Complex(<span class=\"number\">0.5</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        db=(A[i]-A[j].conj())*Complex(<span class=\"number\">0</span>,<span class=\"number\">-0.5</span>);</span><br><span class=\"line\">        dc=(B[i]+B[j].conj())*Complex(<span class=\"number\">0.5</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        dd=(B[i]-B[j].conj())*Complex(<span class=\"number\">0</span>,<span class=\"number\">-0.5</span>);</span><br><span class=\"line\">        DFTA[i]=da*dc;</span><br><span class=\"line\">        DFTB[i]=da*dd;</span><br><span class=\"line\">        DFTC[i]=db*dc;</span><br><span class=\"line\">        DFTD[i]=db*dd;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        A[i]=DFTA[i]+DFTB[i]*Complex(<span class=\"number\">0</span>,<span class=\"number\">1</span>),B[i]=DFTC[i]+DFTD[i]*Complex(<span class=\"number\">0</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    DFT(A,winv,limit);DFT(B,winv,limit);</span><br><span class=\"line\">    ll a,b,c,d;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=deg;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a=(ll)(A[i].real/limit+<span class=\"number\">0.5</span>)%P;</span><br><span class=\"line\">        b=(ll)(A[i].imag/limit+<span class=\"number\">0.5</span>)%P;</span><br><span class=\"line\">        c=(ll)(B[i].real/limit+<span class=\"number\">0.5</span>)%P;</span><br><span class=\"line\">        d=(ll)(B[i].imag/limit+<span class=\"number\">0.5</span>)%P;</span><br><span class=\"line\">        ans[i]=(((d&lt;&lt;<span class=\"number\">30</span>)+((b+c)&lt;&lt;<span class=\"number\">15</span>)+a)%P+P)%P;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"高斯消元-行列式-矩阵树定理学习笔记","date":"2019-03-06T08:29:37.000Z","comments":1,"_content":"# 高斯消元\n## 引入\n高斯消元听起来非常高大上，其实就是我们初中学的加减消元、代入消元法的程序化实现罢了。  \n考虑一个方程组\n$$\n\\begin{cases}\nA_{1,1} x_1+A_{1,2} x_2+A_{1,3} x_3+...+A_{1,n} x_n=C_1 \\\\\\\\\nA_{2,1} x_1+A_{2,2} x_2+A_{2,3} x_3+...+A_{2,n} x_n=C_2 \\\\\\\\\n...\\\\\\\\\nA_{k,1} x_1+A_{k,2} x_2+A_{k,3} x_3+...+A_{k,n} x_n=C_n \\\\\\\\\n\\end{cases}\n$$\n我们要求出它的一组解，或者判定无解或无穷多组解。这就是高斯消元的基础应用。  \n\n<!-- more -->\n\n## 概念\n**系数矩阵**：上面的方程组中系数A组成的$n\\times n$矩阵就是它的系数矩阵。  \n**增广矩阵**：系数矩阵的最右边补上一列，表示$C_1,C_2,...,C_n$，得到的$n\\times (n+1)$矩阵就成为增广矩阵。  \n**初等行列变换**：  \n1. 以一个非零的数乘矩阵的某一行（列）  \n2. 把矩阵的某一行（列）的c倍加到另一行（列），这里c是任意数\n3. 互换矩阵中两行（列）的位置  \n\n\n**阶梯型矩阵**：一个矩阵成为阶梯型矩阵，需满足两个条件：  \n1. 如果它既有零行，又有非零行，则零行在下，非零行在上。  \n2. 如果它有非零行，则每个非零行的第一个非零元素所在列号自上而下严格单调上升。    \n**转置**：把一个矩阵的行变成列，列变成行，得到的矩阵就是原矩阵的转置。记为$A^T$  \n如图所示，这就是一个阶梯型矩阵  \n![示例1](Matrix1.jpg)\n\n**三角矩阵**：三角矩阵分上三角矩阵和下三角矩阵两种。上三角矩阵的对角线左下方的系数全部为零，下三角矩阵的对角线右上方的系数全部为零。\n\n## 算法流程\n它的基本思想是通过初等行变换，把增广矩阵消成上三角矩阵，此时最后一个非零行必然是$ax=b$的形式。所以我们已经得到了一个未知数的值。把这个值代回上面的所有方程中，则它的上面一行也变成了$ax=b$的形式...重复下去，我们就可以得到所有未知数的值了。^_^\n## 代码 （SDOI2006 线性方程组）\n改编自 ComeIntoPower，在此对他表示谢意QwQ\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n\nusing std::fabs;\nusing std::swap;\n\nconst int maxn=1e3+10;\nconst double eps=1e-9;\n\ninline int Gauss_Elimination(double (*A)[maxn],double* f,int n)\n{\n    for (int i=1,c=1,j;i<=n;++i)\n    {\n        for (j=c;j<=n && fabs(A[j][i])<eps;++j);\n        if (j==n+1) continue;\n        for (int k=1;k<=n+1;++k) swap(A[c][k],A[j][k]);\n        for (int j=c+1;j<=n;++j)\n            if (fabs(A[j][i])>eps) \n            {\n                double t=A[j][i]/A[c][i];\n                for (int k=i;k<=n+1;++k)\n                    A[j][k]-=t*A[c][k];\n            }\n        ++c;\n    }\n    bool NoAnswer=false,InfAnswer=false;\n    for (int i=n;i;--i)\n    {\n        bool NoVariables=true;\n        for (int j=i;j<=n;++j)\n            if (fabs(A[i][j])>eps) NoVariables=false;\n        if (NoVariables)\n            if (fabs(A[i][n+1])>eps) NoAnswer=true;// 0=C,C!=0,无解\n            else InfAnswer=true;// 0=0,无穷多组解\n        else\n        {\n            for (int j=i+1;j<=n;++j) A[i][n+1]-=A[i][j]*f[j];\n            f[i]=A[i][n+1]/A[i][i];\n        }\n    }\n    if (NoAnswer) return -1;\n    return !InfAnswer; //无穷多解返回0，有唯一解返回1\n}\n\nint main()\n{\n    static double A[maxn][maxn],f[maxn];\n    int n;\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;++i)\n        for (int j=1;j<=n+1;++j)\n            scanf(\"%lf\",&A[i][j]);\n    int result=Gauss_Elimination(A,f,n);\n    if (result^1) return printf(\"%d\\n\",result)&0;\n    for (int i=1;i<=n;++i) printf(\"x%d=%.2lf\\n\",i,f[i]);\n}\n```\n## 解释：\n1. * Q: 咋判断无解和无穷多组解鸭？\n   * A:当消元完成后，回代之前时，方程组若出现除了常数项之外全零的行，则一定无解或无穷多组解。（常数项为0是无穷多组解，非零则无解）\n2.  * Q：代码中那个变量c的作用是啥呀？为啥不能用i代替呢？\n    * A：因为如果把c换成i，当存在一个自由元的时候，可能没法消出来全零行，而是直接跳过了本该消成全零行的那一行，将其放在了原来的位置，导致判断无穷解和无解的时候出偏差。（详见洛谷本题讨论的“Hack+1”篇目).\n  \n# 行列式\n## 概念：\n**主子式**：对于一个n阶矩阵A，选取它的任意i行，将行号记为$T[1..i]$，并同时选取第$T[1..n]$列，得到的新矩阵即为原矩阵的一个i阶主子式。\n新矩阵的行列式也可称为$|A|$的一个i阶主子式。\n\n**行列式**：行列式是一个标量。对一个矩阵A来说，它的行列式（记作$|A|$)的定义是\n$$|A|=\\sum_P(-1)^{\\delta(P)}\\prod_{k=1}^n A_{i,P_k} $$\n其中，$P$取遍$1..n$的所有排列，$\\delta(P)$为P的逆序对数。这个柿子很好理解：就是从每行每列各选一个数，一共n个数，\n行列式有以下性质：  \n1. $|A|=|A^T|$ (由定义，比较显然，在此不证)\n2. 将一个矩阵的两行互换，行列式变号。  \n为了证明这个定理，我们需要首先证明一个引理：\n    * 引理：一个排列的两项交换，逆序对改变量为奇数。\n      * 引理证明：不妨设$a<b$.这样的交换对位置在a前面和在b后面的数没有影响，所以只需要考虑$a,b$之间的这个子区间。设交换的两项为$a,b.$把位置在$a.b$之间的数分类：设属于$(-\\infty ,a)$的数量为$x$,属于$(a,b)$的数量为$y$,属于$(b,+\\infty )$的数量为$z$。区间里交换以前的逆序对数为$x+z$,交换后为$(x+y)+(y+z)+1$，差值为$2y+1$,是奇数。\n  \n   现在，证明这个定理就十分容易了。\n   * 证明：交换矩阵的两行，相当于交换$P$的两项。逆序对改变量为奇数，所以行列式变号。\n\n* **推论2.1**：有两行相同的矩阵，行列式为$0$。\n    * 证明：交换这两行，行列式变号且值不变...\n  \n3. 将某一行乘上$k$，行列式乘上$k$.\n   * 证明：你在这一行选出的每个数，都乘上了一个$k$。提取公因数即得。\n4. 两个矩阵如果只有一行不同，则它们的行列式和等于将不同的行相加得到的新矩阵的行列式。\n   * 证明：从定义下手。挺显然的吧qwq.\n* **推论4.1**：将一行乘上$k$的值加到另一行上，行列式不变。\n   * 证明：设被加的行为$x$，乘上$k$加到$A$上的为$y$。把这个新矩阵拆成两个矩阵$A,B$。其中$A$是原矩阵，$B$的$x$行改为$y*k$：则由性质2和3，$B$的行列式为$0$。又由性质4，新矩阵的行列式为$|A|+|B|$,和原来相等\n   * **有了这个推论和性质2，我们就可以做高斯消元啦！**\n\n1. 每行每列和均为0的矩阵，行列式为0.  \n    * 证明：对原矩阵补上一列0，进行高斯消元。显然这个方程组有解——所有未知数都相等.则由高斯消元判断无穷多组解的条件珂得，消出的上三角矩阵中，一定有全零行，且常数项也是0。所以该矩阵的行列式为0.因为高消之后的矩阵的行列式只是原行列式乘上±1（只在交换行的时候行列式发生变号），所以原矩阵的行列式也为0.\n\n2. 对于一个上三角矩阵，它的行列式为对角线上数的乘积。\n    * 证明：要在每行选取一个列不重复的数，且这些数乘积非0，则只能选对角线上的n个数。\n\n## 求解\n直接求解要枚举全排列，时间复杂度为$O(n!*n)$。不可接受。使用高斯消元将其化为上三角矩阵，珂在$O(n^3)$的时间内求n阶矩阵的行列式。\n```cpp\ninline long double determinant(long double (*A)[maxn],int n)\n{\n    int s=1;\n    for (int i=1,c=1,j;i<=n;++i)\n    {\n        for (j=c;j<=n && fabs(A[j][i])<eps;++j);\n        if (j==n+1) continue;\n        s=-s;\n        for (int k=1;k<=n;++k) swap(A[c][k],A[j][k]);\n        for (int j=c+1;j<=n;++j)\n            if (fabs(A[j][i])>eps)\n            {\n                long double t=A[j][i]/A[c][i];\n                for (int k=i;k<=n;++k)\n                    A[j][k]-=A[c][k]*t;\n            }\n        ++c;\n    }\n    long double ans=s;\n    for (int i=1;i<=n;++i)\n        ans*=A[i][i];\n    return ans; // 这里要取绝对值\n}\n```\n\n# 矩阵树定理\n## 概念：\n1. **度数矩阵**：定义$D$为图$G=(V,E),(|V|=n,|E|=m)$的度数矩阵，则$D$为一个$n\\times n$矩阵，其中$D_{i,i}$为编号为i的结点的度数.\n2. **邻接矩阵**：就是我们通常所说的邻接矩阵,记为$G$。\n3. **基尔霍夫矩阵（拉普拉斯矩阵）**：定义基尔霍夫矩阵$K=D-G$.\n\n## 定理：\n当邻接矩阵不带边权时（若$u,v$有边，则$G(u,v)=G(v,u)=1$)，则有  \n> **矩阵树定理**：一个无重边、自环的图$G$的生成树个数，等于它的基尔霍夫矩阵任意一个n-1阶主子式的行列式的绝对值。    \n\n将邻接矩阵加上边权，得到新的邻接矩阵、度数矩阵和基尔霍夫矩阵。即：允许重边（甚至把边数扩展到$\\mathbb R$)\n此时：\n$$D(i,i)=\\sum_{(i,j)\\in E} w((i,j))$$\n$$G(i,j)=w(i,j)$$\n$$K=D-G$$\n推广一下，有：  \n> **变元矩阵树定理**：\n> 1. 对生成树T定义求其边权之积的函数$F(T)=\\prod_{e\\in T}w(e)$\n> 2. 对于每一棵生成树，求其$F$函数值的和得到$H(G)$:$H(G)=\\sum_{T\\ is\\ a\\ spanning\\ tree\\ of\\ G}F(T)$\n> 3. 则$H(G)$等于（带边权的）基尔霍夫矩阵的任意一个n-1阶主子式的行列式的绝对值.\n> 4. 容易发现，当边权都为1的时候，它就是普通的矩阵树定理.\n\n对于有向图来说，有：\n> **有向图的矩阵树定理**  \n> 定义\n> $$K_{i,j}=−w(i,j)$$\n> $$K_{i,i}=∑_{j=1}^n w(i,j)$$\n> 去掉第i行第i列，则能求出以i为根的**外向树**的数量（边权积）  \n> 同样地，定义 \n> $$K_{i,j}=−w(i,j)$$\n> $$K_{i,i}=∑_{j=1}^n w(j,i)$$\n> 则能求**内向树**的数量（边权积）\n\n(原谅我语文学得不好没法简洁地描述上述定理qwq...)\n## 证明：\n~~我们采用闭眼证明法...嗯！它是对的！^_^..~~  \n~~事实上博主太菜并不会证明..~~(留坑)\n\n## 应用：\n[BZOJ1002](https://www.lydsy.com/JudgeOnline/problem.php?id=1002)： [（假的）题解戳这里~](https://wa-automaton.github.io/2019/03/03/BZOJ1002/)  \n[BZOJ1016](https://www.lydsy.com/JudgeOnline/problem.php?id=1016)：[题解戳这里~](https://wa-automaton.github.io/2019/03/08/BZOJ1016/)   \n[BZOJ3524](https://www.lydsy.com/JudgeOnline/problem.php?id=3534)：[题解戳这里~](https://wa-automaton.github.io/2019/03/07/BZOJ3534/)\n\n# 引用&鸣谢\n* 高斯消元的模板来自CDQZ ComeIntoPower巨佬\n* 感谢Memset0巨佬Hack掉我原先的高斯消元。\n* 矩阵树定理一篇大量来源于[Candy?](https://www.cnblogs.com/candy99/p/6420935.html)的博客和[ReMoon](https://www.cnblogs.com/reverymoon/p/9512836.html)。\n\n**对以上巨佬表示感谢。**","source":"_posts/矩阵树定理总结.md","raw":"---\ntitle: 高斯消元-行列式-矩阵树定理学习笔记\ndate: 2019-03-06 16:29:37\ntags:\n    - 数学\n    - 计数\n    - 线性代数\n    - 高斯消元\n    - 矩阵树定理\ncategories:\n    - 学习笔记\ncomments:\n---\n# 高斯消元\n## 引入\n高斯消元听起来非常高大上，其实就是我们初中学的加减消元、代入消元法的程序化实现罢了。  \n考虑一个方程组\n$$\n\\begin{cases}\nA_{1,1} x_1+A_{1,2} x_2+A_{1,3} x_3+...+A_{1,n} x_n=C_1 \\\\\\\\\nA_{2,1} x_1+A_{2,2} x_2+A_{2,3} x_3+...+A_{2,n} x_n=C_2 \\\\\\\\\n...\\\\\\\\\nA_{k,1} x_1+A_{k,2} x_2+A_{k,3} x_3+...+A_{k,n} x_n=C_n \\\\\\\\\n\\end{cases}\n$$\n我们要求出它的一组解，或者判定无解或无穷多组解。这就是高斯消元的基础应用。  \n\n<!-- more -->\n\n## 概念\n**系数矩阵**：上面的方程组中系数A组成的$n\\times n$矩阵就是它的系数矩阵。  \n**增广矩阵**：系数矩阵的最右边补上一列，表示$C_1,C_2,...,C_n$，得到的$n\\times (n+1)$矩阵就成为增广矩阵。  \n**初等行列变换**：  \n1. 以一个非零的数乘矩阵的某一行（列）  \n2. 把矩阵的某一行（列）的c倍加到另一行（列），这里c是任意数\n3. 互换矩阵中两行（列）的位置  \n\n\n**阶梯型矩阵**：一个矩阵成为阶梯型矩阵，需满足两个条件：  \n1. 如果它既有零行，又有非零行，则零行在下，非零行在上。  \n2. 如果它有非零行，则每个非零行的第一个非零元素所在列号自上而下严格单调上升。    \n**转置**：把一个矩阵的行变成列，列变成行，得到的矩阵就是原矩阵的转置。记为$A^T$  \n如图所示，这就是一个阶梯型矩阵  \n![示例1](Matrix1.jpg)\n\n**三角矩阵**：三角矩阵分上三角矩阵和下三角矩阵两种。上三角矩阵的对角线左下方的系数全部为零，下三角矩阵的对角线右上方的系数全部为零。\n\n## 算法流程\n它的基本思想是通过初等行变换，把增广矩阵消成上三角矩阵，此时最后一个非零行必然是$ax=b$的形式。所以我们已经得到了一个未知数的值。把这个值代回上面的所有方程中，则它的上面一行也变成了$ax=b$的形式...重复下去，我们就可以得到所有未知数的值了。^_^\n## 代码 （SDOI2006 线性方程组）\n改编自 ComeIntoPower，在此对他表示谢意QwQ\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n\nusing std::fabs;\nusing std::swap;\n\nconst int maxn=1e3+10;\nconst double eps=1e-9;\n\ninline int Gauss_Elimination(double (*A)[maxn],double* f,int n)\n{\n    for (int i=1,c=1,j;i<=n;++i)\n    {\n        for (j=c;j<=n && fabs(A[j][i])<eps;++j);\n        if (j==n+1) continue;\n        for (int k=1;k<=n+1;++k) swap(A[c][k],A[j][k]);\n        for (int j=c+1;j<=n;++j)\n            if (fabs(A[j][i])>eps) \n            {\n                double t=A[j][i]/A[c][i];\n                for (int k=i;k<=n+1;++k)\n                    A[j][k]-=t*A[c][k];\n            }\n        ++c;\n    }\n    bool NoAnswer=false,InfAnswer=false;\n    for (int i=n;i;--i)\n    {\n        bool NoVariables=true;\n        for (int j=i;j<=n;++j)\n            if (fabs(A[i][j])>eps) NoVariables=false;\n        if (NoVariables)\n            if (fabs(A[i][n+1])>eps) NoAnswer=true;// 0=C,C!=0,无解\n            else InfAnswer=true;// 0=0,无穷多组解\n        else\n        {\n            for (int j=i+1;j<=n;++j) A[i][n+1]-=A[i][j]*f[j];\n            f[i]=A[i][n+1]/A[i][i];\n        }\n    }\n    if (NoAnswer) return -1;\n    return !InfAnswer; //无穷多解返回0，有唯一解返回1\n}\n\nint main()\n{\n    static double A[maxn][maxn],f[maxn];\n    int n;\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;++i)\n        for (int j=1;j<=n+1;++j)\n            scanf(\"%lf\",&A[i][j]);\n    int result=Gauss_Elimination(A,f,n);\n    if (result^1) return printf(\"%d\\n\",result)&0;\n    for (int i=1;i<=n;++i) printf(\"x%d=%.2lf\\n\",i,f[i]);\n}\n```\n## 解释：\n1. * Q: 咋判断无解和无穷多组解鸭？\n   * A:当消元完成后，回代之前时，方程组若出现除了常数项之外全零的行，则一定无解或无穷多组解。（常数项为0是无穷多组解，非零则无解）\n2.  * Q：代码中那个变量c的作用是啥呀？为啥不能用i代替呢？\n    * A：因为如果把c换成i，当存在一个自由元的时候，可能没法消出来全零行，而是直接跳过了本该消成全零行的那一行，将其放在了原来的位置，导致判断无穷解和无解的时候出偏差。（详见洛谷本题讨论的“Hack+1”篇目).\n  \n# 行列式\n## 概念：\n**主子式**：对于一个n阶矩阵A，选取它的任意i行，将行号记为$T[1..i]$，并同时选取第$T[1..n]$列，得到的新矩阵即为原矩阵的一个i阶主子式。\n新矩阵的行列式也可称为$|A|$的一个i阶主子式。\n\n**行列式**：行列式是一个标量。对一个矩阵A来说，它的行列式（记作$|A|$)的定义是\n$$|A|=\\sum_P(-1)^{\\delta(P)}\\prod_{k=1}^n A_{i,P_k} $$\n其中，$P$取遍$1..n$的所有排列，$\\delta(P)$为P的逆序对数。这个柿子很好理解：就是从每行每列各选一个数，一共n个数，\n行列式有以下性质：  \n1. $|A|=|A^T|$ (由定义，比较显然，在此不证)\n2. 将一个矩阵的两行互换，行列式变号。  \n为了证明这个定理，我们需要首先证明一个引理：\n    * 引理：一个排列的两项交换，逆序对改变量为奇数。\n      * 引理证明：不妨设$a<b$.这样的交换对位置在a前面和在b后面的数没有影响，所以只需要考虑$a,b$之间的这个子区间。设交换的两项为$a,b.$把位置在$a.b$之间的数分类：设属于$(-\\infty ,a)$的数量为$x$,属于$(a,b)$的数量为$y$,属于$(b,+\\infty )$的数量为$z$。区间里交换以前的逆序对数为$x+z$,交换后为$(x+y)+(y+z)+1$，差值为$2y+1$,是奇数。\n  \n   现在，证明这个定理就十分容易了。\n   * 证明：交换矩阵的两行，相当于交换$P$的两项。逆序对改变量为奇数，所以行列式变号。\n\n* **推论2.1**：有两行相同的矩阵，行列式为$0$。\n    * 证明：交换这两行，行列式变号且值不变...\n  \n3. 将某一行乘上$k$，行列式乘上$k$.\n   * 证明：你在这一行选出的每个数，都乘上了一个$k$。提取公因数即得。\n4. 两个矩阵如果只有一行不同，则它们的行列式和等于将不同的行相加得到的新矩阵的行列式。\n   * 证明：从定义下手。挺显然的吧qwq.\n* **推论4.1**：将一行乘上$k$的值加到另一行上，行列式不变。\n   * 证明：设被加的行为$x$，乘上$k$加到$A$上的为$y$。把这个新矩阵拆成两个矩阵$A,B$。其中$A$是原矩阵，$B$的$x$行改为$y*k$：则由性质2和3，$B$的行列式为$0$。又由性质4，新矩阵的行列式为$|A|+|B|$,和原来相等\n   * **有了这个推论和性质2，我们就可以做高斯消元啦！**\n\n1. 每行每列和均为0的矩阵，行列式为0.  \n    * 证明：对原矩阵补上一列0，进行高斯消元。显然这个方程组有解——所有未知数都相等.则由高斯消元判断无穷多组解的条件珂得，消出的上三角矩阵中，一定有全零行，且常数项也是0。所以该矩阵的行列式为0.因为高消之后的矩阵的行列式只是原行列式乘上±1（只在交换行的时候行列式发生变号），所以原矩阵的行列式也为0.\n\n2. 对于一个上三角矩阵，它的行列式为对角线上数的乘积。\n    * 证明：要在每行选取一个列不重复的数，且这些数乘积非0，则只能选对角线上的n个数。\n\n## 求解\n直接求解要枚举全排列，时间复杂度为$O(n!*n)$。不可接受。使用高斯消元将其化为上三角矩阵，珂在$O(n^3)$的时间内求n阶矩阵的行列式。\n```cpp\ninline long double determinant(long double (*A)[maxn],int n)\n{\n    int s=1;\n    for (int i=1,c=1,j;i<=n;++i)\n    {\n        for (j=c;j<=n && fabs(A[j][i])<eps;++j);\n        if (j==n+1) continue;\n        s=-s;\n        for (int k=1;k<=n;++k) swap(A[c][k],A[j][k]);\n        for (int j=c+1;j<=n;++j)\n            if (fabs(A[j][i])>eps)\n            {\n                long double t=A[j][i]/A[c][i];\n                for (int k=i;k<=n;++k)\n                    A[j][k]-=A[c][k]*t;\n            }\n        ++c;\n    }\n    long double ans=s;\n    for (int i=1;i<=n;++i)\n        ans*=A[i][i];\n    return ans; // 这里要取绝对值\n}\n```\n\n# 矩阵树定理\n## 概念：\n1. **度数矩阵**：定义$D$为图$G=(V,E),(|V|=n,|E|=m)$的度数矩阵，则$D$为一个$n\\times n$矩阵，其中$D_{i,i}$为编号为i的结点的度数.\n2. **邻接矩阵**：就是我们通常所说的邻接矩阵,记为$G$。\n3. **基尔霍夫矩阵（拉普拉斯矩阵）**：定义基尔霍夫矩阵$K=D-G$.\n\n## 定理：\n当邻接矩阵不带边权时（若$u,v$有边，则$G(u,v)=G(v,u)=1$)，则有  \n> **矩阵树定理**：一个无重边、自环的图$G$的生成树个数，等于它的基尔霍夫矩阵任意一个n-1阶主子式的行列式的绝对值。    \n\n将邻接矩阵加上边权，得到新的邻接矩阵、度数矩阵和基尔霍夫矩阵。即：允许重边（甚至把边数扩展到$\\mathbb R$)\n此时：\n$$D(i,i)=\\sum_{(i,j)\\in E} w((i,j))$$\n$$G(i,j)=w(i,j)$$\n$$K=D-G$$\n推广一下，有：  \n> **变元矩阵树定理**：\n> 1. 对生成树T定义求其边权之积的函数$F(T)=\\prod_{e\\in T}w(e)$\n> 2. 对于每一棵生成树，求其$F$函数值的和得到$H(G)$:$H(G)=\\sum_{T\\ is\\ a\\ spanning\\ tree\\ of\\ G}F(T)$\n> 3. 则$H(G)$等于（带边权的）基尔霍夫矩阵的任意一个n-1阶主子式的行列式的绝对值.\n> 4. 容易发现，当边权都为1的时候，它就是普通的矩阵树定理.\n\n对于有向图来说，有：\n> **有向图的矩阵树定理**  \n> 定义\n> $$K_{i,j}=−w(i,j)$$\n> $$K_{i,i}=∑_{j=1}^n w(i,j)$$\n> 去掉第i行第i列，则能求出以i为根的**外向树**的数量（边权积）  \n> 同样地，定义 \n> $$K_{i,j}=−w(i,j)$$\n> $$K_{i,i}=∑_{j=1}^n w(j,i)$$\n> 则能求**内向树**的数量（边权积）\n\n(原谅我语文学得不好没法简洁地描述上述定理qwq...)\n## 证明：\n~~我们采用闭眼证明法...嗯！它是对的！^_^..~~  \n~~事实上博主太菜并不会证明..~~(留坑)\n\n## 应用：\n[BZOJ1002](https://www.lydsy.com/JudgeOnline/problem.php?id=1002)： [（假的）题解戳这里~](https://wa-automaton.github.io/2019/03/03/BZOJ1002/)  \n[BZOJ1016](https://www.lydsy.com/JudgeOnline/problem.php?id=1016)：[题解戳这里~](https://wa-automaton.github.io/2019/03/08/BZOJ1016/)   \n[BZOJ3524](https://www.lydsy.com/JudgeOnline/problem.php?id=3534)：[题解戳这里~](https://wa-automaton.github.io/2019/03/07/BZOJ3534/)\n\n# 引用&鸣谢\n* 高斯消元的模板来自CDQZ ComeIntoPower巨佬\n* 感谢Memset0巨佬Hack掉我原先的高斯消元。\n* 矩阵树定理一篇大量来源于[Candy?](https://www.cnblogs.com/candy99/p/6420935.html)的博客和[ReMoon](https://www.cnblogs.com/reverymoon/p/9512836.html)。\n\n**对以上巨佬表示感谢。**","slug":"矩阵树定理总结","published":1,"updated":"2019-03-10T11:41:27.426Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm3j002xv4tygm88wsml","content":"<h1 id=\"高斯消元\"><a href=\"#高斯消元\" class=\"headerlink\" title=\"高斯消元\"></a>高斯消元</h1><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>高斯消元听起来非常高大上，其实就是我们初中学的加减消元、代入消元法的程序化实现罢了。<br>考虑一个方程组<br>$$<br>\\begin{cases}<br>A_{1,1} x_1+A_{1,2} x_2+A_{1,3} x_3+…+A_{1,n} x_n=C_1 \\\\<br>A_{2,1} x_1+A_{2,2} x_2+A_{2,3} x_3+…+A_{2,n} x_n=C_2 \\\\<br>…\\\\<br>A_{k,1} x_1+A_{k,2} x_2+A_{k,3} x_3+…+A_{k,n} x_n=C_n \\\\<br>\\end{cases}<br>$$<br>我们要求出它的一组解，或者判定无解或无穷多组解。这就是高斯消元的基础应用。  </p>\n<a id=\"more\"></a>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><strong>系数矩阵</strong>：上面的方程组中系数A组成的$n\\times n$矩阵就是它的系数矩阵。<br><strong>增广矩阵</strong>：系数矩阵的最右边补上一列，表示$C_1,C_2,…,C_n$，得到的$n\\times (n+1)$矩阵就成为增广矩阵。<br><strong>初等行列变换</strong>：  </p>\n<ol>\n<li>以一个非零的数乘矩阵的某一行（列）  </li>\n<li>把矩阵的某一行（列）的c倍加到另一行（列），这里c是任意数</li>\n<li>互换矩阵中两行（列）的位置  </li>\n</ol>\n<p><strong>阶梯型矩阵</strong>：一个矩阵成为阶梯型矩阵，需满足两个条件：  </p>\n<ol>\n<li>如果它既有零行，又有非零行，则零行在下，非零行在上。  </li>\n<li>如果它有非零行，则每个非零行的第一个非零元素所在列号自上而下严格单调上升。<br><strong>转置</strong>：把一个矩阵的行变成列，列变成行，得到的矩阵就是原矩阵的转置。记为$A^T$<br>如图所示，这就是一个阶梯型矩阵<br><img src=\"Matrix1.jpg\" alt=\"示例1\"></li>\n</ol>\n<p><strong>三角矩阵</strong>：三角矩阵分上三角矩阵和下三角矩阵两种。上三角矩阵的对角线左下方的系数全部为零，下三角矩阵的对角线右上方的系数全部为零。</p>\n<h2 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><p>它的基本思想是通过初等行变换，把增广矩阵消成上三角矩阵，此时最后一个非零行必然是$ax=b$的形式。所以我们已经得到了一个未知数的值。把这个值代回上面的所有方程中，则它的上面一行也变成了$ax=b$的形式…重复下去，我们就可以得到所有未知数的值了。^_^</p>\n<h2 id=\"代码-（SDOI2006-线性方程组）\"><a href=\"#代码-（SDOI2006-线性方程组）\" class=\"headerlink\" title=\"代码 （SDOI2006 线性方程组）\"></a>代码 （SDOI2006 线性方程组）</h2><p>改编自 ComeIntoPower，在此对他表示谢意QwQ<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">fabs</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::swap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e3</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps=<span class=\"number\">1e-9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Gauss_Elimination</span><span class=\"params\">(<span class=\"keyword\">double</span> (*A)[maxn],<span class=\"keyword\">double</span>* f,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,c=<span class=\"number\">1</span>,j;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=c;j&lt;=n &amp;&amp; <span class=\"built_in\">fabs</span>(A[j][i])&lt;eps;++j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j==n+<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=n+<span class=\"number\">1</span>;++k) swap(A[c][k],A[j][k]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=c+<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[j][i])&gt;eps) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">double</span> t=A[j][i]/A[c][i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=i;k&lt;=n+<span class=\"number\">1</span>;++k)</span><br><span class=\"line\">                    A[j][k]-=t*A[c][k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ++c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> NoAnswer=<span class=\"literal\">false</span>,InfAnswer=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n;i;--i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> NoVariables=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=i;j&lt;=n;++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[i][j])&gt;eps) NoVariables=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (NoVariables)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[i][n+<span class=\"number\">1</span>])&gt;eps) NoAnswer=<span class=\"literal\">true</span>;<span class=\"comment\">// 0=C,C!=0,无解</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> InfAnswer=<span class=\"literal\">true</span>;<span class=\"comment\">// 0=0,无穷多组解</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;=n;++j) A[i][n+<span class=\"number\">1</span>]-=A[i][j]*f[j];</span><br><span class=\"line\">            f[i]=A[i][n+<span class=\"number\">1</span>]/A[i][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NoAnswer) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !InfAnswer; <span class=\"comment\">//无穷多解返回0，有唯一解返回1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> A[maxn][maxn],f[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n+<span class=\"number\">1</span>;++j)</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;A[i][j]);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result=Gauss_Elimination(A,f,n);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result^<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,result)&amp;<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) <span class=\"built_in\">printf</span>(<span class=\"string\">\"x%d=%.2lf\\n\"</span>,i,f[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"解释：\"><a href=\"#解释：\" class=\"headerlink\" title=\"解释：\"></a>解释：</h2><ol>\n<li><ul>\n<li>Q: 咋判断无解和无穷多组解鸭？</li>\n<li>A:当消元完成后，回代之前时，方程组若出现除了常数项之外全零的行，则一定无解或无穷多组解。（常数项为0是无穷多组解，非零则无解）</li>\n</ul>\n</li>\n<li><ul>\n<li>Q：代码中那个变量c的作用是啥呀？为啥不能用i代替呢？</li>\n<li>A：因为如果把c换成i，当存在一个自由元的时候，可能没法消出来全零行，而是直接跳过了本该消成全零行的那一行，将其放在了原来的位置，导致判断无穷解和无解的时候出偏差。（详见洛谷本题讨论的“Hack+1”篇目).</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"行列式\"><a href=\"#行列式\" class=\"headerlink\" title=\"行列式\"></a>行列式</h1><h2 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h2><p><strong>主子式</strong>：对于一个n阶矩阵A，选取它的任意i行，将行号记为$T[1..i]$，并同时选取第$T[1..n]$列，得到的新矩阵即为原矩阵的一个i阶主子式。<br>新矩阵的行列式也可称为$|A|$的一个i阶主子式。</p>\n<p><strong>行列式</strong>：行列式是一个标量。对一个矩阵A来说，它的行列式（记作$|A|$)的定义是<br>$$|A|=\\sum_P(-1)^{\\delta(P)}\\prod_{k=1}^n A_{i,P_k} $$<br>其中，$P$取遍$1..n$的所有排列，$\\delta(P)$为P的逆序对数。这个柿子很好理解：就是从每行每列各选一个数，一共n个数，<br>行列式有以下性质：  </p>\n<ol>\n<li>$|A|=|A^T|$ (由定义，比较显然，在此不证)</li>\n<li><p>将一个矩阵的两行互换，行列式变号。<br>为了证明这个定理，我们需要首先证明一个引理：</p>\n<ul>\n<li>引理：一个排列的两项交换，逆序对改变量为奇数。<ul>\n<li>引理证明：不妨设$a&lt;b$.这样的交换对位置在a前面和在b后面的数没有影响，所以只需要考虑$a,b$之间的这个子区间。设交换的两项为$a,b.$把位置在$a.b$之间的数分类：设属于$(-\\infty ,a)$的数量为$x$,属于$(a,b)$的数量为$y$,属于$(b,+\\infty )$的数量为$z$。区间里交换以前的逆序对数为$x+z$,交换后为$(x+y)+(y+z)+1$，差值为$2y+1$,是奇数。</li>\n</ul>\n</li>\n</ul>\n<p>现在，证明这个定理就十分容易了。</p>\n<ul>\n<li>证明：交换矩阵的两行，相当于交换$P$的两项。逆序对改变量为奇数，所以行列式变号。</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><strong>推论2.1</strong>：有两行相同的矩阵，行列式为$0$。<ul>\n<li>证明：交换这两行，行列式变号且值不变…</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>将某一行乘上$k$，行列式乘上$k$.<ul>\n<li>证明：你在这一行选出的每个数，都乘上了一个$k$。提取公因数即得。</li>\n</ul>\n</li>\n<li>两个矩阵如果只有一行不同，则它们的行列式和等于将不同的行相加得到的新矩阵的行列式。<ul>\n<li>证明：从定义下手。挺显然的吧qwq.</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><strong>推论4.1</strong>：将一行乘上$k$的值加到另一行上，行列式不变。<ul>\n<li>证明：设被加的行为$x$，乘上$k$加到$A$上的为$y$。把这个新矩阵拆成两个矩阵$A,B$。其中$A$是原矩阵，$B$的$x$行改为$y*k$：则由性质2和3，$B$的行列式为$0$。又由性质4，新矩阵的行列式为$|A|+|B|$,和原来相等</li>\n<li><strong>有了这个推论和性质2，我们就可以做高斯消元啦！</strong></li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><p>每行每列和均为0的矩阵，行列式为0.  </p>\n<ul>\n<li>证明：对原矩阵补上一列0，进行高斯消元。显然这个方程组有解——所有未知数都相等.则由高斯消元判断无穷多组解的条件珂得，消出的上三角矩阵中，一定有全零行，且常数项也是0。所以该矩阵的行列式为0.因为高消之后的矩阵的行列式只是原行列式乘上±1（只在交换行的时候行列式发生变号），所以原矩阵的行列式也为0.</li>\n</ul>\n</li>\n<li><p>对于一个上三角矩阵，它的行列式为对角线上数的乘积。</p>\n<ul>\n<li>证明：要在每行选取一个列不重复的数，且这些数乘积非0，则只能选对角线上的n个数。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"求解\"><a href=\"#求解\" class=\"headerlink\" title=\"求解\"></a>求解</h2><p>直接求解要枚举全排列，时间复杂度为$O(n!*n)$。不可接受。使用高斯消元将其化为上三角矩阵，珂在$O(n^3)$的时间内求n阶矩阵的行列式。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> <span class=\"title\">determinant</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">double</span> (*A)[maxn],<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,c=<span class=\"number\">1</span>,j;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=c;j&lt;=n &amp;&amp; <span class=\"built_in\">fabs</span>(A[j][i])&lt;eps;++j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j==n+<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        s=-s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=n;++k) swap(A[c][k],A[j][k]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=c+<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[j][i])&gt;eps)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> t=A[j][i]/A[c][i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=i;k&lt;=n;++k)</span><br><span class=\"line\">                    A[j][k]-=A[c][k]*t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ++c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> ans=s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        ans*=A[i][i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans; <span class=\"comment\">// 这里要取绝对值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"矩阵树定理\"><a href=\"#矩阵树定理\" class=\"headerlink\" title=\"矩阵树定理\"></a>矩阵树定理</h1><h2 id=\"概念：-1\"><a href=\"#概念：-1\" class=\"headerlink\" title=\"概念：\"></a>概念：</h2><ol>\n<li><strong>度数矩阵</strong>：定义$D$为图$G=(V,E),(|V|=n,|E|=m)$的度数矩阵，则$D$为一个$n\\times n$矩阵，其中$D_{i,i}$为编号为i的结点的度数.</li>\n<li><strong>邻接矩阵</strong>：就是我们通常所说的邻接矩阵,记为$G$。</li>\n<li><strong>基尔霍夫矩阵（拉普拉斯矩阵）</strong>：定义基尔霍夫矩阵$K=D-G$.</li>\n</ol>\n<h2 id=\"定理：\"><a href=\"#定理：\" class=\"headerlink\" title=\"定理：\"></a>定理：</h2><p>当邻接矩阵不带边权时（若$u,v$有边，则$G(u,v)=G(v,u)=1$)，则有  </p>\n<blockquote>\n<p><strong>矩阵树定理</strong>：一个无重边、自环的图$G$的生成树个数，等于它的基尔霍夫矩阵任意一个n-1阶主子式的行列式的绝对值。    </p>\n</blockquote>\n<p>将邻接矩阵加上边权，得到新的邻接矩阵、度数矩阵和基尔霍夫矩阵。即：允许重边（甚至把边数扩展到$\\mathbb R$)<br>此时：<br>$$D(i,i)=\\sum_{(i,j)\\in E} w((i,j))$$<br>$$G(i,j)=w(i,j)$$<br>$$K=D-G$$<br>推广一下，有：  </p>\n<blockquote>\n<p><strong>变元矩阵树定理</strong>：</p>\n<ol>\n<li>对生成树T定义求其边权之积的函数$F(T)=\\prod_{e\\in T}w(e)$</li>\n<li>对于每一棵生成树，求其$F$函数值的和得到$H(G)$:$H(G)=\\sum_{T\\ is\\ a\\ spanning\\ tree\\ of\\ G}F(T)$</li>\n<li>则$H(G)$等于（带边权的）基尔霍夫矩阵的任意一个n-1阶主子式的行列式的绝对值.</li>\n<li>容易发现，当边权都为1的时候，它就是普通的矩阵树定理.</li>\n</ol>\n</blockquote>\n<p>对于有向图来说，有：</p>\n<blockquote>\n<p><strong>有向图的矩阵树定理</strong><br>定义<br>$$K_{i,j}=−w(i,j)$$<br>$$K_{i,i}=∑<em>{j=1}^n w(i,j)$$<br>去掉第i行第i列，则能求出以i为根的<strong>外向树</strong>的数量（边权积）<br>同样地，定义<br>$$K</em>{i,j}=−w(i,j)$$<br>$$K_{i,i}=∑_{j=1}^n w(j,i)$$<br>则能求<strong>内向树</strong>的数量（边权积）</p>\n</blockquote>\n<p>(原谅我语文学得不好没法简洁地描述上述定理qwq…)</p>\n<h2 id=\"证明：\"><a href=\"#证明：\" class=\"headerlink\" title=\"证明：\"></a>证明：</h2><p><del>我们采用闭眼证明法…嗯！它是对的！^_^..</del><br><del>事实上博主太菜并不会证明..</del>(留坑)</p>\n<h2 id=\"应用：\"><a href=\"#应用：\" class=\"headerlink\" title=\"应用：\"></a>应用：</h2><p><a href=\"https://www.lydsy.com/JudgeOnline/problem.php?id=1002\" target=\"_blank\" rel=\"noopener\">BZOJ1002</a>： <a href=\"https://wa-automaton.github.io/2019/03/03/BZOJ1002/\">（假的）题解戳这里~</a><br><a href=\"https://www.lydsy.com/JudgeOnline/problem.php?id=1016\" target=\"_blank\" rel=\"noopener\">BZOJ1016</a>：<a href=\"https://wa-automaton.github.io/2019/03/08/BZOJ1016/\">题解戳这里~</a><br><a href=\"https://www.lydsy.com/JudgeOnline/problem.php?id=3534\" target=\"_blank\" rel=\"noopener\">BZOJ3524</a>：<a href=\"https://wa-automaton.github.io/2019/03/07/BZOJ3534/\">题解戳这里~</a></p>\n<h1 id=\"引用-amp-鸣谢\"><a href=\"#引用-amp-鸣谢\" class=\"headerlink\" title=\"引用&amp;鸣谢\"></a>引用&amp;鸣谢</h1><ul>\n<li>高斯消元的模板来自CDQZ ComeIntoPower巨佬</li>\n<li>感谢Memset0巨佬Hack掉我原先的高斯消元。</li>\n<li>矩阵树定理一篇大量来源于<a href=\"https://www.cnblogs.com/candy99/p/6420935.html\" target=\"_blank\" rel=\"noopener\">Candy?</a>的博客和<a href=\"https://www.cnblogs.com/reverymoon/p/9512836.html\" target=\"_blank\" rel=\"noopener\">ReMoon</a>。</li>\n</ul>\n<p><strong>对以上巨佬表示感谢。</strong></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"高斯消元\"><a href=\"#高斯消元\" class=\"headerlink\" title=\"高斯消元\"></a>高斯消元</h1><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>高斯消元听起来非常高大上，其实就是我们初中学的加减消元、代入消元法的程序化实现罢了。<br>考虑一个方程组<br>$$<br>\\begin{cases}<br>A_{1,1} x_1+A_{1,2} x_2+A_{1,3} x_3+…+A_{1,n} x_n=C_1 \\\\<br>A_{2,1} x_1+A_{2,2} x_2+A_{2,3} x_3+…+A_{2,n} x_n=C_2 \\\\<br>…\\\\<br>A_{k,1} x_1+A_{k,2} x_2+A_{k,3} x_3+…+A_{k,n} x_n=C_n \\\\<br>\\end{cases}<br>$$<br>我们要求出它的一组解，或者判定无解或无穷多组解。这就是高斯消元的基础应用。  </p>","more":"<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><strong>系数矩阵</strong>：上面的方程组中系数A组成的$n\\times n$矩阵就是它的系数矩阵。<br><strong>增广矩阵</strong>：系数矩阵的最右边补上一列，表示$C_1,C_2,…,C_n$，得到的$n\\times (n+1)$矩阵就成为增广矩阵。<br><strong>初等行列变换</strong>：  </p>\n<ol>\n<li>以一个非零的数乘矩阵的某一行（列）  </li>\n<li>把矩阵的某一行（列）的c倍加到另一行（列），这里c是任意数</li>\n<li>互换矩阵中两行（列）的位置  </li>\n</ol>\n<p><strong>阶梯型矩阵</strong>：一个矩阵成为阶梯型矩阵，需满足两个条件：  </p>\n<ol>\n<li>如果它既有零行，又有非零行，则零行在下，非零行在上。  </li>\n<li>如果它有非零行，则每个非零行的第一个非零元素所在列号自上而下严格单调上升。<br><strong>转置</strong>：把一个矩阵的行变成列，列变成行，得到的矩阵就是原矩阵的转置。记为$A^T$<br>如图所示，这就是一个阶梯型矩阵<br><img src=\"Matrix1.jpg\" alt=\"示例1\"></li>\n</ol>\n<p><strong>三角矩阵</strong>：三角矩阵分上三角矩阵和下三角矩阵两种。上三角矩阵的对角线左下方的系数全部为零，下三角矩阵的对角线右上方的系数全部为零。</p>\n<h2 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><p>它的基本思想是通过初等行变换，把增广矩阵消成上三角矩阵，此时最后一个非零行必然是$ax=b$的形式。所以我们已经得到了一个未知数的值。把这个值代回上面的所有方程中，则它的上面一行也变成了$ax=b$的形式…重复下去，我们就可以得到所有未知数的值了。^_^</p>\n<h2 id=\"代码-（SDOI2006-线性方程组）\"><a href=\"#代码-（SDOI2006-线性方程组）\" class=\"headerlink\" title=\"代码 （SDOI2006 线性方程组）\"></a>代码 （SDOI2006 线性方程组）</h2><p>改编自 ComeIntoPower，在此对他表示谢意QwQ<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">fabs</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::swap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e3</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps=<span class=\"number\">1e-9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Gauss_Elimination</span><span class=\"params\">(<span class=\"keyword\">double</span> (*A)[maxn],<span class=\"keyword\">double</span>* f,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,c=<span class=\"number\">1</span>,j;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=c;j&lt;=n &amp;&amp; <span class=\"built_in\">fabs</span>(A[j][i])&lt;eps;++j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j==n+<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=n+<span class=\"number\">1</span>;++k) swap(A[c][k],A[j][k]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=c+<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[j][i])&gt;eps) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">double</span> t=A[j][i]/A[c][i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=i;k&lt;=n+<span class=\"number\">1</span>;++k)</span><br><span class=\"line\">                    A[j][k]-=t*A[c][k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ++c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> NoAnswer=<span class=\"literal\">false</span>,InfAnswer=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n;i;--i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> NoVariables=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=i;j&lt;=n;++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[i][j])&gt;eps) NoVariables=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (NoVariables)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[i][n+<span class=\"number\">1</span>])&gt;eps) NoAnswer=<span class=\"literal\">true</span>;<span class=\"comment\">// 0=C,C!=0,无解</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> InfAnswer=<span class=\"literal\">true</span>;<span class=\"comment\">// 0=0,无穷多组解</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;=n;++j) A[i][n+<span class=\"number\">1</span>]-=A[i][j]*f[j];</span><br><span class=\"line\">            f[i]=A[i][n+<span class=\"number\">1</span>]/A[i][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NoAnswer) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !InfAnswer; <span class=\"comment\">//无穷多解返回0，有唯一解返回1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> A[maxn][maxn],f[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n+<span class=\"number\">1</span>;++j)</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;A[i][j]);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result=Gauss_Elimination(A,f,n);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result^<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,result)&amp;<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) <span class=\"built_in\">printf</span>(<span class=\"string\">\"x%d=%.2lf\\n\"</span>,i,f[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"解释：\"><a href=\"#解释：\" class=\"headerlink\" title=\"解释：\"></a>解释：</h2><ol>\n<li><ul>\n<li>Q: 咋判断无解和无穷多组解鸭？</li>\n<li>A:当消元完成后，回代之前时，方程组若出现除了常数项之外全零的行，则一定无解或无穷多组解。（常数项为0是无穷多组解，非零则无解）</li>\n</ul>\n</li>\n<li><ul>\n<li>Q：代码中那个变量c的作用是啥呀？为啥不能用i代替呢？</li>\n<li>A：因为如果把c换成i，当存在一个自由元的时候，可能没法消出来全零行，而是直接跳过了本该消成全零行的那一行，将其放在了原来的位置，导致判断无穷解和无解的时候出偏差。（详见洛谷本题讨论的“Hack+1”篇目).</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"行列式\"><a href=\"#行列式\" class=\"headerlink\" title=\"行列式\"></a>行列式</h1><h2 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h2><p><strong>主子式</strong>：对于一个n阶矩阵A，选取它的任意i行，将行号记为$T[1..i]$，并同时选取第$T[1..n]$列，得到的新矩阵即为原矩阵的一个i阶主子式。<br>新矩阵的行列式也可称为$|A|$的一个i阶主子式。</p>\n<p><strong>行列式</strong>：行列式是一个标量。对一个矩阵A来说，它的行列式（记作$|A|$)的定义是<br>$$|A|=\\sum_P(-1)^{\\delta(P)}\\prod_{k=1}^n A_{i,P_k} $$<br>其中，$P$取遍$1..n$的所有排列，$\\delta(P)$为P的逆序对数。这个柿子很好理解：就是从每行每列各选一个数，一共n个数，<br>行列式有以下性质：  </p>\n<ol>\n<li>$|A|=|A^T|$ (由定义，比较显然，在此不证)</li>\n<li><p>将一个矩阵的两行互换，行列式变号。<br>为了证明这个定理，我们需要首先证明一个引理：</p>\n<ul>\n<li>引理：一个排列的两项交换，逆序对改变量为奇数。<ul>\n<li>引理证明：不妨设$a&lt;b$.这样的交换对位置在a前面和在b后面的数没有影响，所以只需要考虑$a,b$之间的这个子区间。设交换的两项为$a,b.$把位置在$a.b$之间的数分类：设属于$(-\\infty ,a)$的数量为$x$,属于$(a,b)$的数量为$y$,属于$(b,+\\infty )$的数量为$z$。区间里交换以前的逆序对数为$x+z$,交换后为$(x+y)+(y+z)+1$，差值为$2y+1$,是奇数。</li>\n</ul>\n</li>\n</ul>\n<p>现在，证明这个定理就十分容易了。</p>\n<ul>\n<li>证明：交换矩阵的两行，相当于交换$P$的两项。逆序对改变量为奇数，所以行列式变号。</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><strong>推论2.1</strong>：有两行相同的矩阵，行列式为$0$。<ul>\n<li>证明：交换这两行，行列式变号且值不变…</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>将某一行乘上$k$，行列式乘上$k$.<ul>\n<li>证明：你在这一行选出的每个数，都乘上了一个$k$。提取公因数即得。</li>\n</ul>\n</li>\n<li>两个矩阵如果只有一行不同，则它们的行列式和等于将不同的行相加得到的新矩阵的行列式。<ul>\n<li>证明：从定义下手。挺显然的吧qwq.</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><strong>推论4.1</strong>：将一行乘上$k$的值加到另一行上，行列式不变。<ul>\n<li>证明：设被加的行为$x$，乘上$k$加到$A$上的为$y$。把这个新矩阵拆成两个矩阵$A,B$。其中$A$是原矩阵，$B$的$x$行改为$y*k$：则由性质2和3，$B$的行列式为$0$。又由性质4，新矩阵的行列式为$|A|+|B|$,和原来相等</li>\n<li><strong>有了这个推论和性质2，我们就可以做高斯消元啦！</strong></li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><p>每行每列和均为0的矩阵，行列式为0.  </p>\n<ul>\n<li>证明：对原矩阵补上一列0，进行高斯消元。显然这个方程组有解——所有未知数都相等.则由高斯消元判断无穷多组解的条件珂得，消出的上三角矩阵中，一定有全零行，且常数项也是0。所以该矩阵的行列式为0.因为高消之后的矩阵的行列式只是原行列式乘上±1（只在交换行的时候行列式发生变号），所以原矩阵的行列式也为0.</li>\n</ul>\n</li>\n<li><p>对于一个上三角矩阵，它的行列式为对角线上数的乘积。</p>\n<ul>\n<li>证明：要在每行选取一个列不重复的数，且这些数乘积非0，则只能选对角线上的n个数。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"求解\"><a href=\"#求解\" class=\"headerlink\" title=\"求解\"></a>求解</h2><p>直接求解要枚举全排列，时间复杂度为$O(n!*n)$。不可接受。使用高斯消元将其化为上三角矩阵，珂在$O(n^3)$的时间内求n阶矩阵的行列式。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> <span class=\"title\">determinant</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">double</span> (*A)[maxn],<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,c=<span class=\"number\">1</span>,j;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=c;j&lt;=n &amp;&amp; <span class=\"built_in\">fabs</span>(A[j][i])&lt;eps;++j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j==n+<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        s=-s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=n;++k) swap(A[c][k],A[j][k]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=c+<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[j][i])&gt;eps)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> t=A[j][i]/A[c][i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=i;k&lt;=n;++k)</span><br><span class=\"line\">                    A[j][k]-=A[c][k]*t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ++c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> ans=s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        ans*=A[i][i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans; <span class=\"comment\">// 这里要取绝对值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"矩阵树定理\"><a href=\"#矩阵树定理\" class=\"headerlink\" title=\"矩阵树定理\"></a>矩阵树定理</h1><h2 id=\"概念：-1\"><a href=\"#概念：-1\" class=\"headerlink\" title=\"概念：\"></a>概念：</h2><ol>\n<li><strong>度数矩阵</strong>：定义$D$为图$G=(V,E),(|V|=n,|E|=m)$的度数矩阵，则$D$为一个$n\\times n$矩阵，其中$D_{i,i}$为编号为i的结点的度数.</li>\n<li><strong>邻接矩阵</strong>：就是我们通常所说的邻接矩阵,记为$G$。</li>\n<li><strong>基尔霍夫矩阵（拉普拉斯矩阵）</strong>：定义基尔霍夫矩阵$K=D-G$.</li>\n</ol>\n<h2 id=\"定理：\"><a href=\"#定理：\" class=\"headerlink\" title=\"定理：\"></a>定理：</h2><p>当邻接矩阵不带边权时（若$u,v$有边，则$G(u,v)=G(v,u)=1$)，则有  </p>\n<blockquote>\n<p><strong>矩阵树定理</strong>：一个无重边、自环的图$G$的生成树个数，等于它的基尔霍夫矩阵任意一个n-1阶主子式的行列式的绝对值。    </p>\n</blockquote>\n<p>将邻接矩阵加上边权，得到新的邻接矩阵、度数矩阵和基尔霍夫矩阵。即：允许重边（甚至把边数扩展到$\\mathbb R$)<br>此时：<br>$$D(i,i)=\\sum_{(i,j)\\in E} w((i,j))$$<br>$$G(i,j)=w(i,j)$$<br>$$K=D-G$$<br>推广一下，有：  </p>\n<blockquote>\n<p><strong>变元矩阵树定理</strong>：</p>\n<ol>\n<li>对生成树T定义求其边权之积的函数$F(T)=\\prod_{e\\in T}w(e)$</li>\n<li>对于每一棵生成树，求其$F$函数值的和得到$H(G)$:$H(G)=\\sum_{T\\ is\\ a\\ spanning\\ tree\\ of\\ G}F(T)$</li>\n<li>则$H(G)$等于（带边权的）基尔霍夫矩阵的任意一个n-1阶主子式的行列式的绝对值.</li>\n<li>容易发现，当边权都为1的时候，它就是普通的矩阵树定理.</li>\n</ol>\n</blockquote>\n<p>对于有向图来说，有：</p>\n<blockquote>\n<p><strong>有向图的矩阵树定理</strong><br>定义<br>$$K_{i,j}=−w(i,j)$$<br>$$K_{i,i}=∑<em>{j=1}^n w(i,j)$$<br>去掉第i行第i列，则能求出以i为根的<strong>外向树</strong>的数量（边权积）<br>同样地，定义<br>$$K</em>{i,j}=−w(i,j)$$<br>$$K_{i,i}=∑_{j=1}^n w(j,i)$$<br>则能求<strong>内向树</strong>的数量（边权积）</p>\n</blockquote>\n<p>(原谅我语文学得不好没法简洁地描述上述定理qwq…)</p>\n<h2 id=\"证明：\"><a href=\"#证明：\" class=\"headerlink\" title=\"证明：\"></a>证明：</h2><p><del>我们采用闭眼证明法…嗯！它是对的！^_^..</del><br><del>事实上博主太菜并不会证明..</del>(留坑)</p>\n<h2 id=\"应用：\"><a href=\"#应用：\" class=\"headerlink\" title=\"应用：\"></a>应用：</h2><p><a href=\"https://www.lydsy.com/JudgeOnline/problem.php?id=1002\" target=\"_blank\" rel=\"noopener\">BZOJ1002</a>： <a href=\"https://wa-automaton.github.io/2019/03/03/BZOJ1002/\">（假的）题解戳这里~</a><br><a href=\"https://www.lydsy.com/JudgeOnline/problem.php?id=1016\" target=\"_blank\" rel=\"noopener\">BZOJ1016</a>：<a href=\"https://wa-automaton.github.io/2019/03/08/BZOJ1016/\">题解戳这里~</a><br><a href=\"https://www.lydsy.com/JudgeOnline/problem.php?id=3534\" target=\"_blank\" rel=\"noopener\">BZOJ3524</a>：<a href=\"https://wa-automaton.github.io/2019/03/07/BZOJ3534/\">题解戳这里~</a></p>\n<h1 id=\"引用-amp-鸣谢\"><a href=\"#引用-amp-鸣谢\" class=\"headerlink\" title=\"引用&amp;鸣谢\"></a>引用&amp;鸣谢</h1><ul>\n<li>高斯消元的模板来自CDQZ ComeIntoPower巨佬</li>\n<li>感谢Memset0巨佬Hack掉我原先的高斯消元。</li>\n<li>矩阵树定理一篇大量来源于<a href=\"https://www.cnblogs.com/candy99/p/6420935.html\" target=\"_blank\" rel=\"noopener\">Candy?</a>的博客和<a href=\"https://www.cnblogs.com/reverymoon/p/9512836.html\" target=\"_blank\" rel=\"noopener\">ReMoon</a>。</li>\n</ul>\n<p><strong>对以上巨佬表示感谢。</strong></p>"},{"title":"YNOI做题记录","date":"2019-02-06T13:43:29.000Z","comments":1,"_content":"\n> 万古神犇LXL，数据结构碾众生！\n\n~~即使是蒟蒻也想变强啊..~~\n\n# [luogu P3987](https://www.luogu.org/problemnew/show/P3987) 我永远喜欢珂朵莉~\n\n## 题目大意：\n\n有一个长为n的非负数序列A，支持以下两个操作：\n\n+ 1 l r x : 把区间[l,r]中所有x的倍数/x\n+ 2 l r : 查询区间[l,r]的和\n\n## 数据范围：\n\n$1 \\le n , m \\le 100000$\n\n$0 \\le A_i \\le 500000$\n\n$1 \\le x \\le 500000$\n\n<!-- more-->\n\n## 题解：\n\n首先，这道题的突破口在这里：\n\n* 一个数的约数个数不会太多。虽说上界$O(\\sqrt n)$,但实际上远没有那么多。500000以内只有大概200个左右。当对值域进行限制的时候，很可能就与约数个数相关。尤其是，本题中还有很明显的x的倍数÷x的操作，珂以考虑对每个可能的约数进行维护。\n\n  鉴于单点修改，区间求和是$O(\\log n)$ 的，而一个数最多被除$O(\\log n)$次，总复杂度$O(n\\log^2 n)$这并不是制约复杂度的关键。而且，如果对于整个数列或分块以后的整块（本质上是一个“整体”）维护整体的信息的话，这题根本不可做了。必须找出需要被除的数，才能维护整个数列。现在问题是，如何快速找到需要被除的数。即，如何快速找到序列中x的倍数。珂以考虑对所有$x\\in (2,500000)$进行维护。对于每个约数，维护一棵平衡树，存储数列中它的倍数的下标。当进行区间除的时候，在对应的平衡树中找到下标在$[l, r]$之间的子树，进行dfs，并删掉所有操作进行后不再是x倍数的数的下标。这个过程中珂以顺便维护数列值的变化。当然，并不需要建出所有的平衡树，只对查询的x建树就行了。\n\n  说来惭愧，我这道题在看了lxl的题解后还改了好几天。我从这道题吸取的经验有以下几点：\n\n  + 当你的板子检查了很多很多遍都没发现问题时，很可能是main函数写错了（捂脸\n  + 各种最大值一定要弄清楚，例如我写题的时候就把值域最大值当成了n。\n  + 板子是珂以根据自己的需要而改动的。如本题中平衡树并不需要维护size。\n\n当然YNOI的毒瘤题需要一点卡常的小trick，相信大家都会，不再赘述。\n\n### 我的代码：\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cctype>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <climits>\n#include <ctime>\n#define ls(o) (t[o].ch[0])\n#define rs(o) (t[o].ch[1])\n\nusing std::vector;\n\ntypedef long long ll;\n\nconst int maxn=500000+1000;\nconst int INF=0x3f3f3f3f;\n\nint a[maxn/5],cnt,n,root[maxn],cntdel,del[maxn];\nvector<int> v[maxn];\nll c[maxn];\n\nnamespace IO\n{\n    static char buf[1<<25],*fs,*ft;\n    // inline char gc()\n    // {\n    //     if (fs==ft)\n    //     {\n    //         ft=(fs=buf)+fread(buf,1,1<<25,stdin);\n    //         if (fs==ft) return EOF;\n    //     } \n    //     return *fs++;\n    // }\n    // #define gc() getchar()\n    // #define gc (*fs++)\n    inline int read()\n    {\n        register char ch;\n        while (!isdigit(ch=(*fs++)));\n        register int x=ch-48;\n        while (isdigit(ch=(*fs++)))\n            x=x*10+ch-48;\n        return x;\n    }\n}using IO::read;\n\nstruct Node\n{\n    int ff,ch[2];\n    int pos;\n}t[maxn*70];\n\ntemplate<class T> inline T max(T a,T b){return a<b?b:a;}\ntemplate<class T> inline T min(T a,T b){return a<b?a:b;}\n\ninline void update(int p,int x)\n{\n    for (register int i=p;i<=n;i+=i&-i) c[i]+=x;\n}\n\ninline ll query(int p)\n{\n    ll ans=0;\n    for (register int i=p;i;i-=i&-i) ans+=c[i];\n    return ans;\n}\n\ninline void decompose(int x,int p)\n{\n    int n=sqrt(x)+0.1;\n    for (register int i=1;i<=n;++i)\n    {\n        if (x%i==0)\n        {\n            v[i].push_back(p);\n            if (i*i!=x) v[x/i].push_back(p);\n            // printf(\"%d %d\",i,x/i);\n        }\n    }\n}\n\ninline void rotate(int x)\n{\n    int y=t[x].ff,z=t[y].ff;\n    int k=t[y].ch[1]==x;\n    t[z].ch[t[z].ch[1]==y]=x;\n    t[x].ff=z;\n    t[y].ch[k]=t[x].ch[k^1];\n    t[t[x].ch[k^1]].ff=y;\n    t[x].ch[k^1]=y;\n    t[y].ff=x;\n}\n\nint build(int l,int r,const vector<int>& v,int fa)\n{\n    if (l>r) return 0;\n    int mid=(l+r)>>1;\n    int u=++cnt;\n    t[u].ch[0]=build(l,mid-1,v,u);\n    t[u].ch[1]=build(mid+1,r,v,u);\n    t[u].ff=fa;\n    t[u].pos=v[mid];\n    return u;\n}\n\nint _pre,_suc,ppre,psuc;\n\nvoid _prec(int x,int o)\n{\n    if (!o) return;\n    if (t[o].pos<x && _pre<t[o].pos)\n        _pre=t[o].pos,ppre=o;\n    _prec(x,t[o].ch[t[o].pos<x]);\n}\n\ninline int prec(int x,int o)\n{\n    _pre=INT_MIN;ppre=0;\n    _prec(x,o);\n    return ppre;\n}\n\nvoid _succ(int x,int o)\n{\n    if (!o) return;\n    if (t[o].pos>x && _suc>t[o].pos)\n        _suc=t[o].pos,psuc=o;\n    _succ(x,t[o].ch[t[o].pos<=x]);\n}\n\ninline int succ(int x,int o)\n{\n    _suc=INT_MAX;psuc=0;\n    _succ(x,o);\n    return psuc;\n}\n\ninline void splay(int x,int goal,int idx)\n{\n    while (t[x].ff!=goal)\n    {\n        int y=t[x].ff,z=t[y].ff;\n        if (z!=goal) rotate((t[z].ch[1]==y)^(t[y].ch[1]==x)?x:y);\n        rotate(x);\n    }\n    if (!goal) root[idx]=x;\n}\n\nvoid remove(int x,int u,int idx)\n{\n    // assert(t[x].pos>-INF && t[x].pos<INF);\n    int L=prec(t[x].pos,u),R=succ(t[x].pos,u);\n    if (L!=R)\n    {\n        splay(L,0,idx);\n        splay(R,root[idx],idx);\n        // assert(t[t[t[root[idx]].ch[1]].ch[0]].pos==t[x].pos && !t[x].ch[0] && !t[x].ch[1]);\n        t[t[t[root[idx]].ch[1]].ch[0]].ff=0;\n        t[t[root[idx]].ch[1]].ch[0]=0;\n    }\n}\n\nvoid dfs(int u,int x,int idx)\n{\n    if (!u) return;\n    if (ls(u)) dfs(ls(u),x,idx);\n    if (rs(u)) dfs(rs(u),x,idx);\n    // assert(a[t[u].pos]%x==0);\n    if (a[t[u].pos]%x!=0) del[++cntdel]=u;\n    else\n    {\n        update(t[u].pos,-a[t[u].pos]);\n        a[t[u].pos]/=x;\n        update(t[u].pos,a[t[u].pos]);\n        if (a[t[u].pos]%x!=0) del[++cntdel]=u;\n    }\n}\n\nvoid Divide(int l,int r,int x)\n{\n    int L=prec(l,root[x]),R=succ(r,root[x]);\n    assert(R && L);\n    // assert(root[x]);\n    if (L!=R)\n    {\n        splay(L,0,x);\n        splay(R,root[x],x);\n        cntdel=0;\n        dfs(t[t[root[x]].ch[1]].ch[0],x,x);\n        // for (int i=1;i<=cntdel;++i)\n        //     assert(t[del[i]].pos>=l && t[del[i]].pos<=r);\n        for (int i=1;i<=cntdel;++i) remove(del[i],root[x],x);\n    }\n}\n\nvoid printtree(int u)\n{\n    if (ls(u)) printtree(ls(u));\n    printf(\"%d \",t[u].pos);\n    // if (t[u].pos>-INF && t[u].pos<INF) assert(a[t[u].pos]%x==0);\n    if (rs(u)) printtree(rs(u));\n}\n\nint main()\n{\n    // freopen(\"input.in\",\"r\",stdin);\n    // freopen(\"my.out\",\"w\",stdout);\n    fread(IO::fs=IO::buf,1,1<<25,stdin);\n    register int m;\n    n=read();m=read();\n    for (register int i=2;i<=500000;++i) v[i].push_back(-INF);\n    for (register int i=1;i<=n;++i)\n        a[i]=read(),decompose(a[i],i),update(i,a[i]);\n    // for (register int i=2;i<=500000;++i)\n    //     if (v[i].size()>1) v[i].push_back(+INF),root[i]=build(0,v[i].size()-1,v[i],0);\n    // for (int i=2;i<=n;++i)\n    //     if (v[i].size()>2)printtree(root[i],i);\n    static bool used[maxn];\n    for (register int i=1,opt,l,r,x;i<=m;++i)\n    {\n        opt=read();l=read();r=read();\n        if (opt==1)\n        {\n            x=read();\n            if (!used[x] && v[x].size()>1 && x>1)\n            {\n                v[x].push_back(+INF);\n                root[x]=build(0,v[x].size()-1,v[x],0);\n                used[x]=true;\n            }\n            if (l>r) l^=r^=l^=r;\n            if (l<0 || r>n) continue;\n            if (x>1 && v[x].size()>2) Divide(l,r,x);\n        }\n        else printf(\"%lld\\n\",query(r)-query(l-1));\n    }\n    // freopen(\"tm.out\",\"w\",stdout);\n    // printf(\"%d\",clock());\n    // for(;;);\n}\n```\n\n# [luogu P5068](https://www.luogu.org/problemnew/show/P5068)[Ynoi2015]我回来了\n\n## 题目描述\n\n珂朵莉给你一个无向图，每次查询的时候给一堆二元组$(x_i,y_i)$\n求图中有多少个点u与至少一个这次询问给出的二元组$(x_i,y_i)$满足 $dist(u,x_i)\\le y_i$，dist表示这两个点在图中的距离\n如果不连通$dist = \\inf$\n\n## 输入输出格式\n\n### 输入格式：\n\n* 第一行三个数表示n，m，q\n* n表示顶点个数，m表示边数\n* 之后m行每行两个数x，y表示这两个点之间连有一条边~，边权都为1\n* 之后q次询问，每个询问先给你一个数a\n* 之后a行每行两个数，x，y，表示一个二元组\n* n <= 1000 , m <= 100000 , q <= 100000\n* a的和 <= 2100000\n\n### 输出格式：\n\n* q行，每行一个数表示这次询问的答案\n\n## 题解：\n\n这道题大概是YNOI中最良心的一道题？(雾  ~~然而我也没做出来~~\n\n首先，我们珂以想到，这题大概要预处理，然后用接近$O(1)$的时间回答每个二元组询问。考虑题目中，每一个点即使满足所有要求也只被计算一次贡献，而每个二元组之间又是相互独立的，所以我们需要一个资瓷快速集合取并，快速求集合元素数目的数据结构——这不就是$\\texttt{bitset}$嘛。所以，我们尝试，令$f(u,i)$为$dist(u,v)\\le i$的v的集合，则对于每次询问，将所对应的$f$集合取一个并就好了。现在，问题转化为如何求f集合。本题的时空限制十分诡异，会让人误以为标算的复杂度是错的~~（然鹅实际跑得飞快）~~其实暴力计算f就珂以了~~\n\n* 首先，跑n次bfs，计算出所有顶点对之间最短路。时间$O(n(n+m))$\n* 然后，用已知的信息暴力更新f。设w为bitset的位宽，时间$O(n^3/w)$\n* （逃\n\n最后，毒瘤lxl卡了链式前向星，只能用vector存图（因为空间够用，所以我直接开了数组）\n\n注意，输入存在重边。\n\n所以，这道题我们就做完啦（撒花！\n\n### 我的代码\n\n~~（我以为这题一定很卡常，所以代码稍微毒瘤了一点）~~：\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <bitset>\n#include <queue>\n\nusing std::queue;\nusing std::bitset;\n\nconst int maxn=1024;\nconst int INF=0x3f3f3f3f;\n\nint G[maxn][maxn],cnt[maxn],d[maxn][maxn];\nint link[maxn][maxn];\n\nnamespace IO\n{\n    static char buf[1<<17],*fs,*ft;\n    inline char gc()\n    {\n        if (fs==ft)\n        {\n            ft=(fs=buf)+fread(buf,1,1<<17,stdin);\n            if (fs==ft) return EOF;\n        }\n        return *fs++;\n    }\n    #define gc getchar\n    inline int read()\n    {\n        char ch;\n        while (!isdigit(ch=gc()));\n        int x=ch^48;\n        while (isdigit(ch=gc()))\n            x=x*10+ch-48;\n        return x;\n    }\n}-using IO::read;\n\ninline void bfs(int s)\n{\n    static bool vis[maxn];\n    memset(vis,0,sizeof(vis));\n    memset(d[s],0x3f,sizeof(int)*maxn);\n    vis[s]=true;d[s][s]=0;\n    queue<int> q;\n    q.push(s);\n    while (!q.empty())\n    {\n        register int u=q.front();q.pop();\n        for (register int *ptr=G[u],*ed=G[u]+cnt[u];ptr!=ed;++ptr)\n        {\n            register int v=*ptr;\n            if (!vis[v]) d[s][v]=d[s][u]+1,q.push(v),vis[v]=true;\n        }\n    }\n}\n\nint main()\n{\n    int n,m,q;\n    n=read();m=read();q=read();\n    for (register int i=1,u,v;i<=m;++i)\n    {\n        u=read();v=read();\n        if (link[u][v]) continue;\n        G[u][cnt[u]++]=v;\n        G[v][cnt[v]++]=u;\n        link[u][v]=link[v][u]=true;\n    }\n    for (register int i=1;i<=n;++i) bfs(i);\n    static bitset<maxn> f[maxn][maxn];\n    for (register int u=1;u<=n;++u)\n        for (register int v=1;v<=n;++v)\n            if (d[u][v]<=n) f[u][d[u][v]].set(v);\n    for (register int u=1;u<=n;++u)\n        for (register int i=1;i<=n;++i)\n            f[u][i]|=f[u][i-1];\n    bitset<maxn> ans;\n    for (register int i=1;i<=q;++i)\n    {\n        ans.reset();\n        register int a=read();\n        for (register int j=1;j<=a;++j)\n        {\n            register int x=read(),y=read();\n            ans|=f[x][y];\n        }\n        printf(\"%d\\n\",(int)ans.count());\n    }\n}\n```\n\n\n\n# [luogu P5072](https://www.luogu.org/problemnew/show/P5072)[YNOI2015]盼君勿忘\n\n## 题目描述\n\n珂朵莉给了你一个序列，每次查询一个区间[l,r]中所有子序列分别去重后的和mod p\n\n## 输入输出格式\n\n### 输入格式：\n\n* 第一行两个数$n,m$\n* 第二行$n$个数表示这个序列$A$\n* 之后$m$行，每行三个数$l,r,p$表示查询的区间与模数\n* 对于$100\\%$的数据，$n,m <= 10^5$,$A_i,p <= 1000000000$\n\n### 输出格式：\n\n* $m$行，每行输出一个数表示答案\n\n## 题解\n\nOrz lxl...由乃OI真的毒瘤。。。\n\n~~我从不抄题解，我只是题解的搬运工。~~真的不会做，瞎写一点儿吧。\n\n看到这题，没修改操作，数据范围1e5，珂以想到这是个莫队题。~~然后我就不会了~~。\n\n看到这样的题，我们暴力考虑每个区间显然是不现实的。我们转而考虑每个数对答案的贡献。对于一个数，它被计算到的次数珂以这么计算：\n\n对于一个区间$[l..r]$，它的非空子序列个数显然为$$2^{r-l+1}-1$$个。不包含x的子序列有$$2^{r-l+1-cnt[x]}-1$$个。所以，x一共被计算了$2^{r-l+1}-2^{r-l+1-cnt[x]}$次。\n\n~~所以，我们用$cnt[x]$维护x在当前区间的出现次数，莫队维护cnt，修改的同时暴力维护和。。。这就珂以做到$O(n\\sqrt n)$了~~\n\n上面的假做法只适合模数不变的情况。。。我们考虑模数会变化该怎么做。\n\n**手动划重点！以下内容的思想很重要！**\n\n考虑以$\\sqrt n$为界限**分类讨论**。对于出现次数小于$\\sqrt n$的数，他们的出现次数只有$\\sqrt n$种。对于出现次数大于等于$\\sqrt n$的数，这样的数最多只有$\\sqrt n$种。所以我们对于每个小于等于$\\sqrt n$ 的出现次数x，维护出现次数=x的数之和，对于出现次数$\\geq \\sqrt n$的数，用一种数据结构维护它们组成的集合。$\\texttt{STL unordeded_set}$是个好东西啊。~~虽然考试不让用~~这样就珂以做到$O(n\\sqrt n)$求解问题啦。\n\n最后还有一个小问题——如何快速求2的幂？模数动态改变，每次必须重新计算。有一种$O(\\sqrt n)$预处理，$O(1)$查询的处理方法，正好适合本题。\n\n设$T=\\lfloor\\sqrt n\\rfloor$,则$C^{x}=C^{\\lfloor x/T \\rfloor} * C^{x\\mod T}$ 。这样，只需要预处理$C^1, C^2, C^3....C^T$和$C^T, C^{2T}....C^{T*T}$ 即可。\n\n### 我的代码：\n\n(卡常的血泪史。。。)另外，好像对于值域比较大的情况，它会输出负数，现在暂时没找到原因。还有，膜运算真的太慢啦！去掉四个膜运算，运行时间几乎-1s。。\n\n```cpp\n#pragma GCC optimize(\"-O3\")\n#pragma GCC optimize(\"-Ofast\")\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <unordered_map>\n#include <unordered_set>\n#include <ctime>\n// #define int long long\n\ntypedef unsigned long long ll;\n\nusing std::sort;\nusing std::unique;\nusing std::lower_bound;\nusing std::unordered_map;\nusing std::unordered_set;\n\nconst int maxn=1e6+100;\n\nint blo[maxn],a[maxn],b[maxn],cnt[maxn],L=1,R;\nll _2_k[maxn],_2_sqrt[maxn];\nll sum[maxn],ans;\nunordered_map<int,int> rnk;\nunordered_set<int> mp;\n\nnamespace IO\n{\n    char buf[1<<24],*fs,*ft;\n    // inline char gc()\n    // {\n    //     if (fs==ft)\n    //     {\n    //         ft=(fs=buf)+fread(buf,1,1<<24,stdin);\n    //         if (fs==ft) return EOF;\n    //     }\n    //     return *fs++;\n    // }\n    #define gc() (*fs++)\n    // #define gc() getchar()\n    inline int read()\n    {\n        char ch;\n        while (!isdigit(ch=gc()));\n        int x=ch^48;\n        while (isdigit(ch=gc()))\n            x=x*10+ch-48;\n        return x;\n    }\n}using IO::read;\n\nstruct Q\n{\n    int l,r,p,id;\n    bool operator< (const Q& b) const \n\t{\n\t\t// return blo[l]^blo[b.l]?blo[l]<blo[b.l]:blo[l]&1?r<b.r:r>b.r;\n        return blo[l]==blo[b.l]?r<b.r:l<b.l;\n\t}\n}q[maxn];\n\ninline ll qpow(register ll a,register ll b,register ll p)\n{\n    ll ans=1%p;\n    for (;b;b>>=1)\n    {\n        if (b&1) ans=ans*a%p;\n        a=a*a%p;\n    }\n    return ans;\n    // fprintf(stderr,\"SYTAKIOI\\n\");\n}\n\ninline void ins(const int t,const int T)\n{\n    register int &x=cnt[t];\n    if (x<T)\n    {\n        if (x) sum[x]-=b[t];\n        if (++x<T) sum[x]+=b[t];\n        else mp.insert(b[t]);\n    }\n    else ++cnt[t];\n    // fprintf(stderr,\"SYTAKIOI\\n\");\n}\n\ninline void del(const int t,const int T)\n{\n    register int &x=cnt[t];\n    register int y=b[t];\n    if (x<T)\n    {\n        sum[x]-=y;\n        if (--x) sum[x]+=y;\n    }\n    else if (--x<T) mp.erase(y),sum[T-1]+=y;\n            // fprintf(stderr,\"SYTAKIOI\\n\");\n}\n\ninline void prework(const ll p,const int T)\n{\n    _2_k[0]=1%p,_2_k[1]=2%p,_2_sqrt[0]=1%p,_2_sqrt[1]=qpow(2,T,p);\n    for (int i=2;i<=T;++i)\n    {\n        _2_k[i]=_2_k[i-1]*2%p;\n        _2_sqrt[i]=_2_sqrt[i-1]*_2_sqrt[1]%p;\n    }\n    // fprintf(stderr,\"SYTAKIOI\\n\");\n}\n\ninline ll getpow(const int x,const int T,const ll p)\n{\n    // fprintf(stderr,\"SYTAKIOI\\n\");\n    return _2_k[x%T]*_2_sqrt[x/T]%p;\n}\n\nsigned main()\n{\n    freopen(\"in.txt\",\"r\",stdin);\n    freopen(\"my.out\",\"w\",stdout);\n    fread(IO::fs=IO::buf,1,1<<24,stdin);\n    register int n,m;\n    n=read();m=read();\n    const int T=sqrt(n);\n    for (register int i=1;i<=n;++i)\n        blo[i]=(i-1)/T+1;\n    for (register int *ptrb=b+1,*ptra=a+1,*ed=a+n+1;ptra!=ed;++ptrb,++ptra)\n        *ptrb=*ptra=read();\n    sort(b+1,b+n+1);\n    int tot=unique(b+1,b+n+1)-b-1;\n    for (register int i=1;i<=n;++i)\n        a[i]=lower_bound(b+1,b+tot+1,a[i])-b;\n    // for (int i=1;i<=n;++i)\n    //     printf(\"x=%d rnk[x]=%d\\n\",a[i],rnk[a[i]]);\n    for (register Q* ptr=q+1,*ed=q+m+1;ptr!=ed;++ptr)\n        ptr->l=read(),ptr->r=read(),ptr->p=read(),ptr->id=ptr-q;\n    sort(q+1,q+m+1);\n    static ll ans[maxn];\n    for (register Q* ptr=q+1,*ed=q+m+1;ptr!=ed;++ptr)\n    {\n        // if (q[i].p==15) q[i].p=1e9+7;\n        const int l=ptr->l,r=ptr->r,p=ptr->p;\n        prework(p,T);\n        while (R<r) ins(a[++R],T);\n        while (L>l) ins(a[--L],T);\n        while (R>r) del(a[R--],T);\n        while (L<l) del(a[L++],T);\n        ll& tot=ans[ptr->id];\n        ll tmp=getpow(r-l+1,T,p);\n        for (register int i=1;i<T;++i)\n            (tot+=((tmp-getpow(r-l+1-i,T,p)%p)+p)*sum[i])%=p;\n        for (const auto x:mp)\n            (tot+=((tmp-getpow(r-l+1-(cnt[x]),T,p)%p)+p)*b[x])%=p;\n        // printf(\"L=%d R=%d,sum[1]=%d\\n\",L,R,sum[1]);\n    }\n    for (register ll *i=ans+1,*ed=ans+m+1;i!=ed;++i)\n        printf(\"%llu\\n\",*i);\n    // fprintf(stderr,\"%d\",clock());\n    // return clock();\n}\n```\n\n\n\n# [luogu P3674](https://www.luogu.org/problemnew/show/P3674)小清新人渣的本愿\n\n## 题目描述\n\n给你一个序列a，长度为n，有m次操作，每次询问一个区间是否珂以选出两个数它们的差为x，或者询问一个区间是否珂以选出两个数它们的和为x，或者询问一个区间是否珂以选出两个数它们的乘积为x ，这三个操作分别为操作1,2,3\n\n选出的这两个数珂以是同一个位置的数\n\n## 输入输出格式\n\n### 输入格式：\n\n* 第一行两个数$n,m$\n* 后面一行$n$个数表示$a_i$\n* 后面$m$行每行四个数$opt\\ l\\ r\\ x$\n* $opt$表示这个是第几种操作，$l,r$表示操作的区间，$x$表示这次操作的$x$\n\n### 输出格式：\n\n* 对于每个询问，如果珂以，输出$\\texttt{hana}$，否则输出$\\texttt{bi}$\n\n## 题解\n\n这题还是挺良心的~~比上一题良心多了~~  ~~瞎说毒瘤lxl怎么会出良心题~~\n\n没修改+1e5+lxl=膜队。\n\n所以我们考虑怎么膜队维护。\n\n我们首先肯定要维护所有数的出现次数。然后怎么做？\n\n考虑暴力：对于每个可能成为答案的数，查询对应的另一个数是否存在。这个大概没法用什么数据结构优化了，所以考虑神奇的$\\texttt{bitset}$。用$\\texttt{bitset}$维护每个数是否出现，我们发现：\n\n* 对于询问1，若存在k和k+x，则对应着$\\texttt{S&(S<<x).any()==true}$ 。\n* 对于询问2，若存在$a+b=x$,即$a-(-b)=x$。对于负数，我们不好维护，所以用处理负下标的一般方法，转化成$a-(-b+N)=x-N$。（此处N是一个较大的整数）这样，用另外一个$\\texttt{bitset}$，对于每个出现的$k$，令对应的$(-k+n)$下标处的值为1就珂以了。另外，$\\texttt{bitset}$的移位运算会将$\\texttt{int}$强转成$\\texttt{size_t}$，当移位数为负数的时候会出锅。所以要手动把上面的左移改成右移，移位数取反。\n* 对于询问3，我们发现我们用$\\texttt{bitset}$没法很好的维护了。所以暴力枚举因子，判断是否存在,珂以发现这并不是复杂度的瓶颈。这样做是正确的......\n\n### 我的代码：\n\n~~您看我如果不卡常的话码风还是挺正常的嘛~~\n\n```cpp\n#include <cmath>\n#include <bitset>\n#include <cstdio>\n#include <algorithm>\n\nusing std::bitset;\nusing std::sort;\n\nconst int maxn=1e5+1000;\n\nint blo[maxn],a[maxn],col[maxn];\nbitset<maxn> ex,rev;\nint d[maxn];\n\nstruct Q\n{\n    int type,l,r,x,id;\n    bool operator< (const Q& q) const\n    {\n        return blo[l]==blo[q.l]?r<q.r:l<q.l;\n    }\n}q[maxn];\n\ninline bool QuerySub(int x)\n{\n    return (ex&(ex<<x)).any();\n}\n\ninline bool QueryAdd(int x)\n{\n    return (ex&(rev>>(maxn-x))).any();\n}\n\ninline bool QueryMul(int x)\n{\n    for (int i=1;i*i<=x;++i)\n    {\n        if (x%i==0)\n            if (ex[i] && ex[x/i]) return true;\n    }\n    return false;\n}\n\ninline void add(int x)\n{\n    if (++col[x]==1) \n        ex[x]=1,rev[maxn-x]=1;\n}\n\ninline void del(int x)\n{\n    if (--col[x]==0)\n        ex[x]=0,rev[maxn-x]=0;\n}\n\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    int T=sqrt(n);\n    for (int i=1;i<=n;++i)\n        scanf(\"%d\",a+i),blo[i]=(i-1)/T+1;\n    for (int i=1;i<=m;++i)\n    {\n        scanf(\"%d%d%d%d\",&q[i].type,&q[i].l,&q[i].r,&q[i].x);\n        q[i].id=i;\n    }\n    sort(q+1,q+m+1);\n    static int ans[maxn];\n    for (int i=1,L=1,R=0;i<=m;++i)\n    {\n        const int l=q[i].l,r=q[i].r,x=q[i].x;\n        while (R<r) add(a[++R]);\n        while (L>l) add(a[--L]);\n        while (L<l) del(a[L++]);\n        while (R>r) del(a[R--]);\n        switch (q[i].type)\n        {\n            case 1:\n                ans[q[i].id]=QuerySub(x);\n                break;\n            case 2:\n                ans[q[i].id]=QueryAdd(x);\n                break;\n            case 3:\n                ans[q[i].id]=QueryMul(x);\n                break;\n        }\n    }\n    for (int i=1;i<=m;++i) puts(ans[i]?\"hana\":\"bi\");\n}\n```\n\n\n\n# [luogu P4688](https://www.luogu.org/problemnew/show/P4688)[YNOI2016]掉进兔子洞\n\n## 题目描述\n\n给定一个长度为n的数列，有m次询问。每次询问给出三个区间，询问若从这三个区间一起删数，一直删到三个区间没有共同的数为止，最后这三个区间一共剩下的数的数量。（询问之间互相独立）\n\n## 题解\n\n这道题的话，首先，还是经验公式：\n\n没修改+1e5+lxl=膜队。\n\n所以考虑怎么膜队。\n\n首先通过补集转化，问题转化为三个区间共同出现的数的数量。既然是膜队，就要对每个区间分别处理。现在我们需要维护的信息就十分明确了：维护资瓷快速求交集的区间出现元素。这用数据结构并不好维护，所以考虑万能的$\\texttt{bitset}$。现在问题来了：$\\texttt{bitset}$只能对于每个元素，维护是否出现过，并不能维护出现多少次。~~此时情况开始变得辣手起来。。。~~\n\n能不能通过某种手段，使得$\\texttt{bitset}$中留够足够的空间使得每个相同的数能够连续存储在一段空间中？珂以！我们只需要在离散化时不去重就珂以了！在存储时，令$x+cnt[x]-1$这一位为1，就珂以了。（我在代码中是采用$\\texttt{shadowice1984}$大佬的方法，令离散化之后的值为数列中小于等于该数的数的个数，就令$x-cnt[x]+1$这一位为1。显然这两种方法是基本相同的。那么，我们就做完啦！\n\n~~才不是呢！lxl的题怎么能这么轻易做完？~~\n\n我们发现我们的最终结果是保存在$1e5个​$$\\texttt{bitset}​$里面的。算一波空间，会发现我们开不下。。。所以，我们的算法错了么？考虑充足的时限，我们把询问分成三次处理。这里还有一个避免分类讨论的trick，就是首先把询问储存下来，每次查询时将莫队的询问数组清零，并将当前处理的区间复制到莫队的数组里。这样能使代码简洁许多，并提高珂复用性。\n\n### 我的代码：\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <bitset>\n#include <map>\n#include <algorithm>\n\nusing std::sort;\nusing std::lower_bound;\nusing std::bitset;\nusing std::map;\nusing std::min;\n\nconst int maxn=1e5+100;\n\nint a[maxn],blo[maxn],col[maxn],len[maxn];\nbitset<maxn> ans[40000],tmp;\nint l1[maxn],l2[maxn],l3[maxn],r1[maxn],r2[maxn],r3[maxn];\n\nstruct Q\n{\n    int l,r,id;\n    bool operator< (const Q& q) const\n    {\n        return blo[l]==blo[q.l]?r<q.r:l<q.l;\n    }\n}qry[maxn*3];\n\ninline void upd(int p,int x)\n{\n    if (x==1)\n        tmp[a[p]-(col[a[p]])]=1,++col[a[p]];\n    else\n        tmp[a[p]-col[a[p]]+1]=0,--col[a[p]];\n}\n\ninline void init(int l,int r,int &tmp)\n{\n    tmp=0;\n    for (int i=l;i<=r;++i)\n    {\n        ++tmp;\n        qry[tmp].l=l1[i];qry[tmp].r=r1[i];qry[tmp].id=i-l+1;\n        ++tmp;\n        qry[tmp].l=l2[i];qry[tmp].r=r2[i];qry[tmp].id=i-l+1;\n        ++tmp;\n        qry[tmp].l=l3[i];qry[tmp].r=r3[i];qry[tmp].id=i-l+1;\n        len[i-l+1]=r1[i]-l1[i]+1+r2[i]-l2[i]+1+r3[i]-l3[i]+1;\n    }\n}\n\nvoid solve(const int l,const int r)\n{\n    int tmp=0;\n    int L=1,R=0;\n    // int leftid=(left-1)*3+1,rightid=min(tmp,(right-1)*3+1);\n    // sort(qry+left,qry+right+1);\n    init(l,r,tmp);\n    sort(qry+1,qry+tmp+1);\n    memset(col,0,sizeof(col));\n    for (int i=1;i<=r-l+1;++i) ans[i].set();\n    ::tmp.reset();\n    for (int i=1;i<=tmp;++i)\n    {\n        const int l=qry[i].l,r=qry[i].r;\n        while (R<r) upd(++R,1);\n        while (L>l) upd(--L,1);\n        while (R>r) upd(R--,-1);\n        while (L<l) upd(L++,-1);\n        // if (cnt==1) ans[qry[i].id]&=tmp;\n        // else if (cnt==2) ans[qry[i].id-33333]&=tmp;\n        // else ans[qry[i].id-(33333+33336-1)]&=tmp;\n        ans[qry[i].id]&=::tmp;\n    }\n    // for (int i=1;i<=tmp;++i)\n    //     len[qry[i].id]+=qry[i].r-qry[i].l+1;\n    for (int i=1;i<=r-l+1;++i)\n        printf(\"%d\\n\",len[i]-(int)ans[i].count()*3);\n}\n\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    map<int,int> mp;\n    int T=sqrt(n);\n    for (int i=1;i<=n;++i)\n        blo[i]=(i-1)/T+1;\n    for (int i=1;i<=n;++i)\n        scanf(\"%d\",a+i),++mp[a[i]];\n    for (map<int,int>::iterator it=mp.begin(),lst=it++;it!=mp.end();lst=it++)\n        it->second+=lst->second;\n    for (int i=1;i<=n;++i) a[i]=mp[a[i]];\n    for (int i=1;i<=m;++i)\n        scanf(\"%d%d%d%d%d%d\",l1+i,r1+i,l2+i,r2+i,l3+i,r3+i);\n    for (int i=1;i<=m;i+=36000) solve(i,min(i+36000-1,m));\n}\n```\n\n","source":"_posts/YNOI做题记录.md","raw":"---\ntitle: YNOI做题记录\ndate: 2019-02-06 21:43:29\ntags:\n    - 分块\n    - 莫队\n    - YNOI\n    - 毒瘤\n    - 数据结构\n    - 平衡树\ncategories:\n    - 题解\ncomments:\n---\n\n> 万古神犇LXL，数据结构碾众生！\n\n~~即使是蒟蒻也想变强啊..~~\n\n# [luogu P3987](https://www.luogu.org/problemnew/show/P3987) 我永远喜欢珂朵莉~\n\n## 题目大意：\n\n有一个长为n的非负数序列A，支持以下两个操作：\n\n+ 1 l r x : 把区间[l,r]中所有x的倍数/x\n+ 2 l r : 查询区间[l,r]的和\n\n## 数据范围：\n\n$1 \\le n , m \\le 100000$\n\n$0 \\le A_i \\le 500000$\n\n$1 \\le x \\le 500000$\n\n<!-- more-->\n\n## 题解：\n\n首先，这道题的突破口在这里：\n\n* 一个数的约数个数不会太多。虽说上界$O(\\sqrt n)$,但实际上远没有那么多。500000以内只有大概200个左右。当对值域进行限制的时候，很可能就与约数个数相关。尤其是，本题中还有很明显的x的倍数÷x的操作，珂以考虑对每个可能的约数进行维护。\n\n  鉴于单点修改，区间求和是$O(\\log n)$ 的，而一个数最多被除$O(\\log n)$次，总复杂度$O(n\\log^2 n)$这并不是制约复杂度的关键。而且，如果对于整个数列或分块以后的整块（本质上是一个“整体”）维护整体的信息的话，这题根本不可做了。必须找出需要被除的数，才能维护整个数列。现在问题是，如何快速找到需要被除的数。即，如何快速找到序列中x的倍数。珂以考虑对所有$x\\in (2,500000)$进行维护。对于每个约数，维护一棵平衡树，存储数列中它的倍数的下标。当进行区间除的时候，在对应的平衡树中找到下标在$[l, r]$之间的子树，进行dfs，并删掉所有操作进行后不再是x倍数的数的下标。这个过程中珂以顺便维护数列值的变化。当然，并不需要建出所有的平衡树，只对查询的x建树就行了。\n\n  说来惭愧，我这道题在看了lxl的题解后还改了好几天。我从这道题吸取的经验有以下几点：\n\n  + 当你的板子检查了很多很多遍都没发现问题时，很可能是main函数写错了（捂脸\n  + 各种最大值一定要弄清楚，例如我写题的时候就把值域最大值当成了n。\n  + 板子是珂以根据自己的需要而改动的。如本题中平衡树并不需要维护size。\n\n当然YNOI的毒瘤题需要一点卡常的小trick，相信大家都会，不再赘述。\n\n### 我的代码：\n\n```cpp\n#include <cmath>\n#include <cstdio>\n#include <cctype>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <climits>\n#include <ctime>\n#define ls(o) (t[o].ch[0])\n#define rs(o) (t[o].ch[1])\n\nusing std::vector;\n\ntypedef long long ll;\n\nconst int maxn=500000+1000;\nconst int INF=0x3f3f3f3f;\n\nint a[maxn/5],cnt,n,root[maxn],cntdel,del[maxn];\nvector<int> v[maxn];\nll c[maxn];\n\nnamespace IO\n{\n    static char buf[1<<25],*fs,*ft;\n    // inline char gc()\n    // {\n    //     if (fs==ft)\n    //     {\n    //         ft=(fs=buf)+fread(buf,1,1<<25,stdin);\n    //         if (fs==ft) return EOF;\n    //     } \n    //     return *fs++;\n    // }\n    // #define gc() getchar()\n    // #define gc (*fs++)\n    inline int read()\n    {\n        register char ch;\n        while (!isdigit(ch=(*fs++)));\n        register int x=ch-48;\n        while (isdigit(ch=(*fs++)))\n            x=x*10+ch-48;\n        return x;\n    }\n}using IO::read;\n\nstruct Node\n{\n    int ff,ch[2];\n    int pos;\n}t[maxn*70];\n\ntemplate<class T> inline T max(T a,T b){return a<b?b:a;}\ntemplate<class T> inline T min(T a,T b){return a<b?a:b;}\n\ninline void update(int p,int x)\n{\n    for (register int i=p;i<=n;i+=i&-i) c[i]+=x;\n}\n\ninline ll query(int p)\n{\n    ll ans=0;\n    for (register int i=p;i;i-=i&-i) ans+=c[i];\n    return ans;\n}\n\ninline void decompose(int x,int p)\n{\n    int n=sqrt(x)+0.1;\n    for (register int i=1;i<=n;++i)\n    {\n        if (x%i==0)\n        {\n            v[i].push_back(p);\n            if (i*i!=x) v[x/i].push_back(p);\n            // printf(\"%d %d\",i,x/i);\n        }\n    }\n}\n\ninline void rotate(int x)\n{\n    int y=t[x].ff,z=t[y].ff;\n    int k=t[y].ch[1]==x;\n    t[z].ch[t[z].ch[1]==y]=x;\n    t[x].ff=z;\n    t[y].ch[k]=t[x].ch[k^1];\n    t[t[x].ch[k^1]].ff=y;\n    t[x].ch[k^1]=y;\n    t[y].ff=x;\n}\n\nint build(int l,int r,const vector<int>& v,int fa)\n{\n    if (l>r) return 0;\n    int mid=(l+r)>>1;\n    int u=++cnt;\n    t[u].ch[0]=build(l,mid-1,v,u);\n    t[u].ch[1]=build(mid+1,r,v,u);\n    t[u].ff=fa;\n    t[u].pos=v[mid];\n    return u;\n}\n\nint _pre,_suc,ppre,psuc;\n\nvoid _prec(int x,int o)\n{\n    if (!o) return;\n    if (t[o].pos<x && _pre<t[o].pos)\n        _pre=t[o].pos,ppre=o;\n    _prec(x,t[o].ch[t[o].pos<x]);\n}\n\ninline int prec(int x,int o)\n{\n    _pre=INT_MIN;ppre=0;\n    _prec(x,o);\n    return ppre;\n}\n\nvoid _succ(int x,int o)\n{\n    if (!o) return;\n    if (t[o].pos>x && _suc>t[o].pos)\n        _suc=t[o].pos,psuc=o;\n    _succ(x,t[o].ch[t[o].pos<=x]);\n}\n\ninline int succ(int x,int o)\n{\n    _suc=INT_MAX;psuc=0;\n    _succ(x,o);\n    return psuc;\n}\n\ninline void splay(int x,int goal,int idx)\n{\n    while (t[x].ff!=goal)\n    {\n        int y=t[x].ff,z=t[y].ff;\n        if (z!=goal) rotate((t[z].ch[1]==y)^(t[y].ch[1]==x)?x:y);\n        rotate(x);\n    }\n    if (!goal) root[idx]=x;\n}\n\nvoid remove(int x,int u,int idx)\n{\n    // assert(t[x].pos>-INF && t[x].pos<INF);\n    int L=prec(t[x].pos,u),R=succ(t[x].pos,u);\n    if (L!=R)\n    {\n        splay(L,0,idx);\n        splay(R,root[idx],idx);\n        // assert(t[t[t[root[idx]].ch[1]].ch[0]].pos==t[x].pos && !t[x].ch[0] && !t[x].ch[1]);\n        t[t[t[root[idx]].ch[1]].ch[0]].ff=0;\n        t[t[root[idx]].ch[1]].ch[0]=0;\n    }\n}\n\nvoid dfs(int u,int x,int idx)\n{\n    if (!u) return;\n    if (ls(u)) dfs(ls(u),x,idx);\n    if (rs(u)) dfs(rs(u),x,idx);\n    // assert(a[t[u].pos]%x==0);\n    if (a[t[u].pos]%x!=0) del[++cntdel]=u;\n    else\n    {\n        update(t[u].pos,-a[t[u].pos]);\n        a[t[u].pos]/=x;\n        update(t[u].pos,a[t[u].pos]);\n        if (a[t[u].pos]%x!=0) del[++cntdel]=u;\n    }\n}\n\nvoid Divide(int l,int r,int x)\n{\n    int L=prec(l,root[x]),R=succ(r,root[x]);\n    assert(R && L);\n    // assert(root[x]);\n    if (L!=R)\n    {\n        splay(L,0,x);\n        splay(R,root[x],x);\n        cntdel=0;\n        dfs(t[t[root[x]].ch[1]].ch[0],x,x);\n        // for (int i=1;i<=cntdel;++i)\n        //     assert(t[del[i]].pos>=l && t[del[i]].pos<=r);\n        for (int i=1;i<=cntdel;++i) remove(del[i],root[x],x);\n    }\n}\n\nvoid printtree(int u)\n{\n    if (ls(u)) printtree(ls(u));\n    printf(\"%d \",t[u].pos);\n    // if (t[u].pos>-INF && t[u].pos<INF) assert(a[t[u].pos]%x==0);\n    if (rs(u)) printtree(rs(u));\n}\n\nint main()\n{\n    // freopen(\"input.in\",\"r\",stdin);\n    // freopen(\"my.out\",\"w\",stdout);\n    fread(IO::fs=IO::buf,1,1<<25,stdin);\n    register int m;\n    n=read();m=read();\n    for (register int i=2;i<=500000;++i) v[i].push_back(-INF);\n    for (register int i=1;i<=n;++i)\n        a[i]=read(),decompose(a[i],i),update(i,a[i]);\n    // for (register int i=2;i<=500000;++i)\n    //     if (v[i].size()>1) v[i].push_back(+INF),root[i]=build(0,v[i].size()-1,v[i],0);\n    // for (int i=2;i<=n;++i)\n    //     if (v[i].size()>2)printtree(root[i],i);\n    static bool used[maxn];\n    for (register int i=1,opt,l,r,x;i<=m;++i)\n    {\n        opt=read();l=read();r=read();\n        if (opt==1)\n        {\n            x=read();\n            if (!used[x] && v[x].size()>1 && x>1)\n            {\n                v[x].push_back(+INF);\n                root[x]=build(0,v[x].size()-1,v[x],0);\n                used[x]=true;\n            }\n            if (l>r) l^=r^=l^=r;\n            if (l<0 || r>n) continue;\n            if (x>1 && v[x].size()>2) Divide(l,r,x);\n        }\n        else printf(\"%lld\\n\",query(r)-query(l-1));\n    }\n    // freopen(\"tm.out\",\"w\",stdout);\n    // printf(\"%d\",clock());\n    // for(;;);\n}\n```\n\n# [luogu P5068](https://www.luogu.org/problemnew/show/P5068)[Ynoi2015]我回来了\n\n## 题目描述\n\n珂朵莉给你一个无向图，每次查询的时候给一堆二元组$(x_i,y_i)$\n求图中有多少个点u与至少一个这次询问给出的二元组$(x_i,y_i)$满足 $dist(u,x_i)\\le y_i$，dist表示这两个点在图中的距离\n如果不连通$dist = \\inf$\n\n## 输入输出格式\n\n### 输入格式：\n\n* 第一行三个数表示n，m，q\n* n表示顶点个数，m表示边数\n* 之后m行每行两个数x，y表示这两个点之间连有一条边~，边权都为1\n* 之后q次询问，每个询问先给你一个数a\n* 之后a行每行两个数，x，y，表示一个二元组\n* n <= 1000 , m <= 100000 , q <= 100000\n* a的和 <= 2100000\n\n### 输出格式：\n\n* q行，每行一个数表示这次询问的答案\n\n## 题解：\n\n这道题大概是YNOI中最良心的一道题？(雾  ~~然而我也没做出来~~\n\n首先，我们珂以想到，这题大概要预处理，然后用接近$O(1)$的时间回答每个二元组询问。考虑题目中，每一个点即使满足所有要求也只被计算一次贡献，而每个二元组之间又是相互独立的，所以我们需要一个资瓷快速集合取并，快速求集合元素数目的数据结构——这不就是$\\texttt{bitset}$嘛。所以，我们尝试，令$f(u,i)$为$dist(u,v)\\le i$的v的集合，则对于每次询问，将所对应的$f$集合取一个并就好了。现在，问题转化为如何求f集合。本题的时空限制十分诡异，会让人误以为标算的复杂度是错的~~（然鹅实际跑得飞快）~~其实暴力计算f就珂以了~~\n\n* 首先，跑n次bfs，计算出所有顶点对之间最短路。时间$O(n(n+m))$\n* 然后，用已知的信息暴力更新f。设w为bitset的位宽，时间$O(n^3/w)$\n* （逃\n\n最后，毒瘤lxl卡了链式前向星，只能用vector存图（因为空间够用，所以我直接开了数组）\n\n注意，输入存在重边。\n\n所以，这道题我们就做完啦（撒花！\n\n### 我的代码\n\n~~（我以为这题一定很卡常，所以代码稍微毒瘤了一点）~~：\n\n```cpp\n#include <cstdio>\n#include <cctype>\n#include <cstring>\n#include <bitset>\n#include <queue>\n\nusing std::queue;\nusing std::bitset;\n\nconst int maxn=1024;\nconst int INF=0x3f3f3f3f;\n\nint G[maxn][maxn],cnt[maxn],d[maxn][maxn];\nint link[maxn][maxn];\n\nnamespace IO\n{\n    static char buf[1<<17],*fs,*ft;\n    inline char gc()\n    {\n        if (fs==ft)\n        {\n            ft=(fs=buf)+fread(buf,1,1<<17,stdin);\n            if (fs==ft) return EOF;\n        }\n        return *fs++;\n    }\n    #define gc getchar\n    inline int read()\n    {\n        char ch;\n        while (!isdigit(ch=gc()));\n        int x=ch^48;\n        while (isdigit(ch=gc()))\n            x=x*10+ch-48;\n        return x;\n    }\n}-using IO::read;\n\ninline void bfs(int s)\n{\n    static bool vis[maxn];\n    memset(vis,0,sizeof(vis));\n    memset(d[s],0x3f,sizeof(int)*maxn);\n    vis[s]=true;d[s][s]=0;\n    queue<int> q;\n    q.push(s);\n    while (!q.empty())\n    {\n        register int u=q.front();q.pop();\n        for (register int *ptr=G[u],*ed=G[u]+cnt[u];ptr!=ed;++ptr)\n        {\n            register int v=*ptr;\n            if (!vis[v]) d[s][v]=d[s][u]+1,q.push(v),vis[v]=true;\n        }\n    }\n}\n\nint main()\n{\n    int n,m,q;\n    n=read();m=read();q=read();\n    for (register int i=1,u,v;i<=m;++i)\n    {\n        u=read();v=read();\n        if (link[u][v]) continue;\n        G[u][cnt[u]++]=v;\n        G[v][cnt[v]++]=u;\n        link[u][v]=link[v][u]=true;\n    }\n    for (register int i=1;i<=n;++i) bfs(i);\n    static bitset<maxn> f[maxn][maxn];\n    for (register int u=1;u<=n;++u)\n        for (register int v=1;v<=n;++v)\n            if (d[u][v]<=n) f[u][d[u][v]].set(v);\n    for (register int u=1;u<=n;++u)\n        for (register int i=1;i<=n;++i)\n            f[u][i]|=f[u][i-1];\n    bitset<maxn> ans;\n    for (register int i=1;i<=q;++i)\n    {\n        ans.reset();\n        register int a=read();\n        for (register int j=1;j<=a;++j)\n        {\n            register int x=read(),y=read();\n            ans|=f[x][y];\n        }\n        printf(\"%d\\n\",(int)ans.count());\n    }\n}\n```\n\n\n\n# [luogu P5072](https://www.luogu.org/problemnew/show/P5072)[YNOI2015]盼君勿忘\n\n## 题目描述\n\n珂朵莉给了你一个序列，每次查询一个区间[l,r]中所有子序列分别去重后的和mod p\n\n## 输入输出格式\n\n### 输入格式：\n\n* 第一行两个数$n,m$\n* 第二行$n$个数表示这个序列$A$\n* 之后$m$行，每行三个数$l,r,p$表示查询的区间与模数\n* 对于$100\\%$的数据，$n,m <= 10^5$,$A_i,p <= 1000000000$\n\n### 输出格式：\n\n* $m$行，每行输出一个数表示答案\n\n## 题解\n\nOrz lxl...由乃OI真的毒瘤。。。\n\n~~我从不抄题解，我只是题解的搬运工。~~真的不会做，瞎写一点儿吧。\n\n看到这题，没修改操作，数据范围1e5，珂以想到这是个莫队题。~~然后我就不会了~~。\n\n看到这样的题，我们暴力考虑每个区间显然是不现实的。我们转而考虑每个数对答案的贡献。对于一个数，它被计算到的次数珂以这么计算：\n\n对于一个区间$[l..r]$，它的非空子序列个数显然为$$2^{r-l+1}-1$$个。不包含x的子序列有$$2^{r-l+1-cnt[x]}-1$$个。所以，x一共被计算了$2^{r-l+1}-2^{r-l+1-cnt[x]}$次。\n\n~~所以，我们用$cnt[x]$维护x在当前区间的出现次数，莫队维护cnt，修改的同时暴力维护和。。。这就珂以做到$O(n\\sqrt n)$了~~\n\n上面的假做法只适合模数不变的情况。。。我们考虑模数会变化该怎么做。\n\n**手动划重点！以下内容的思想很重要！**\n\n考虑以$\\sqrt n$为界限**分类讨论**。对于出现次数小于$\\sqrt n$的数，他们的出现次数只有$\\sqrt n$种。对于出现次数大于等于$\\sqrt n$的数，这样的数最多只有$\\sqrt n$种。所以我们对于每个小于等于$\\sqrt n$ 的出现次数x，维护出现次数=x的数之和，对于出现次数$\\geq \\sqrt n$的数，用一种数据结构维护它们组成的集合。$\\texttt{STL unordeded_set}$是个好东西啊。~~虽然考试不让用~~这样就珂以做到$O(n\\sqrt n)$求解问题啦。\n\n最后还有一个小问题——如何快速求2的幂？模数动态改变，每次必须重新计算。有一种$O(\\sqrt n)$预处理，$O(1)$查询的处理方法，正好适合本题。\n\n设$T=\\lfloor\\sqrt n\\rfloor$,则$C^{x}=C^{\\lfloor x/T \\rfloor} * C^{x\\mod T}$ 。这样，只需要预处理$C^1, C^2, C^3....C^T$和$C^T, C^{2T}....C^{T*T}$ 即可。\n\n### 我的代码：\n\n(卡常的血泪史。。。)另外，好像对于值域比较大的情况，它会输出负数，现在暂时没找到原因。还有，膜运算真的太慢啦！去掉四个膜运算，运行时间几乎-1s。。\n\n```cpp\n#pragma GCC optimize(\"-O3\")\n#pragma GCC optimize(\"-Ofast\")\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <unordered_map>\n#include <unordered_set>\n#include <ctime>\n// #define int long long\n\ntypedef unsigned long long ll;\n\nusing std::sort;\nusing std::unique;\nusing std::lower_bound;\nusing std::unordered_map;\nusing std::unordered_set;\n\nconst int maxn=1e6+100;\n\nint blo[maxn],a[maxn],b[maxn],cnt[maxn],L=1,R;\nll _2_k[maxn],_2_sqrt[maxn];\nll sum[maxn],ans;\nunordered_map<int,int> rnk;\nunordered_set<int> mp;\n\nnamespace IO\n{\n    char buf[1<<24],*fs,*ft;\n    // inline char gc()\n    // {\n    //     if (fs==ft)\n    //     {\n    //         ft=(fs=buf)+fread(buf,1,1<<24,stdin);\n    //         if (fs==ft) return EOF;\n    //     }\n    //     return *fs++;\n    // }\n    #define gc() (*fs++)\n    // #define gc() getchar()\n    inline int read()\n    {\n        char ch;\n        while (!isdigit(ch=gc()));\n        int x=ch^48;\n        while (isdigit(ch=gc()))\n            x=x*10+ch-48;\n        return x;\n    }\n}using IO::read;\n\nstruct Q\n{\n    int l,r,p,id;\n    bool operator< (const Q& b) const \n\t{\n\t\t// return blo[l]^blo[b.l]?blo[l]<blo[b.l]:blo[l]&1?r<b.r:r>b.r;\n        return blo[l]==blo[b.l]?r<b.r:l<b.l;\n\t}\n}q[maxn];\n\ninline ll qpow(register ll a,register ll b,register ll p)\n{\n    ll ans=1%p;\n    for (;b;b>>=1)\n    {\n        if (b&1) ans=ans*a%p;\n        a=a*a%p;\n    }\n    return ans;\n    // fprintf(stderr,\"SYTAKIOI\\n\");\n}\n\ninline void ins(const int t,const int T)\n{\n    register int &x=cnt[t];\n    if (x<T)\n    {\n        if (x) sum[x]-=b[t];\n        if (++x<T) sum[x]+=b[t];\n        else mp.insert(b[t]);\n    }\n    else ++cnt[t];\n    // fprintf(stderr,\"SYTAKIOI\\n\");\n}\n\ninline void del(const int t,const int T)\n{\n    register int &x=cnt[t];\n    register int y=b[t];\n    if (x<T)\n    {\n        sum[x]-=y;\n        if (--x) sum[x]+=y;\n    }\n    else if (--x<T) mp.erase(y),sum[T-1]+=y;\n            // fprintf(stderr,\"SYTAKIOI\\n\");\n}\n\ninline void prework(const ll p,const int T)\n{\n    _2_k[0]=1%p,_2_k[1]=2%p,_2_sqrt[0]=1%p,_2_sqrt[1]=qpow(2,T,p);\n    for (int i=2;i<=T;++i)\n    {\n        _2_k[i]=_2_k[i-1]*2%p;\n        _2_sqrt[i]=_2_sqrt[i-1]*_2_sqrt[1]%p;\n    }\n    // fprintf(stderr,\"SYTAKIOI\\n\");\n}\n\ninline ll getpow(const int x,const int T,const ll p)\n{\n    // fprintf(stderr,\"SYTAKIOI\\n\");\n    return _2_k[x%T]*_2_sqrt[x/T]%p;\n}\n\nsigned main()\n{\n    freopen(\"in.txt\",\"r\",stdin);\n    freopen(\"my.out\",\"w\",stdout);\n    fread(IO::fs=IO::buf,1,1<<24,stdin);\n    register int n,m;\n    n=read();m=read();\n    const int T=sqrt(n);\n    for (register int i=1;i<=n;++i)\n        blo[i]=(i-1)/T+1;\n    for (register int *ptrb=b+1,*ptra=a+1,*ed=a+n+1;ptra!=ed;++ptrb,++ptra)\n        *ptrb=*ptra=read();\n    sort(b+1,b+n+1);\n    int tot=unique(b+1,b+n+1)-b-1;\n    for (register int i=1;i<=n;++i)\n        a[i]=lower_bound(b+1,b+tot+1,a[i])-b;\n    // for (int i=1;i<=n;++i)\n    //     printf(\"x=%d rnk[x]=%d\\n\",a[i],rnk[a[i]]);\n    for (register Q* ptr=q+1,*ed=q+m+1;ptr!=ed;++ptr)\n        ptr->l=read(),ptr->r=read(),ptr->p=read(),ptr->id=ptr-q;\n    sort(q+1,q+m+1);\n    static ll ans[maxn];\n    for (register Q* ptr=q+1,*ed=q+m+1;ptr!=ed;++ptr)\n    {\n        // if (q[i].p==15) q[i].p=1e9+7;\n        const int l=ptr->l,r=ptr->r,p=ptr->p;\n        prework(p,T);\n        while (R<r) ins(a[++R],T);\n        while (L>l) ins(a[--L],T);\n        while (R>r) del(a[R--],T);\n        while (L<l) del(a[L++],T);\n        ll& tot=ans[ptr->id];\n        ll tmp=getpow(r-l+1,T,p);\n        for (register int i=1;i<T;++i)\n            (tot+=((tmp-getpow(r-l+1-i,T,p)%p)+p)*sum[i])%=p;\n        for (const auto x:mp)\n            (tot+=((tmp-getpow(r-l+1-(cnt[x]),T,p)%p)+p)*b[x])%=p;\n        // printf(\"L=%d R=%d,sum[1]=%d\\n\",L,R,sum[1]);\n    }\n    for (register ll *i=ans+1,*ed=ans+m+1;i!=ed;++i)\n        printf(\"%llu\\n\",*i);\n    // fprintf(stderr,\"%d\",clock());\n    // return clock();\n}\n```\n\n\n\n# [luogu P3674](https://www.luogu.org/problemnew/show/P3674)小清新人渣的本愿\n\n## 题目描述\n\n给你一个序列a，长度为n，有m次操作，每次询问一个区间是否珂以选出两个数它们的差为x，或者询问一个区间是否珂以选出两个数它们的和为x，或者询问一个区间是否珂以选出两个数它们的乘积为x ，这三个操作分别为操作1,2,3\n\n选出的这两个数珂以是同一个位置的数\n\n## 输入输出格式\n\n### 输入格式：\n\n* 第一行两个数$n,m$\n* 后面一行$n$个数表示$a_i$\n* 后面$m$行每行四个数$opt\\ l\\ r\\ x$\n* $opt$表示这个是第几种操作，$l,r$表示操作的区间，$x$表示这次操作的$x$\n\n### 输出格式：\n\n* 对于每个询问，如果珂以，输出$\\texttt{hana}$，否则输出$\\texttt{bi}$\n\n## 题解\n\n这题还是挺良心的~~比上一题良心多了~~  ~~瞎说毒瘤lxl怎么会出良心题~~\n\n没修改+1e5+lxl=膜队。\n\n所以我们考虑怎么膜队维护。\n\n我们首先肯定要维护所有数的出现次数。然后怎么做？\n\n考虑暴力：对于每个可能成为答案的数，查询对应的另一个数是否存在。这个大概没法用什么数据结构优化了，所以考虑神奇的$\\texttt{bitset}$。用$\\texttt{bitset}$维护每个数是否出现，我们发现：\n\n* 对于询问1，若存在k和k+x，则对应着$\\texttt{S&(S<<x).any()==true}$ 。\n* 对于询问2，若存在$a+b=x$,即$a-(-b)=x$。对于负数，我们不好维护，所以用处理负下标的一般方法，转化成$a-(-b+N)=x-N$。（此处N是一个较大的整数）这样，用另外一个$\\texttt{bitset}$，对于每个出现的$k$，令对应的$(-k+n)$下标处的值为1就珂以了。另外，$\\texttt{bitset}$的移位运算会将$\\texttt{int}$强转成$\\texttt{size_t}$，当移位数为负数的时候会出锅。所以要手动把上面的左移改成右移，移位数取反。\n* 对于询问3，我们发现我们用$\\texttt{bitset}$没法很好的维护了。所以暴力枚举因子，判断是否存在,珂以发现这并不是复杂度的瓶颈。这样做是正确的......\n\n### 我的代码：\n\n~~您看我如果不卡常的话码风还是挺正常的嘛~~\n\n```cpp\n#include <cmath>\n#include <bitset>\n#include <cstdio>\n#include <algorithm>\n\nusing std::bitset;\nusing std::sort;\n\nconst int maxn=1e5+1000;\n\nint blo[maxn],a[maxn],col[maxn];\nbitset<maxn> ex,rev;\nint d[maxn];\n\nstruct Q\n{\n    int type,l,r,x,id;\n    bool operator< (const Q& q) const\n    {\n        return blo[l]==blo[q.l]?r<q.r:l<q.l;\n    }\n}q[maxn];\n\ninline bool QuerySub(int x)\n{\n    return (ex&(ex<<x)).any();\n}\n\ninline bool QueryAdd(int x)\n{\n    return (ex&(rev>>(maxn-x))).any();\n}\n\ninline bool QueryMul(int x)\n{\n    for (int i=1;i*i<=x;++i)\n    {\n        if (x%i==0)\n            if (ex[i] && ex[x/i]) return true;\n    }\n    return false;\n}\n\ninline void add(int x)\n{\n    if (++col[x]==1) \n        ex[x]=1,rev[maxn-x]=1;\n}\n\ninline void del(int x)\n{\n    if (--col[x]==0)\n        ex[x]=0,rev[maxn-x]=0;\n}\n\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    int T=sqrt(n);\n    for (int i=1;i<=n;++i)\n        scanf(\"%d\",a+i),blo[i]=(i-1)/T+1;\n    for (int i=1;i<=m;++i)\n    {\n        scanf(\"%d%d%d%d\",&q[i].type,&q[i].l,&q[i].r,&q[i].x);\n        q[i].id=i;\n    }\n    sort(q+1,q+m+1);\n    static int ans[maxn];\n    for (int i=1,L=1,R=0;i<=m;++i)\n    {\n        const int l=q[i].l,r=q[i].r,x=q[i].x;\n        while (R<r) add(a[++R]);\n        while (L>l) add(a[--L]);\n        while (L<l) del(a[L++]);\n        while (R>r) del(a[R--]);\n        switch (q[i].type)\n        {\n            case 1:\n                ans[q[i].id]=QuerySub(x);\n                break;\n            case 2:\n                ans[q[i].id]=QueryAdd(x);\n                break;\n            case 3:\n                ans[q[i].id]=QueryMul(x);\n                break;\n        }\n    }\n    for (int i=1;i<=m;++i) puts(ans[i]?\"hana\":\"bi\");\n}\n```\n\n\n\n# [luogu P4688](https://www.luogu.org/problemnew/show/P4688)[YNOI2016]掉进兔子洞\n\n## 题目描述\n\n给定一个长度为n的数列，有m次询问。每次询问给出三个区间，询问若从这三个区间一起删数，一直删到三个区间没有共同的数为止，最后这三个区间一共剩下的数的数量。（询问之间互相独立）\n\n## 题解\n\n这道题的话，首先，还是经验公式：\n\n没修改+1e5+lxl=膜队。\n\n所以考虑怎么膜队。\n\n首先通过补集转化，问题转化为三个区间共同出现的数的数量。既然是膜队，就要对每个区间分别处理。现在我们需要维护的信息就十分明确了：维护资瓷快速求交集的区间出现元素。这用数据结构并不好维护，所以考虑万能的$\\texttt{bitset}$。现在问题来了：$\\texttt{bitset}$只能对于每个元素，维护是否出现过，并不能维护出现多少次。~~此时情况开始变得辣手起来。。。~~\n\n能不能通过某种手段，使得$\\texttt{bitset}$中留够足够的空间使得每个相同的数能够连续存储在一段空间中？珂以！我们只需要在离散化时不去重就珂以了！在存储时，令$x+cnt[x]-1$这一位为1，就珂以了。（我在代码中是采用$\\texttt{shadowice1984}$大佬的方法，令离散化之后的值为数列中小于等于该数的数的个数，就令$x-cnt[x]+1$这一位为1。显然这两种方法是基本相同的。那么，我们就做完啦！\n\n~~才不是呢！lxl的题怎么能这么轻易做完？~~\n\n我们发现我们的最终结果是保存在$1e5个​$$\\texttt{bitset}​$里面的。算一波空间，会发现我们开不下。。。所以，我们的算法错了么？考虑充足的时限，我们把询问分成三次处理。这里还有一个避免分类讨论的trick，就是首先把询问储存下来，每次查询时将莫队的询问数组清零，并将当前处理的区间复制到莫队的数组里。这样能使代码简洁许多，并提高珂复用性。\n\n### 我的代码：\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <bitset>\n#include <map>\n#include <algorithm>\n\nusing std::sort;\nusing std::lower_bound;\nusing std::bitset;\nusing std::map;\nusing std::min;\n\nconst int maxn=1e5+100;\n\nint a[maxn],blo[maxn],col[maxn],len[maxn];\nbitset<maxn> ans[40000],tmp;\nint l1[maxn],l2[maxn],l3[maxn],r1[maxn],r2[maxn],r3[maxn];\n\nstruct Q\n{\n    int l,r,id;\n    bool operator< (const Q& q) const\n    {\n        return blo[l]==blo[q.l]?r<q.r:l<q.l;\n    }\n}qry[maxn*3];\n\ninline void upd(int p,int x)\n{\n    if (x==1)\n        tmp[a[p]-(col[a[p]])]=1,++col[a[p]];\n    else\n        tmp[a[p]-col[a[p]]+1]=0,--col[a[p]];\n}\n\ninline void init(int l,int r,int &tmp)\n{\n    tmp=0;\n    for (int i=l;i<=r;++i)\n    {\n        ++tmp;\n        qry[tmp].l=l1[i];qry[tmp].r=r1[i];qry[tmp].id=i-l+1;\n        ++tmp;\n        qry[tmp].l=l2[i];qry[tmp].r=r2[i];qry[tmp].id=i-l+1;\n        ++tmp;\n        qry[tmp].l=l3[i];qry[tmp].r=r3[i];qry[tmp].id=i-l+1;\n        len[i-l+1]=r1[i]-l1[i]+1+r2[i]-l2[i]+1+r3[i]-l3[i]+1;\n    }\n}\n\nvoid solve(const int l,const int r)\n{\n    int tmp=0;\n    int L=1,R=0;\n    // int leftid=(left-1)*3+1,rightid=min(tmp,(right-1)*3+1);\n    // sort(qry+left,qry+right+1);\n    init(l,r,tmp);\n    sort(qry+1,qry+tmp+1);\n    memset(col,0,sizeof(col));\n    for (int i=1;i<=r-l+1;++i) ans[i].set();\n    ::tmp.reset();\n    for (int i=1;i<=tmp;++i)\n    {\n        const int l=qry[i].l,r=qry[i].r;\n        while (R<r) upd(++R,1);\n        while (L>l) upd(--L,1);\n        while (R>r) upd(R--,-1);\n        while (L<l) upd(L++,-1);\n        // if (cnt==1) ans[qry[i].id]&=tmp;\n        // else if (cnt==2) ans[qry[i].id-33333]&=tmp;\n        // else ans[qry[i].id-(33333+33336-1)]&=tmp;\n        ans[qry[i].id]&=::tmp;\n    }\n    // for (int i=1;i<=tmp;++i)\n    //     len[qry[i].id]+=qry[i].r-qry[i].l+1;\n    for (int i=1;i<=r-l+1;++i)\n        printf(\"%d\\n\",len[i]-(int)ans[i].count()*3);\n}\n\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    map<int,int> mp;\n    int T=sqrt(n);\n    for (int i=1;i<=n;++i)\n        blo[i]=(i-1)/T+1;\n    for (int i=1;i<=n;++i)\n        scanf(\"%d\",a+i),++mp[a[i]];\n    for (map<int,int>::iterator it=mp.begin(),lst=it++;it!=mp.end();lst=it++)\n        it->second+=lst->second;\n    for (int i=1;i<=n;++i) a[i]=mp[a[i]];\n    for (int i=1;i<=m;++i)\n        scanf(\"%d%d%d%d%d%d\",l1+i,r1+i,l2+i,r2+i,l3+i,r3+i);\n    for (int i=1;i<=m;i+=36000) solve(i,min(i+36000-1,m));\n}\n```\n\n","slug":"YNOI做题记录","published":1,"updated":"2019-03-06T14:53:11.565Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm5z003mv4tyv5gui1b1","content":"<blockquote>\n<p>万古神犇LXL，数据结构碾众生！</p>\n</blockquote>\n<p><del>即使是蒟蒻也想变强啊..</del></p>\n<h1 id=\"luogu-P3987-我永远喜欢珂朵莉\"><a href=\"#luogu-P3987-我永远喜欢珂朵莉\" class=\"headerlink\" title=\"luogu P3987 我永远喜欢珂朵莉~\"></a><a href=\"https://www.luogu.org/problemnew/show/P3987\" target=\"_blank\" rel=\"noopener\">luogu P3987</a> 我永远喜欢珂朵莉~</h1><h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>有一个长为n的非负数序列A，支持以下两个操作：</p>\n<ul>\n<li>1 l r x : 把区间[l,r]中所有x的倍数/x</li>\n<li>2 l r : 查询区间[l,r]的和</li>\n</ul>\n<h2 id=\"数据范围：\"><a href=\"#数据范围：\" class=\"headerlink\" title=\"数据范围：\"></a>数据范围：</h2><p>$1 \\le n , m \\le 100000$</p>\n<p>$0 \\le A_i \\le 500000$</p>\n<p>$1 \\le x \\le 500000$</p>\n<a id=\"more\"></a>\n<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><p>首先，这道题的突破口在这里：</p>\n<ul>\n<li><p>一个数的约数个数不会太多。虽说上界$O(\\sqrt n)$,但实际上远没有那么多。500000以内只有大概200个左右。当对值域进行限制的时候，很可能就与约数个数相关。尤其是，本题中还有很明显的x的倍数÷x的操作，珂以考虑对每个可能的约数进行维护。</p>\n<p>鉴于单点修改，区间求和是$O(\\log n)$ 的，而一个数最多被除$O(\\log n)$次，总复杂度$O(n\\log^2 n)$这并不是制约复杂度的关键。而且，如果对于整个数列或分块以后的整块（本质上是一个“整体”）维护整体的信息的话，这题根本不可做了。必须找出需要被除的数，才能维护整个数列。现在问题是，如何快速找到需要被除的数。即，如何快速找到序列中x的倍数。珂以考虑对所有$x\\in (2,500000)$进行维护。对于每个约数，维护一棵平衡树，存储数列中它的倍数的下标。当进行区间除的时候，在对应的平衡树中找到下标在$[l, r]$之间的子树，进行dfs，并删掉所有操作进行后不再是x倍数的数的下标。这个过程中珂以顺便维护数列值的变化。当然，并不需要建出所有的平衡树，只对查询的x建树就行了。</p>\n<p>说来惭愧，我这道题在看了lxl的题解后还改了好几天。我从这道题吸取的经验有以下几点：</p>\n<ul>\n<li>当你的板子检查了很多很多遍都没发现问题时，很可能是main函数写错了（捂脸</li>\n<li>各种最大值一定要弄清楚，例如我写题的时候就把值域最大值当成了n。</li>\n<li>板子是珂以根据自己的需要而改动的。如本题中平衡树并不需要维护size。</li>\n</ul>\n</li>\n</ul>\n<p>当然YNOI的毒瘤题需要一点卡常的小trick，相信大家都会，不再赘述。</p>\n<h3 id=\"我的代码：\"><a href=\"#我的代码：\" class=\"headerlink\" title=\"我的代码：\"></a>我的代码：</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ls(o) (t[o].ch[0])</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rs(o) (t[o].ch[1])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">500000</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn/<span class=\"number\">5</span>],cnt,n,root[maxn],cntdel,del[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v[maxn];</span><br><span class=\"line\">ll c[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">25</span>],*fs,*ft;</span><br><span class=\"line\">    <span class=\"comment\">// inline char gc()</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     if (fs==ft)</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         ft=(fs=buf)+fread(buf,1,1&lt;&lt;25,stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">//         if (fs==ft) return EOF;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125; </span></span><br><span class=\"line\">    <span class=\"comment\">//     return *fs++;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// #define gc() getchar()</span></span><br><span class=\"line\">    <span class=\"comment\">// #define gc (*fs++)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">register</span> <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch=(*fs++)));</span><br><span class=\"line\">        <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> x=ch<span class=\"number\">-48</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch=(*fs++)))</span><br><span class=\"line\">            x=x*<span class=\"number\">10</span>+ch<span class=\"number\">-48</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">using</span> IO::read;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ff,ch[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos;</span><br><span class=\"line\">&#125;t[maxn*<span class=\"number\">70</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt; <span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">max</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?b:a;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt; <span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">min</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?a:b;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> p,<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=p;i&lt;=n;i+=i&amp;-i) c[i]+=x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=p;i;i-=i&amp;-i) ans+=c[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">decompose</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=<span class=\"built_in\">sqrt</span>(x)+<span class=\"number\">0.1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x%i==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            v[i].push_back(p);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i*i!=x) v[x/i].push_back(p);</span><br><span class=\"line\">            <span class=\"comment\">// printf(\"%d %d\",i,x/i);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y=t[x].ff,z=t[y].ff;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k=t[y].ch[<span class=\"number\">1</span>]==x;</span><br><span class=\"line\">    t[z].ch[t[z].ch[<span class=\"number\">1</span>]==y]=x;</span><br><span class=\"line\">    t[x].ff=z;</span><br><span class=\"line\">    t[y].ch[k]=t[x].ch[k^<span class=\"number\">1</span>];</span><br><span class=\"line\">    t[t[x].ch[k^<span class=\"number\">1</span>]].ff=y;</span><br><span class=\"line\">    t[x].ch[k^<span class=\"number\">1</span>]=y;</span><br><span class=\"line\">    t[y].ff=x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; v,<span class=\"keyword\">int</span> fa)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l&gt;r) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u=++cnt;</span><br><span class=\"line\">    t[u].ch[<span class=\"number\">0</span>]=build(l,mid<span class=\"number\">-1</span>,v,u);</span><br><span class=\"line\">    t[u].ch[<span class=\"number\">1</span>]=build(mid+<span class=\"number\">1</span>,r,v,u);</span><br><span class=\"line\">    t[u].ff=fa;</span><br><span class=\"line\">    t[u].pos=v[mid];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> _pre,_suc,ppre,psuc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> _prec(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> o)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t[o].pos&lt;x &amp;&amp; _pre&lt;t[o].pos)</span><br><span class=\"line\">        _pre=t[o].pos,ppre=o;</span><br><span class=\"line\">    _prec(x,t[o].ch[t[o].pos&lt;x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">prec</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    _pre=INT_MIN;ppre=<span class=\"number\">0</span>;</span><br><span class=\"line\">    _prec(x,o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ppre;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> _succ(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> o)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t[o].pos&gt;x &amp;&amp; _suc&gt;t[o].pos)</span><br><span class=\"line\">        _suc=t[o].pos,psuc=o;</span><br><span class=\"line\">    _succ(x,t[o].ch[t[o].pos&lt;=x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">succ</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    _suc=INT_MAX;psuc=<span class=\"number\">0</span>;</span><br><span class=\"line\">    _succ(x,o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> psuc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> goal,<span class=\"keyword\">int</span> idx)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t[x].ff!=goal)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y=t[x].ff,z=t[y].ff;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (z!=goal) rotate((t[z].ch[<span class=\"number\">1</span>]==y)^(t[y].ch[<span class=\"number\">1</span>]==x)?x:y);</span><br><span class=\"line\">        rotate(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!goal) root[idx]=x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> idx)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// assert(t[x].pos&gt;-INF &amp;&amp; t[x].pos&lt;INF);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> L=prec(t[x].pos,u),R=succ(t[x].pos,u);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L!=R)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        splay(L,<span class=\"number\">0</span>,idx);</span><br><span class=\"line\">        splay(R,root[idx],idx);</span><br><span class=\"line\">        <span class=\"comment\">// assert(t[t[t[root[idx]].ch[1]].ch[0]].pos==t[x].pos &amp;&amp; !t[x].ch[0] &amp;&amp; !t[x].ch[1]);</span></span><br><span class=\"line\">        t[t[t[root[idx]].ch[<span class=\"number\">1</span>]].ch[<span class=\"number\">0</span>]].ff=<span class=\"number\">0</span>;</span><br><span class=\"line\">        t[t[root[idx]].ch[<span class=\"number\">1</span>]].ch[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> idx)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!u) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ls(u)) dfs(ls(u),x,idx);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rs(u)) dfs(rs(u),x,idx);</span><br><span class=\"line\">    <span class=\"comment\">// assert(a[t[u].pos]%x==0);</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a[t[u].pos]%x!=<span class=\"number\">0</span>) del[++cntdel]=u;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        update(t[u].pos,-a[t[u].pos]);</span><br><span class=\"line\">        a[t[u].pos]/=x;</span><br><span class=\"line\">        update(t[u].pos,a[t[u].pos]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[t[u].pos]%x!=<span class=\"number\">0</span>) del[++cntdel]=u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Divide</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> L=prec(l,root[x]),R=succ(r,root[x]);</span><br><span class=\"line\">    assert(R &amp;&amp; L);</span><br><span class=\"line\">    <span class=\"comment\">// assert(root[x]);</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L!=R)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        splay(L,<span class=\"number\">0</span>,x);</span><br><span class=\"line\">        splay(R,root[x],x);</span><br><span class=\"line\">        cntdel=<span class=\"number\">0</span>;</span><br><span class=\"line\">        dfs(t[t[root[x]].ch[<span class=\"number\">1</span>]].ch[<span class=\"number\">0</span>],x,x);</span><br><span class=\"line\">        <span class=\"comment\">// for (int i=1;i&lt;=cntdel;++i)</span></span><br><span class=\"line\">        <span class=\"comment\">//     assert(t[del[i]].pos&gt;=l &amp;&amp; t[del[i]].pos&lt;=r);</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=cntdel;++i) remove(del[i],root[x],x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printtree</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ls(u)) printtree(ls(u));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,t[u].pos);</span><br><span class=\"line\">    <span class=\"comment\">// if (t[u].pos&gt;-INF &amp;&amp; t[u].pos&lt;INF) assert(a[t[u].pos]%x==0);</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rs(u)) printtree(rs(u));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// freopen(\"input.in\",\"r\",stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">// freopen(\"my.out\",\"w\",stdout);</span></span><br><span class=\"line\">    fread(IO::fs=IO::buf,<span class=\"number\">1</span>,<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">25</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    n=read();m=read();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=<span class=\"number\">500000</span>;++i) v[i].push_back(-INF);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        a[i]=read(),decompose(a[i],i),update(i,a[i]);</span><br><span class=\"line\">    <span class=\"comment\">// for (register int i=2;i&lt;=500000;++i)</span></span><br><span class=\"line\">    <span class=\"comment\">//     if (v[i].size()&gt;1) v[i].push_back(+INF),root[i]=build(0,v[i].size()-1,v[i],0);</span></span><br><span class=\"line\">    <span class=\"comment\">// for (int i=2;i&lt;=n;++i)</span></span><br><span class=\"line\">    <span class=\"comment\">//     if (v[i].size()&gt;2)printtree(root[i],i);</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> used[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,opt,l,r,x;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        opt=read();l=read();r=read();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (opt==<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x=read();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!used[x] &amp;&amp; v[x].size()&gt;<span class=\"number\">1</span> &amp;&amp; x&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                v[x].push_back(+INF);</span><br><span class=\"line\">                root[x]=build(<span class=\"number\">0</span>,v[x].size()<span class=\"number\">-1</span>,v[x],<span class=\"number\">0</span>);</span><br><span class=\"line\">                used[x]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l&gt;r) l^=r^=l^=r;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l&lt;<span class=\"number\">0</span> || r&gt;n) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x&gt;<span class=\"number\">1</span> &amp;&amp; v[x].size()&gt;<span class=\"number\">2</span>) Divide(l,r,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,query(r)-query(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// freopen(\"tm.out\",\"w\",stdout);</span></span><br><span class=\"line\">    <span class=\"comment\">// printf(\"%d\",clock());</span></span><br><span class=\"line\">    <span class=\"comment\">// for(;;);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"luogu-P5068-Ynoi2015-我回来了\"><a href=\"#luogu-P5068-Ynoi2015-我回来了\" class=\"headerlink\" title=\"luogu P5068[Ynoi2015]我回来了\"></a><a href=\"https://www.luogu.org/problemnew/show/P5068\" target=\"_blank\" rel=\"noopener\">luogu P5068</a>[Ynoi2015]我回来了</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>珂朵莉给你一个无向图，每次查询的时候给一堆二元组$(x_i,y_i)$<br>求图中有多少个点u与至少一个这次询问给出的二元组$(x_i,y_i)$满足 $dist(u,x_i)\\le y_i$，dist表示这两个点在图中的距离<br>如果不连通$dist = \\inf$</p>\n<h2 id=\"输入输出格式\"><a href=\"#输入输出格式\" class=\"headerlink\" title=\"输入输出格式\"></a>输入输出格式</h2><h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><ul>\n<li>第一行三个数表示n，m，q</li>\n<li>n表示顶点个数，m表示边数</li>\n<li>之后m行每行两个数x，y表示这两个点之间连有一条边~，边权都为1</li>\n<li>之后q次询问，每个询问先给你一个数a</li>\n<li>之后a行每行两个数，x，y，表示一个二元组</li>\n<li>n &lt;= 1000 , m &lt;= 100000 , q &lt;= 100000</li>\n<li>a的和 &lt;= 2100000</li>\n</ul>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><ul>\n<li>q行，每行一个数表示这次询问的答案</li>\n</ul>\n<h2 id=\"题解：-1\"><a href=\"#题解：-1\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><p>这道题大概是YNOI中最良心的一道题？(雾  <del>然而我也没做出来</del></p>\n<p>首先，我们珂以想到，这题大概要预处理，然后用接近$O(1)$的时间回答每个二元组询问。考虑题目中，每一个点即使满足所有要求也只被计算一次贡献，而每个二元组之间又是相互独立的，所以我们需要一个资瓷快速集合取并，快速求集合元素数目的数据结构——这不就是$\\texttt{bitset}$嘛。所以，我们尝试，令$f(u,i)$为$dist(u,v)\\le i$的v的集合，则对于每次询问，将所对应的$f$集合取一个并就好了。现在，问题转化为如何求f集合。本题的时空限制十分诡异，会让人误以为标算的复杂度是错的<del>（然鹅实际跑得飞快）</del>其实暴力计算f就珂以了~~</p>\n<ul>\n<li>首先，跑n次bfs，计算出所有顶点对之间最短路。时间$O(n(n+m))$</li>\n<li>然后，用已知的信息暴力更新f。设w为bitset的位宽，时间$O(n^3/w)$</li>\n<li>（逃</li>\n</ul>\n<p>最后，毒瘤lxl卡了链式前向星，只能用vector存图（因为空间够用，所以我直接开了数组）</p>\n<p>注意，输入存在重边。</p>\n<p>所以，这道题我们就做完啦（撒花！</p>\n<h3 id=\"我的代码\"><a href=\"#我的代码\" class=\"headerlink\" title=\"我的代码\"></a>我的代码</h3><p><del>（我以为这题一定很卡常，所以代码稍微毒瘤了一点）</del>：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">queue</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">bitset</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> G[maxn][maxn],cnt[maxn],d[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> link[maxn][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">17</span>],*fs,*ft;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">char</span> <span class=\"title\">gc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fs==ft)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ft=(fs=buf)+fread(buf,<span class=\"number\">1</span>,<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">17</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fs==ft) <span class=\"keyword\">return</span> EOF;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *fs++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch=gc()));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=ch^<span class=\"number\">48</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch=gc()))</span><br><span class=\"line\">            x=x*<span class=\"number\">10</span>+ch<span class=\"number\">-48</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;-<span class=\"keyword\">using</span> IO::read;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(d[s],<span class=\"number\">0x3f</span>,<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*maxn);</span><br><span class=\"line\">    vis[s]=<span class=\"literal\">true</span>;d[s][s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> u=q.front();q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> *ptr=G[u],*ed=G[u]+cnt[u];ptr!=ed;++ptr)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> v=*ptr;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!vis[v]) d[s][v]=d[s][u]+<span class=\"number\">1</span>,q.push(v),vis[v]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m,q;</span><br><span class=\"line\">    n=read();m=read();q=read();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,u,v;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        u=read();v=read();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (link[u][v]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        G[u][cnt[u]++]=v;</span><br><span class=\"line\">        G[v][cnt[v]++]=u;</span><br><span class=\"line\">        link[u][v]=link[v][u]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) bfs(i);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">bitset</span>&lt;maxn&gt; f[maxn][maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> u=<span class=\"number\">1</span>;u&lt;=n;++u)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> v=<span class=\"number\">1</span>;v&lt;=n;++v)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d[u][v]&lt;=n) f[u][d[u][v]].<span class=\"built_in\">set</span>(v);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> u=<span class=\"number\">1</span>;u&lt;=n;++u)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">            f[u][i]|=f[u][i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">bitset</span>&lt;maxn&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans.reset();</span><br><span class=\"line\">        <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> a=read();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=a;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> x=read(),y=read();</span><br><span class=\"line\">            ans|=f[x][y];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,(<span class=\"keyword\">int</span>)ans.count());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"luogu-P5072-YNOI2015-盼君勿忘\"><a href=\"#luogu-P5072-YNOI2015-盼君勿忘\" class=\"headerlink\" title=\"luogu P5072[YNOI2015]盼君勿忘\"></a><a href=\"https://www.luogu.org/problemnew/show/P5072\" target=\"_blank\" rel=\"noopener\">luogu P5072</a>[YNOI2015]盼君勿忘</h1><h2 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>珂朵莉给了你一个序列，每次查询一个区间[l,r]中所有子序列分别去重后的和mod p</p>\n<h2 id=\"输入输出格式-1\"><a href=\"#输入输出格式-1\" class=\"headerlink\" title=\"输入输出格式\"></a>输入输出格式</h2><h3 id=\"输入格式：-1\"><a href=\"#输入格式：-1\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><ul>\n<li>第一行两个数$n,m$</li>\n<li>第二行$n$个数表示这个序列$A$</li>\n<li>之后$m$行，每行三个数$l,r,p$表示查询的区间与模数</li>\n<li>对于$100\\%$的数据，$n,m &lt;= 10^5$,$A_i,p &lt;= 1000000000$</li>\n</ul>\n<h3 id=\"输出格式：-1\"><a href=\"#输出格式：-1\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><ul>\n<li>$m$行，每行输出一个数表示答案</li>\n</ul>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>Orz lxl…由乃OI真的毒瘤。。。</p>\n<p><del>我从不抄题解，我只是题解的搬运工。</del>真的不会做，瞎写一点儿吧。</p>\n<p>看到这题，没修改操作，数据范围1e5，珂以想到这是个莫队题。<del>然后我就不会了</del>。</p>\n<p>看到这样的题，我们暴力考虑每个区间显然是不现实的。我们转而考虑每个数对答案的贡献。对于一个数，它被计算到的次数珂以这么计算：</p>\n<p>对于一个区间$[l..r]$，它的非空子序列个数显然为$$2^{r-l+1}-1$$个。不包含x的子序列有$$2^{r-l+1-cnt[x]}-1$$个。所以，x一共被计算了$2^{r-l+1}-2^{r-l+1-cnt[x]}$次。</p>\n<p><del>所以，我们用$cnt[x]$维护x在当前区间的出现次数，莫队维护cnt，修改的同时暴力维护和。。。这就珂以做到$O(n\\sqrt n)$了</del></p>\n<p>上面的假做法只适合模数不变的情况。。。我们考虑模数会变化该怎么做。</p>\n<p><strong>手动划重点！以下内容的思想很重要！</strong></p>\n<p>考虑以$\\sqrt n$为界限<strong>分类讨论</strong>。对于出现次数小于$\\sqrt n$的数，他们的出现次数只有$\\sqrt n$种。对于出现次数大于等于$\\sqrt n$的数，这样的数最多只有$\\sqrt n$种。所以我们对于每个小于等于$\\sqrt n$ 的出现次数x，维护出现次数=x的数之和，对于出现次数$\\geq \\sqrt n$的数，用一种数据结构维护它们组成的集合。$\\texttt{STL unordeded_set}$是个好东西啊。<del>虽然考试不让用</del>这样就珂以做到$O(n\\sqrt n)$求解问题啦。</p>\n<p>最后还有一个小问题——如何快速求2的幂？模数动态改变，每次必须重新计算。有一种$O(\\sqrt n)$预处理，$O(1)$查询的处理方法，正好适合本题。</p>\n<p>设$T=\\lfloor\\sqrt n\\rfloor$,则$C^{x}=C^{\\lfloor x/T \\rfloor} <em> C^{x\\mod T}$ 。这样，只需要预处理$C^1, C^2, C^3….C^T$和$C^T, C^{2T}….C^{T</em>T}$ 即可。</p>\n<h3 id=\"我的代码：-1\"><a href=\"#我的代码：-1\" class=\"headerlink\" title=\"我的代码：\"></a>我的代码：</h3><p>(卡常的血泪史。。。)另外，好像对于值域比较大的情况，它会输出负数，现在暂时没找到原因。还有，膜运算真的太慢啦！去掉四个膜运算，运行时间几乎-1s。。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(<span class=\"meta-string\">\"-O3\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(<span class=\"meta-string\">\"-Ofast\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unordered_set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// #define int long long</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::sort;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::unique;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::lower_bound;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">unordered_map</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">unordered_set</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e6</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> blo[maxn],a[maxn],b[maxn],cnt[maxn],L=<span class=\"number\">1</span>,R;</span><br><span class=\"line\">ll _2_k[maxn],_2_sqrt[maxn];</span><br><span class=\"line\">ll sum[maxn],ans;</span><br><span class=\"line\"><span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; rnk;</span><br><span class=\"line\"><span class=\"built_in\">unordered_set</span>&lt;<span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">24</span>],*fs,*ft;</span><br><span class=\"line\">    <span class=\"comment\">// inline char gc()</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     if (fs==ft)</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         ft=(fs=buf)+fread(buf,1,1&lt;&lt;24,stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">//         if (fs==ft) return EOF;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//     return *fs++;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc() (*fs++)</span></span><br><span class=\"line\">    <span class=\"comment\">// #define gc() getchar()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch=gc()));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=ch^<span class=\"number\">48</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch=gc()))</span><br><span class=\"line\">            x=x*<span class=\"number\">10</span>+ch<span class=\"number\">-48</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">using</span> IO::read;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Q</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l,r,p,id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"keyword\">const</span> Q&amp; b) <span class=\"keyword\">const</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// return blo[l]^blo[b.l]?blo[l]&lt;blo[b.l]:blo[l]&amp;1?r&lt;b.r:r&gt;b.r;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> blo[l]==blo[b.l]?r&lt;b.r:l&lt;b.l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;q[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(<span class=\"keyword\">register</span> ll a,<span class=\"keyword\">register</span> ll b,<span class=\"keyword\">register</span> ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">1</span>%p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=ans*a%p;</span><br><span class=\"line\">        a=a*a%p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    <span class=\"comment\">// fprintf(stderr,\"SYTAKIOI\\n\");</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> t,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> T)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> &amp;x=cnt[t];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;T)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x) sum[x]-=b[t];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++x&lt;T) sum[x]+=b[t];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> mp.insert(b[t]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> ++cnt[t];</span><br><span class=\"line\">    <span class=\"comment\">// fprintf(stderr,\"SYTAKIOI\\n\");</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> t,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> T)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> &amp;x=cnt[t];</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> y=b[t];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;T)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum[x]-=y;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (--x) sum[x]+=y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (--x&lt;T) mp.erase(y),sum[T<span class=\"number\">-1</span>]+=y;</span><br><span class=\"line\">            <span class=\"comment\">// fprintf(stderr,\"SYTAKIOI\\n\");</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">prework</span><span class=\"params\">(<span class=\"keyword\">const</span> ll p,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> T)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    _2_k[<span class=\"number\">0</span>]=<span class=\"number\">1</span>%p,_2_k[<span class=\"number\">1</span>]=<span class=\"number\">2</span>%p,_2_sqrt[<span class=\"number\">0</span>]=<span class=\"number\">1</span>%p,_2_sqrt[<span class=\"number\">1</span>]=qpow(<span class=\"number\">2</span>,T,p);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=T;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _2_k[i]=_2_k[i<span class=\"number\">-1</span>]*<span class=\"number\">2</span>%p;</span><br><span class=\"line\">        _2_sqrt[i]=_2_sqrt[i<span class=\"number\">-1</span>]*_2_sqrt[<span class=\"number\">1</span>]%p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// fprintf(stderr,\"SYTAKIOI\\n\");</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">getpow</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> x,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> T,<span class=\"keyword\">const</span> ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// fprintf(stderr,\"SYTAKIOI\\n\");</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _2_k[x%T]*_2_sqrt[x/T]%p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"in.txt\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">\"my.out\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    fread(IO::fs=IO::buf,<span class=\"number\">1</span>,<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">24</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    n=read();m=read();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> T=<span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        blo[i]=(i<span class=\"number\">-1</span>)/T+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> *ptrb=b+<span class=\"number\">1</span>,*ptra=a+<span class=\"number\">1</span>,*ed=a+n+<span class=\"number\">1</span>;ptra!=ed;++ptrb,++ptra)</span><br><span class=\"line\">        *ptrb=*ptra=read();</span><br><span class=\"line\">    sort(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot=unique(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>)-b<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        a[i]=lower_bound(b+<span class=\"number\">1</span>,b+tot+<span class=\"number\">1</span>,a[i])-b;</span><br><span class=\"line\">    <span class=\"comment\">// for (int i=1;i&lt;=n;++i)</span></span><br><span class=\"line\">    <span class=\"comment\">//     printf(\"x=%d rnk[x]=%d\\n\",a[i],rnk[a[i]]);</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> Q* ptr=q+<span class=\"number\">1</span>,*ed=q+m+<span class=\"number\">1</span>;ptr!=ed;++ptr)</span><br><span class=\"line\">        ptr-&gt;l=read(),ptr-&gt;r=read(),ptr-&gt;p=read(),ptr-&gt;id=ptr-q;</span><br><span class=\"line\">    sort(q+<span class=\"number\">1</span>,q+m+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> ll ans[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> Q* ptr=q+<span class=\"number\">1</span>,*ed=q+m+<span class=\"number\">1</span>;ptr!=ed;++ptr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// if (q[i].p==15) q[i].p=1e9+7;</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> l=ptr-&gt;l,r=ptr-&gt;r,p=ptr-&gt;p;</span><br><span class=\"line\">        prework(p,T);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (R&lt;r) ins(a[++R],T);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L&gt;l) ins(a[--L],T);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (R&gt;r) del(a[R--],T);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L&lt;l) del(a[L++],T);</span><br><span class=\"line\">        ll&amp; tot=ans[ptr-&gt;id];</span><br><span class=\"line\">        ll tmp=getpow(r-l+<span class=\"number\">1</span>,T,p);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;T;++i)</span><br><span class=\"line\">            (tot+=((tmp-getpow(r-l+<span class=\"number\">1</span>-i,T,p)%p)+p)*sum[i])%=p;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> x:mp)</span><br><span class=\"line\">            (tot+=((tmp-getpow(r-l+<span class=\"number\">1</span>-(cnt[x]),T,p)%p)+p)*b[x])%=p;</span><br><span class=\"line\">        <span class=\"comment\">// printf(\"L=%d R=%d,sum[1]=%d\\n\",L,R,sum[1]);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> ll *i=ans+<span class=\"number\">1</span>,*ed=ans+m+<span class=\"number\">1</span>;i!=ed;++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%llu\\n\"</span>,*i);</span><br><span class=\"line\">    <span class=\"comment\">// fprintf(stderr,\"%d\",clock());</span></span><br><span class=\"line\">    <span class=\"comment\">// return clock();</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"luogu-P3674小清新人渣的本愿\"><a href=\"#luogu-P3674小清新人渣的本愿\" class=\"headerlink\" title=\"luogu P3674小清新人渣的本愿\"></a><a href=\"https://www.luogu.org/problemnew/show/P3674\" target=\"_blank\" rel=\"noopener\">luogu P3674</a>小清新人渣的本愿</h1><h2 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给你一个序列a，长度为n，有m次操作，每次询问一个区间是否珂以选出两个数它们的差为x，或者询问一个区间是否珂以选出两个数它们的和为x，或者询问一个区间是否珂以选出两个数它们的乘积为x ，这三个操作分别为操作1,2,3</p>\n<p>选出的这两个数珂以是同一个位置的数</p>\n<h2 id=\"输入输出格式-2\"><a href=\"#输入输出格式-2\" class=\"headerlink\" title=\"输入输出格式\"></a>输入输出格式</h2><h3 id=\"输入格式：-2\"><a href=\"#输入格式：-2\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><ul>\n<li>第一行两个数$n,m$</li>\n<li>后面一行$n$个数表示$a_i$</li>\n<li>后面$m$行每行四个数$opt\\ l\\ r\\ x$</li>\n<li>$opt$表示这个是第几种操作，$l,r$表示操作的区间，$x$表示这次操作的$x$</li>\n</ul>\n<h3 id=\"输出格式：-2\"><a href=\"#输出格式：-2\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><ul>\n<li>对于每个询问，如果珂以，输出$\\texttt{hana}$，否则输出$\\texttt{bi}$</li>\n</ul>\n<h2 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>这题还是挺良心的<del>比上一题良心多了</del>  <del>瞎说毒瘤lxl怎么会出良心题</del></p>\n<p>没修改+1e5+lxl=膜队。</p>\n<p>所以我们考虑怎么膜队维护。</p>\n<p>我们首先肯定要维护所有数的出现次数。然后怎么做？</p>\n<p>考虑暴力：对于每个可能成为答案的数，查询对应的另一个数是否存在。这个大概没法用什么数据结构优化了，所以考虑神奇的$\\texttt{bitset}$。用$\\texttt{bitset}$维护每个数是否出现，我们发现：</p>\n<ul>\n<li>对于询问1，若存在k和k+x，则对应着$\\texttt{S&amp;(S&lt;&lt;x).any()==true}$ 。</li>\n<li>对于询问2，若存在$a+b=x$,即$a-(-b)=x$。对于负数，我们不好维护，所以用处理负下标的一般方法，转化成$a-(-b+N)=x-N$。（此处N是一个较大的整数）这样，用另外一个$\\texttt{bitset}$，对于每个出现的$k$，令对应的$(-k+n)$下标处的值为1就珂以了。另外，$\\texttt{bitset}$的移位运算会将$\\texttt{int}$强转成$\\texttt{size_t}$，当移位数为负数的时候会出锅。所以要手动把上面的左移改成右移，移位数取反。</li>\n<li>对于询问3，我们发现我们用$\\texttt{bitset}$没法很好的维护了。所以暴力枚举因子，判断是否存在,珂以发现这并不是复杂度的瓶颈。这样做是正确的……</li>\n</ul>\n<h3 id=\"我的代码：-2\"><a href=\"#我的代码：-2\" class=\"headerlink\" title=\"我的代码：\"></a>我的代码：</h3><p><del>您看我如果不卡常的话码风还是挺正常的嘛</del></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">bitset</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e5</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> blo[maxn],a[maxn],col[maxn];</span><br><span class=\"line\"><span class=\"built_in\">bitset</span>&lt;maxn&gt; ex,rev;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Q</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> type,l,r,x,id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"keyword\">const</span> Q&amp; q) <span class=\"keyword\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> blo[l]==blo[q.l]?r&lt;q.r:l&lt;q.l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;q[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">QuerySub</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (ex&amp;(ex&lt;&lt;x)).any();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">QueryAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (ex&amp;(rev&gt;&gt;(maxn-x))).any();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">QueryMul</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i*i&lt;=x;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x%i==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ex[i] &amp;&amp; ex[x/i]) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++col[x]==<span class=\"number\">1</span>) </span><br><span class=\"line\">        ex[x]=<span class=\"number\">1</span>,rev[maxn-x]=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (--col[x]==<span class=\"number\">0</span>)</span><br><span class=\"line\">        ex[x]=<span class=\"number\">0</span>,rev[maxn-x]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T=<span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,a+i),blo[i]=(i<span class=\"number\">-1</span>)/T+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>,&amp;q[i].type,&amp;q[i].l,&amp;q[i].r,&amp;q[i].x);</span><br><span class=\"line\">        q[i].id=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(q+<span class=\"number\">1</span>,q+m+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ans[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,L=<span class=\"number\">1</span>,R=<span class=\"number\">0</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> l=q[i].l,r=q[i].r,x=q[i].x;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (R&lt;r) add(a[++R]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L&gt;l) add(a[--L]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L&lt;l) del(a[L++]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (R&gt;r) del(a[R--]);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (q[i].type)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                ans[q[i].id]=QuerySub(x);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                ans[q[i].id]=QueryAdd(x);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                ans[q[i].id]=QueryMul(x);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i) <span class=\"built_in\">puts</span>(ans[i]?<span class=\"string\">\"hana\"</span>:<span class=\"string\">\"bi\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"luogu-P4688-YNOI2016-掉进兔子洞\"><a href=\"#luogu-P4688-YNOI2016-掉进兔子洞\" class=\"headerlink\" title=\"luogu P4688[YNOI2016]掉进兔子洞\"></a><a href=\"https://www.luogu.org/problemnew/show/P4688\" target=\"_blank\" rel=\"noopener\">luogu P4688</a>[YNOI2016]掉进兔子洞</h1><h2 id=\"题目描述-3\"><a href=\"#题目描述-3\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个长度为n的数列，有m次询问。每次询问给出三个区间，询问若从这三个区间一起删数，一直删到三个区间没有共同的数为止，最后这三个区间一共剩下的数的数量。（询问之间互相独立）</p>\n<h2 id=\"题解-2\"><a href=\"#题解-2\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>这道题的话，首先，还是经验公式：</p>\n<p>没修改+1e5+lxl=膜队。</p>\n<p>所以考虑怎么膜队。</p>\n<p>首先通过补集转化，问题转化为三个区间共同出现的数的数量。既然是膜队，就要对每个区间分别处理。现在我们需要维护的信息就十分明确了：维护资瓷快速求交集的区间出现元素。这用数据结构并不好维护，所以考虑万能的$\\texttt{bitset}$。现在问题来了：$\\texttt{bitset}$只能对于每个元素，维护是否出现过，并不能维护出现多少次。<del>此时情况开始变得辣手起来。。。</del></p>\n<p>能不能通过某种手段，使得$\\texttt{bitset}$中留够足够的空间使得每个相同的数能够连续存储在一段空间中？珂以！我们只需要在离散化时不去重就珂以了！在存储时，令$x+cnt[x]-1$这一位为1，就珂以了。（我在代码中是采用$\\texttt{shadowice1984}$大佬的方法，令离散化之后的值为数列中小于等于该数的数的个数，就令$x-cnt[x]+1$这一位为1。显然这两种方法是基本相同的。那么，我们就做完啦！</p>\n<p><del>才不是呢！lxl的题怎么能这么轻易做完？</del></p>\n<p>我们发现我们的最终结果是保存在$1e5个​$$\\texttt{bitset}​$里面的。算一波空间，会发现我们开不下。。。所以，我们的算法错了么？考虑充足的时限，我们把询问分成三次处理。这里还有一个避免分类讨论的trick，就是首先把询问储存下来，每次查询时将莫队的询问数组清零，并将当前处理的区间复制到莫队的数组里。这样能使代码简洁许多，并提高珂复用性。</p>\n<h3 id=\"我的代码：-3\"><a href=\"#我的代码：-3\" class=\"headerlink\" title=\"我的代码：\"></a>我的代码：</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::sort;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::lower_bound;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">bitset</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::min;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e5</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn],blo[maxn],col[maxn],len[maxn];</span><br><span class=\"line\"><span class=\"built_in\">bitset</span>&lt;maxn&gt; ans[<span class=\"number\">40000</span>],tmp;</span><br><span class=\"line\"><span class=\"keyword\">int</span> l1[maxn],l2[maxn],l3[maxn],r1[maxn],r2[maxn],r3[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Q</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l,r,id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"keyword\">const</span> Q&amp; q) <span class=\"keyword\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> blo[l]==blo[q.l]?r&lt;q.r:l&lt;q.l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;qry[maxn*<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> p,<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x==<span class=\"number\">1</span>)</span><br><span class=\"line\">        tmp[a[p]-(col[a[p]])]=<span class=\"number\">1</span>,++col[a[p]];</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        tmp[a[p]-col[a[p]]+<span class=\"number\">1</span>]=<span class=\"number\">0</span>,--col[a[p]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> &amp;tmp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tmp=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=l;i&lt;=r;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++tmp;</span><br><span class=\"line\">        qry[tmp].l=l1[i];qry[tmp].r=r1[i];qry[tmp].id=i-l+<span class=\"number\">1</span>;</span><br><span class=\"line\">        ++tmp;</span><br><span class=\"line\">        qry[tmp].l=l2[i];qry[tmp].r=r2[i];qry[tmp].id=i-l+<span class=\"number\">1</span>;</span><br><span class=\"line\">        ++tmp;</span><br><span class=\"line\">        qry[tmp].l=l3[i];qry[tmp].r=r3[i];qry[tmp].id=i-l+<span class=\"number\">1</span>;</span><br><span class=\"line\">        len[i-l+<span class=\"number\">1</span>]=r1[i]-l1[i]+<span class=\"number\">1</span>+r2[i]-l2[i]+<span class=\"number\">1</span>+r3[i]-l3[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> l,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> L=<span class=\"number\">1</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// int leftid=(left-1)*3+1,rightid=min(tmp,(right-1)*3+1);</span></span><br><span class=\"line\">    <span class=\"comment\">// sort(qry+left,qry+right+1);</span></span><br><span class=\"line\">    init(l,r,tmp);</span><br><span class=\"line\">    sort(qry+<span class=\"number\">1</span>,qry+tmp+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(col,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(col));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=r-l+<span class=\"number\">1</span>;++i) ans[i].<span class=\"built_in\">set</span>();</span><br><span class=\"line\">    ::tmp.reset();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=tmp;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> l=qry[i].l,r=qry[i].r;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (R&lt;r) upd(++R,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L&gt;l) upd(--L,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (R&gt;r) upd(R--,<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L&lt;l) upd(L++,<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// if (cnt==1) ans[qry[i].id]&amp;=tmp;</span></span><br><span class=\"line\">        <span class=\"comment\">// else if (cnt==2) ans[qry[i].id-33333]&amp;=tmp;</span></span><br><span class=\"line\">        <span class=\"comment\">// else ans[qry[i].id-(33333+33336-1)]&amp;=tmp;</span></span><br><span class=\"line\">        ans[qry[i].id]&amp;=::tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// for (int i=1;i&lt;=tmp;++i)</span></span><br><span class=\"line\">    <span class=\"comment\">//     len[qry[i].id]+=qry[i].r-qry[i].l+1;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=r-l+<span class=\"number\">1</span>;++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,len[i]-(<span class=\"keyword\">int</span>)ans[i].count()*<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T=<span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        blo[i]=(i<span class=\"number\">-1</span>)/T+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,a+i),++mp[a[i]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;::iterator it=mp.begin(),lst=it++;it!=mp.end();lst=it++)</span><br><span class=\"line\">        it-&gt;second+=lst-&gt;second;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) a[i]=mp[a[i]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d%d%d\"</span>,l1+i,r1+i,l2+i,r2+i,l3+i,r3+i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i+=<span class=\"number\">36000</span>) solve(i,min(i+<span class=\"number\">36000</span><span class=\"number\">-1</span>,m));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>万古神犇LXL，数据结构碾众生！</p>\n</blockquote>\n<p><del>即使是蒟蒻也想变强啊..</del></p>\n<h1 id=\"luogu-P3987-我永远喜欢珂朵莉\"><a href=\"#luogu-P3987-我永远喜欢珂朵莉\" class=\"headerlink\" title=\"luogu P3987 我永远喜欢珂朵莉~\"></a><a href=\"https://www.luogu.org/problemnew/show/P3987\" target=\"_blank\" rel=\"noopener\">luogu P3987</a> 我永远喜欢珂朵莉~</h1><h2 id=\"题目大意：\"><a href=\"#题目大意：\" class=\"headerlink\" title=\"题目大意：\"></a>题目大意：</h2><p>有一个长为n的非负数序列A，支持以下两个操作：</p>\n<ul>\n<li>1 l r x : 把区间[l,r]中所有x的倍数/x</li>\n<li>2 l r : 查询区间[l,r]的和</li>\n</ul>\n<h2 id=\"数据范围：\"><a href=\"#数据范围：\" class=\"headerlink\" title=\"数据范围：\"></a>数据范围：</h2><p>$1 \\le n , m \\le 100000$</p>\n<p>$0 \\le A_i \\le 500000$</p>\n<p>$1 \\le x \\le 500000$</p>","more":"<h2 id=\"题解：\"><a href=\"#题解：\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><p>首先，这道题的突破口在这里：</p>\n<ul>\n<li><p>一个数的约数个数不会太多。虽说上界$O(\\sqrt n)$,但实际上远没有那么多。500000以内只有大概200个左右。当对值域进行限制的时候，很可能就与约数个数相关。尤其是，本题中还有很明显的x的倍数÷x的操作，珂以考虑对每个可能的约数进行维护。</p>\n<p>鉴于单点修改，区间求和是$O(\\log n)$ 的，而一个数最多被除$O(\\log n)$次，总复杂度$O(n\\log^2 n)$这并不是制约复杂度的关键。而且，如果对于整个数列或分块以后的整块（本质上是一个“整体”）维护整体的信息的话，这题根本不可做了。必须找出需要被除的数，才能维护整个数列。现在问题是，如何快速找到需要被除的数。即，如何快速找到序列中x的倍数。珂以考虑对所有$x\\in (2,500000)$进行维护。对于每个约数，维护一棵平衡树，存储数列中它的倍数的下标。当进行区间除的时候，在对应的平衡树中找到下标在$[l, r]$之间的子树，进行dfs，并删掉所有操作进行后不再是x倍数的数的下标。这个过程中珂以顺便维护数列值的变化。当然，并不需要建出所有的平衡树，只对查询的x建树就行了。</p>\n<p>说来惭愧，我这道题在看了lxl的题解后还改了好几天。我从这道题吸取的经验有以下几点：</p>\n<ul>\n<li>当你的板子检查了很多很多遍都没发现问题时，很可能是main函数写错了（捂脸</li>\n<li>各种最大值一定要弄清楚，例如我写题的时候就把值域最大值当成了n。</li>\n<li>板子是珂以根据自己的需要而改动的。如本题中平衡树并不需要维护size。</li>\n</ul>\n</li>\n</ul>\n<p>当然YNOI的毒瘤题需要一点卡常的小trick，相信大家都会，不再赘述。</p>\n<h3 id=\"我的代码：\"><a href=\"#我的代码：\" class=\"headerlink\" title=\"我的代码：\"></a>我的代码：</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;climits&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ls(o) (t[o].ch[0])</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rs(o) (t[o].ch[1])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">500000</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn/<span class=\"number\">5</span>],cnt,n,root[maxn],cntdel,del[maxn];</span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v[maxn];</span><br><span class=\"line\">ll c[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">25</span>],*fs,*ft;</span><br><span class=\"line\">    <span class=\"comment\">// inline char gc()</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     if (fs==ft)</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         ft=(fs=buf)+fread(buf,1,1&lt;&lt;25,stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">//         if (fs==ft) return EOF;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125; </span></span><br><span class=\"line\">    <span class=\"comment\">//     return *fs++;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// #define gc() getchar()</span></span><br><span class=\"line\">    <span class=\"comment\">// #define gc (*fs++)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">register</span> <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch=(*fs++)));</span><br><span class=\"line\">        <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> x=ch<span class=\"number\">-48</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch=(*fs++)))</span><br><span class=\"line\">            x=x*<span class=\"number\">10</span>+ch<span class=\"number\">-48</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">using</span> IO::read;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ff,ch[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos;</span><br><span class=\"line\">&#125;t[maxn*<span class=\"number\">70</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt; <span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">max</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?b:a;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt; <span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">min</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?a:b;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> p,<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=p;i&lt;=n;i+=i&amp;-i) c[i]+=x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=p;i;i-=i&amp;-i) ans+=c[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">decompose</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=<span class=\"built_in\">sqrt</span>(x)+<span class=\"number\">0.1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x%i==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            v[i].push_back(p);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i*i!=x) v[x/i].push_back(p);</span><br><span class=\"line\">            <span class=\"comment\">// printf(\"%d %d\",i,x/i);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y=t[x].ff,z=t[y].ff;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k=t[y].ch[<span class=\"number\">1</span>]==x;</span><br><span class=\"line\">    t[z].ch[t[z].ch[<span class=\"number\">1</span>]==y]=x;</span><br><span class=\"line\">    t[x].ff=z;</span><br><span class=\"line\">    t[y].ch[k]=t[x].ch[k^<span class=\"number\">1</span>];</span><br><span class=\"line\">    t[t[x].ch[k^<span class=\"number\">1</span>]].ff=y;</span><br><span class=\"line\">    t[x].ch[k^<span class=\"number\">1</span>]=y;</span><br><span class=\"line\">    t[y].ff=x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; v,<span class=\"keyword\">int</span> fa)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l&gt;r) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> u=++cnt;</span><br><span class=\"line\">    t[u].ch[<span class=\"number\">0</span>]=build(l,mid<span class=\"number\">-1</span>,v,u);</span><br><span class=\"line\">    t[u].ch[<span class=\"number\">1</span>]=build(mid+<span class=\"number\">1</span>,r,v,u);</span><br><span class=\"line\">    t[u].ff=fa;</span><br><span class=\"line\">    t[u].pos=v[mid];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> _pre,_suc,ppre,psuc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> _prec(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> o)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t[o].pos&lt;x &amp;&amp; _pre&lt;t[o].pos)</span><br><span class=\"line\">        _pre=t[o].pos,ppre=o;</span><br><span class=\"line\">    _prec(x,t[o].ch[t[o].pos&lt;x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">prec</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    _pre=INT_MIN;ppre=<span class=\"number\">0</span>;</span><br><span class=\"line\">    _prec(x,o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ppre;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> _succ(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> o)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t[o].pos&gt;x &amp;&amp; _suc&gt;t[o].pos)</span><br><span class=\"line\">        _suc=t[o].pos,psuc=o;</span><br><span class=\"line\">    _succ(x,t[o].ch[t[o].pos&lt;=x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">succ</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    _suc=INT_MAX;psuc=<span class=\"number\">0</span>;</span><br><span class=\"line\">    _succ(x,o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> psuc;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> goal,<span class=\"keyword\">int</span> idx)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t[x].ff!=goal)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y=t[x].ff,z=t[y].ff;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (z!=goal) rotate((t[z].ch[<span class=\"number\">1</span>]==y)^(t[y].ch[<span class=\"number\">1</span>]==x)?x:y);</span><br><span class=\"line\">        rotate(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!goal) root[idx]=x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> idx)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// assert(t[x].pos&gt;-INF &amp;&amp; t[x].pos&lt;INF);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> L=prec(t[x].pos,u),R=succ(t[x].pos,u);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L!=R)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        splay(L,<span class=\"number\">0</span>,idx);</span><br><span class=\"line\">        splay(R,root[idx],idx);</span><br><span class=\"line\">        <span class=\"comment\">// assert(t[t[t[root[idx]].ch[1]].ch[0]].pos==t[x].pos &amp;&amp; !t[x].ch[0] &amp;&amp; !t[x].ch[1]);</span></span><br><span class=\"line\">        t[t[t[root[idx]].ch[<span class=\"number\">1</span>]].ch[<span class=\"number\">0</span>]].ff=<span class=\"number\">0</span>;</span><br><span class=\"line\">        t[t[root[idx]].ch[<span class=\"number\">1</span>]].ch[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> idx)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!u) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ls(u)) dfs(ls(u),x,idx);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rs(u)) dfs(rs(u),x,idx);</span><br><span class=\"line\">    <span class=\"comment\">// assert(a[t[u].pos]%x==0);</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a[t[u].pos]%x!=<span class=\"number\">0</span>) del[++cntdel]=u;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        update(t[u].pos,-a[t[u].pos]);</span><br><span class=\"line\">        a[t[u].pos]/=x;</span><br><span class=\"line\">        update(t[u].pos,a[t[u].pos]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[t[u].pos]%x!=<span class=\"number\">0</span>) del[++cntdel]=u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Divide</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> L=prec(l,root[x]),R=succ(r,root[x]);</span><br><span class=\"line\">    assert(R &amp;&amp; L);</span><br><span class=\"line\">    <span class=\"comment\">// assert(root[x]);</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L!=R)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        splay(L,<span class=\"number\">0</span>,x);</span><br><span class=\"line\">        splay(R,root[x],x);</span><br><span class=\"line\">        cntdel=<span class=\"number\">0</span>;</span><br><span class=\"line\">        dfs(t[t[root[x]].ch[<span class=\"number\">1</span>]].ch[<span class=\"number\">0</span>],x,x);</span><br><span class=\"line\">        <span class=\"comment\">// for (int i=1;i&lt;=cntdel;++i)</span></span><br><span class=\"line\">        <span class=\"comment\">//     assert(t[del[i]].pos&gt;=l &amp;&amp; t[del[i]].pos&lt;=r);</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=cntdel;++i) remove(del[i],root[x],x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printtree</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ls(u)) printtree(ls(u));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,t[u].pos);</span><br><span class=\"line\">    <span class=\"comment\">// if (t[u].pos&gt;-INF &amp;&amp; t[u].pos&lt;INF) assert(a[t[u].pos]%x==0);</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rs(u)) printtree(rs(u));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// freopen(\"input.in\",\"r\",stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">// freopen(\"my.out\",\"w\",stdout);</span></span><br><span class=\"line\">    fread(IO::fs=IO::buf,<span class=\"number\">1</span>,<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">25</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    n=read();m=read();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=<span class=\"number\">500000</span>;++i) v[i].push_back(-INF);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        a[i]=read(),decompose(a[i],i),update(i,a[i]);</span><br><span class=\"line\">    <span class=\"comment\">// for (register int i=2;i&lt;=500000;++i)</span></span><br><span class=\"line\">    <span class=\"comment\">//     if (v[i].size()&gt;1) v[i].push_back(+INF),root[i]=build(0,v[i].size()-1,v[i],0);</span></span><br><span class=\"line\">    <span class=\"comment\">// for (int i=2;i&lt;=n;++i)</span></span><br><span class=\"line\">    <span class=\"comment\">//     if (v[i].size()&gt;2)printtree(root[i],i);</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> used[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,opt,l,r,x;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        opt=read();l=read();r=read();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (opt==<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x=read();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!used[x] &amp;&amp; v[x].size()&gt;<span class=\"number\">1</span> &amp;&amp; x&gt;<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                v[x].push_back(+INF);</span><br><span class=\"line\">                root[x]=build(<span class=\"number\">0</span>,v[x].size()<span class=\"number\">-1</span>,v[x],<span class=\"number\">0</span>);</span><br><span class=\"line\">                used[x]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l&gt;r) l^=r^=l^=r;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l&lt;<span class=\"number\">0</span> || r&gt;n) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x&gt;<span class=\"number\">1</span> &amp;&amp; v[x].size()&gt;<span class=\"number\">2</span>) Divide(l,r,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,query(r)-query(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// freopen(\"tm.out\",\"w\",stdout);</span></span><br><span class=\"line\">    <span class=\"comment\">// printf(\"%d\",clock());</span></span><br><span class=\"line\">    <span class=\"comment\">// for(;;);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"luogu-P5068-Ynoi2015-我回来了\"><a href=\"#luogu-P5068-Ynoi2015-我回来了\" class=\"headerlink\" title=\"luogu P5068[Ynoi2015]我回来了\"></a><a href=\"https://www.luogu.org/problemnew/show/P5068\" target=\"_blank\" rel=\"noopener\">luogu P5068</a>[Ynoi2015]我回来了</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>珂朵莉给你一个无向图，每次查询的时候给一堆二元组$(x_i,y_i)$<br>求图中有多少个点u与至少一个这次询问给出的二元组$(x_i,y_i)$满足 $dist(u,x_i)\\le y_i$，dist表示这两个点在图中的距离<br>如果不连通$dist = \\inf$</p>\n<h2 id=\"输入输出格式\"><a href=\"#输入输出格式\" class=\"headerlink\" title=\"输入输出格式\"></a>输入输出格式</h2><h3 id=\"输入格式：\"><a href=\"#输入格式：\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><ul>\n<li>第一行三个数表示n，m，q</li>\n<li>n表示顶点个数，m表示边数</li>\n<li>之后m行每行两个数x，y表示这两个点之间连有一条边~，边权都为1</li>\n<li>之后q次询问，每个询问先给你一个数a</li>\n<li>之后a行每行两个数，x，y，表示一个二元组</li>\n<li>n &lt;= 1000 , m &lt;= 100000 , q &lt;= 100000</li>\n<li>a的和 &lt;= 2100000</li>\n</ul>\n<h3 id=\"输出格式：\"><a href=\"#输出格式：\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><ul>\n<li>q行，每行一个数表示这次询问的答案</li>\n</ul>\n<h2 id=\"题解：-1\"><a href=\"#题解：-1\" class=\"headerlink\" title=\"题解：\"></a>题解：</h2><p>这道题大概是YNOI中最良心的一道题？(雾  <del>然而我也没做出来</del></p>\n<p>首先，我们珂以想到，这题大概要预处理，然后用接近$O(1)$的时间回答每个二元组询问。考虑题目中，每一个点即使满足所有要求也只被计算一次贡献，而每个二元组之间又是相互独立的，所以我们需要一个资瓷快速集合取并，快速求集合元素数目的数据结构——这不就是$\\texttt{bitset}$嘛。所以，我们尝试，令$f(u,i)$为$dist(u,v)\\le i$的v的集合，则对于每次询问，将所对应的$f$集合取一个并就好了。现在，问题转化为如何求f集合。本题的时空限制十分诡异，会让人误以为标算的复杂度是错的<del>（然鹅实际跑得飞快）</del>其实暴力计算f就珂以了~~</p>\n<ul>\n<li>首先，跑n次bfs，计算出所有顶点对之间最短路。时间$O(n(n+m))$</li>\n<li>然后，用已知的信息暴力更新f。设w为bitset的位宽，时间$O(n^3/w)$</li>\n<li>（逃</li>\n</ul>\n<p>最后，毒瘤lxl卡了链式前向星，只能用vector存图（因为空间够用，所以我直接开了数组）</p>\n<p>注意，输入存在重边。</p>\n<p>所以，这道题我们就做完啦（撒花！</p>\n<h3 id=\"我的代码\"><a href=\"#我的代码\" class=\"headerlink\" title=\"我的代码\"></a>我的代码</h3><p><del>（我以为这题一定很卡常，所以代码稍微毒瘤了一点）</del>：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">queue</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">bitset</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1024</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> G[maxn][maxn],cnt[maxn],d[maxn][maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> link[maxn][maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">17</span>],*fs,*ft;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">char</span> <span class=\"title\">gc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fs==ft)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ft=(fs=buf)+fread(buf,<span class=\"number\">1</span>,<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">17</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fs==ft) <span class=\"keyword\">return</span> EOF;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *fs++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc getchar</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch=gc()));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=ch^<span class=\"number\">48</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch=gc()))</span><br><span class=\"line\">            x=x*<span class=\"number\">10</span>+ch<span class=\"number\">-48</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;-<span class=\"keyword\">using</span> IO::read;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> vis[maxn];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(d[s],<span class=\"number\">0x3f</span>,<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>)*maxn);</span><br><span class=\"line\">    vis[s]=<span class=\"literal\">true</span>;d[s][s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> u=q.front();q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> *ptr=G[u],*ed=G[u]+cnt[u];ptr!=ed;++ptr)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> v=*ptr;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!vis[v]) d[s][v]=d[s][u]+<span class=\"number\">1</span>,q.push(v),vis[v]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m,q;</span><br><span class=\"line\">    n=read();m=read();q=read();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,u,v;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        u=read();v=read();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (link[u][v]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        G[u][cnt[u]++]=v;</span><br><span class=\"line\">        G[v][cnt[v]++]=u;</span><br><span class=\"line\">        link[u][v]=link[v][u]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) bfs(i);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"built_in\">bitset</span>&lt;maxn&gt; f[maxn][maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> u=<span class=\"number\">1</span>;u&lt;=n;++u)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> v=<span class=\"number\">1</span>;v&lt;=n;++v)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d[u][v]&lt;=n) f[u][d[u][v]].<span class=\"built_in\">set</span>(v);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> u=<span class=\"number\">1</span>;u&lt;=n;++u)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">            f[u][i]|=f[u][i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">bitset</span>&lt;maxn&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=q;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans.reset();</span><br><span class=\"line\">        <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> a=read();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=a;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> x=read(),y=read();</span><br><span class=\"line\">            ans|=f[x][y];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,(<span class=\"keyword\">int</span>)ans.count());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"luogu-P5072-YNOI2015-盼君勿忘\"><a href=\"#luogu-P5072-YNOI2015-盼君勿忘\" class=\"headerlink\" title=\"luogu P5072[YNOI2015]盼君勿忘\"></a><a href=\"https://www.luogu.org/problemnew/show/P5072\" target=\"_blank\" rel=\"noopener\">luogu P5072</a>[YNOI2015]盼君勿忘</h1><h2 id=\"题目描述-1\"><a href=\"#题目描述-1\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>珂朵莉给了你一个序列，每次查询一个区间[l,r]中所有子序列分别去重后的和mod p</p>\n<h2 id=\"输入输出格式-1\"><a href=\"#输入输出格式-1\" class=\"headerlink\" title=\"输入输出格式\"></a>输入输出格式</h2><h3 id=\"输入格式：-1\"><a href=\"#输入格式：-1\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><ul>\n<li>第一行两个数$n,m$</li>\n<li>第二行$n$个数表示这个序列$A$</li>\n<li>之后$m$行，每行三个数$l,r,p$表示查询的区间与模数</li>\n<li>对于$100\\%$的数据，$n,m &lt;= 10^5$,$A_i,p &lt;= 1000000000$</li>\n</ul>\n<h3 id=\"输出格式：-1\"><a href=\"#输出格式：-1\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><ul>\n<li>$m$行，每行输出一个数表示答案</li>\n</ul>\n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>Orz lxl…由乃OI真的毒瘤。。。</p>\n<p><del>我从不抄题解，我只是题解的搬运工。</del>真的不会做，瞎写一点儿吧。</p>\n<p>看到这题，没修改操作，数据范围1e5，珂以想到这是个莫队题。<del>然后我就不会了</del>。</p>\n<p>看到这样的题，我们暴力考虑每个区间显然是不现实的。我们转而考虑每个数对答案的贡献。对于一个数，它被计算到的次数珂以这么计算：</p>\n<p>对于一个区间$[l..r]$，它的非空子序列个数显然为$$2^{r-l+1}-1$$个。不包含x的子序列有$$2^{r-l+1-cnt[x]}-1$$个。所以，x一共被计算了$2^{r-l+1}-2^{r-l+1-cnt[x]}$次。</p>\n<p><del>所以，我们用$cnt[x]$维护x在当前区间的出现次数，莫队维护cnt，修改的同时暴力维护和。。。这就珂以做到$O(n\\sqrt n)$了</del></p>\n<p>上面的假做法只适合模数不变的情况。。。我们考虑模数会变化该怎么做。</p>\n<p><strong>手动划重点！以下内容的思想很重要！</strong></p>\n<p>考虑以$\\sqrt n$为界限<strong>分类讨论</strong>。对于出现次数小于$\\sqrt n$的数，他们的出现次数只有$\\sqrt n$种。对于出现次数大于等于$\\sqrt n$的数，这样的数最多只有$\\sqrt n$种。所以我们对于每个小于等于$\\sqrt n$ 的出现次数x，维护出现次数=x的数之和，对于出现次数$\\geq \\sqrt n$的数，用一种数据结构维护它们组成的集合。$\\texttt{STL unordeded_set}$是个好东西啊。<del>虽然考试不让用</del>这样就珂以做到$O(n\\sqrt n)$求解问题啦。</p>\n<p>最后还有一个小问题——如何快速求2的幂？模数动态改变，每次必须重新计算。有一种$O(\\sqrt n)$预处理，$O(1)$查询的处理方法，正好适合本题。</p>\n<p>设$T=\\lfloor\\sqrt n\\rfloor$,则$C^{x}=C^{\\lfloor x/T \\rfloor} <em> C^{x\\mod T}$ 。这样，只需要预处理$C^1, C^2, C^3….C^T$和$C^T, C^{2T}….C^{T</em>T}$ 即可。</p>\n<h3 id=\"我的代码：-1\"><a href=\"#我的代码：-1\" class=\"headerlink\" title=\"我的代码：\"></a>我的代码：</h3><p>(卡常的血泪史。。。)另外，好像对于值域比较大的情况，它会输出负数，现在暂时没找到原因。还有，膜运算真的太慢啦！去掉四个膜运算，运行时间几乎-1s。。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(<span class=\"meta-string\">\"-O3\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">pragma</span> GCC optimize(<span class=\"meta-string\">\"-Ofast\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unordered_map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unordered_set&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// #define int long long</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::sort;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::unique;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::lower_bound;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">unordered_map</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">unordered_set</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e6</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> blo[maxn],a[maxn],b[maxn],cnt[maxn],L=<span class=\"number\">1</span>,R;</span><br><span class=\"line\">ll _2_k[maxn],_2_sqrt[maxn];</span><br><span class=\"line\">ll sum[maxn],ans;</span><br><span class=\"line\"><span class=\"built_in\">unordered_map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; rnk;</span><br><span class=\"line\"><span class=\"built_in\">unordered_set</span>&lt;<span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> IO</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">24</span>],*fs,*ft;</span><br><span class=\"line\">    <span class=\"comment\">// inline char gc()</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     if (fs==ft)</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//         ft=(fs=buf)+fread(buf,1,1&lt;&lt;24,stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">//         if (fs==ft) return EOF;</span></span><br><span class=\"line\">    <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">//     return *fs++;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> gc() (*fs++)</span></span><br><span class=\"line\">    <span class=\"comment\">// #define gc() getchar()</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch=gc()));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=ch^<span class=\"number\">48</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch=gc()))</span><br><span class=\"line\">            x=x*<span class=\"number\">10</span>+ch<span class=\"number\">-48</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">using</span> IO::read;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Q</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l,r,p,id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"keyword\">const</span> Q&amp; b) <span class=\"keyword\">const</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// return blo[l]^blo[b.l]?blo[l]&lt;blo[b.l]:blo[l]&amp;1?r&lt;b.r:r&gt;b.r;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> blo[l]==blo[b.l]?r&lt;b.r:l&lt;b.l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;q[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(<span class=\"keyword\">register</span> ll a,<span class=\"keyword\">register</span> ll b,<span class=\"keyword\">register</span> ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">1</span>%p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=ans*a%p;</span><br><span class=\"line\">        a=a*a%p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    <span class=\"comment\">// fprintf(stderr,\"SYTAKIOI\\n\");</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">ins</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> t,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> T)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> &amp;x=cnt[t];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;T)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x) sum[x]-=b[t];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++x&lt;T) sum[x]+=b[t];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> mp.insert(b[t]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> ++cnt[t];</span><br><span class=\"line\">    <span class=\"comment\">// fprintf(stderr,\"SYTAKIOI\\n\");</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> t,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> T)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> &amp;x=cnt[t];</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> y=b[t];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;T)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum[x]-=y;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (--x) sum[x]+=y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (--x&lt;T) mp.erase(y),sum[T<span class=\"number\">-1</span>]+=y;</span><br><span class=\"line\">            <span class=\"comment\">// fprintf(stderr,\"SYTAKIOI\\n\");</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">prework</span><span class=\"params\">(<span class=\"keyword\">const</span> ll p,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> T)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    _2_k[<span class=\"number\">0</span>]=<span class=\"number\">1</span>%p,_2_k[<span class=\"number\">1</span>]=<span class=\"number\">2</span>%p,_2_sqrt[<span class=\"number\">0</span>]=<span class=\"number\">1</span>%p,_2_sqrt[<span class=\"number\">1</span>]=qpow(<span class=\"number\">2</span>,T,p);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=T;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _2_k[i]=_2_k[i<span class=\"number\">-1</span>]*<span class=\"number\">2</span>%p;</span><br><span class=\"line\">        _2_sqrt[i]=_2_sqrt[i<span class=\"number\">-1</span>]*_2_sqrt[<span class=\"number\">1</span>]%p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// fprintf(stderr,\"SYTAKIOI\\n\");</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">getpow</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> x,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> T,<span class=\"keyword\">const</span> ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// fprintf(stderr,\"SYTAKIOI\\n\");</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _2_k[x%T]*_2_sqrt[x/T]%p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"in.txt\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">\"my.out\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    fread(IO::fs=IO::buf,<span class=\"number\">1</span>,<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">24</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    n=read();m=read();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> T=<span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        blo[i]=(i<span class=\"number\">-1</span>)/T+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> *ptrb=b+<span class=\"number\">1</span>,*ptra=a+<span class=\"number\">1</span>,*ed=a+n+<span class=\"number\">1</span>;ptra!=ed;++ptrb,++ptra)</span><br><span class=\"line\">        *ptrb=*ptra=read();</span><br><span class=\"line\">    sort(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot=unique(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>)-b<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        a[i]=lower_bound(b+<span class=\"number\">1</span>,b+tot+<span class=\"number\">1</span>,a[i])-b;</span><br><span class=\"line\">    <span class=\"comment\">// for (int i=1;i&lt;=n;++i)</span></span><br><span class=\"line\">    <span class=\"comment\">//     printf(\"x=%d rnk[x]=%d\\n\",a[i],rnk[a[i]]);</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> Q* ptr=q+<span class=\"number\">1</span>,*ed=q+m+<span class=\"number\">1</span>;ptr!=ed;++ptr)</span><br><span class=\"line\">        ptr-&gt;l=read(),ptr-&gt;r=read(),ptr-&gt;p=read(),ptr-&gt;id=ptr-q;</span><br><span class=\"line\">    sort(q+<span class=\"number\">1</span>,q+m+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> ll ans[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> Q* ptr=q+<span class=\"number\">1</span>,*ed=q+m+<span class=\"number\">1</span>;ptr!=ed;++ptr)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// if (q[i].p==15) q[i].p=1e9+7;</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> l=ptr-&gt;l,r=ptr-&gt;r,p=ptr-&gt;p;</span><br><span class=\"line\">        prework(p,T);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (R&lt;r) ins(a[++R],T);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L&gt;l) ins(a[--L],T);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (R&gt;r) del(a[R--],T);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L&lt;l) del(a[L++],T);</span><br><span class=\"line\">        ll&amp; tot=ans[ptr-&gt;id];</span><br><span class=\"line\">        ll tmp=getpow(r-l+<span class=\"number\">1</span>,T,p);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;T;++i)</span><br><span class=\"line\">            (tot+=((tmp-getpow(r-l+<span class=\"number\">1</span>-i,T,p)%p)+p)*sum[i])%=p;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> <span class=\"keyword\">auto</span> x:mp)</span><br><span class=\"line\">            (tot+=((tmp-getpow(r-l+<span class=\"number\">1</span>-(cnt[x]),T,p)%p)+p)*b[x])%=p;</span><br><span class=\"line\">        <span class=\"comment\">// printf(\"L=%d R=%d,sum[1]=%d\\n\",L,R,sum[1]);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> ll *i=ans+<span class=\"number\">1</span>,*ed=ans+m+<span class=\"number\">1</span>;i!=ed;++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%llu\\n\"</span>,*i);</span><br><span class=\"line\">    <span class=\"comment\">// fprintf(stderr,\"%d\",clock());</span></span><br><span class=\"line\">    <span class=\"comment\">// return clock();</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"luogu-P3674小清新人渣的本愿\"><a href=\"#luogu-P3674小清新人渣的本愿\" class=\"headerlink\" title=\"luogu P3674小清新人渣的本愿\"></a><a href=\"https://www.luogu.org/problemnew/show/P3674\" target=\"_blank\" rel=\"noopener\">luogu P3674</a>小清新人渣的本愿</h1><h2 id=\"题目描述-2\"><a href=\"#题目描述-2\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给你一个序列a，长度为n，有m次操作，每次询问一个区间是否珂以选出两个数它们的差为x，或者询问一个区间是否珂以选出两个数它们的和为x，或者询问一个区间是否珂以选出两个数它们的乘积为x ，这三个操作分别为操作1,2,3</p>\n<p>选出的这两个数珂以是同一个位置的数</p>\n<h2 id=\"输入输出格式-2\"><a href=\"#输入输出格式-2\" class=\"headerlink\" title=\"输入输出格式\"></a>输入输出格式</h2><h3 id=\"输入格式：-2\"><a href=\"#输入格式：-2\" class=\"headerlink\" title=\"输入格式：\"></a>输入格式：</h3><ul>\n<li>第一行两个数$n,m$</li>\n<li>后面一行$n$个数表示$a_i$</li>\n<li>后面$m$行每行四个数$opt\\ l\\ r\\ x$</li>\n<li>$opt$表示这个是第几种操作，$l,r$表示操作的区间，$x$表示这次操作的$x$</li>\n</ul>\n<h3 id=\"输出格式：-2\"><a href=\"#输出格式：-2\" class=\"headerlink\" title=\"输出格式：\"></a>输出格式：</h3><ul>\n<li>对于每个询问，如果珂以，输出$\\texttt{hana}$，否则输出$\\texttt{bi}$</li>\n</ul>\n<h2 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>这题还是挺良心的<del>比上一题良心多了</del>  <del>瞎说毒瘤lxl怎么会出良心题</del></p>\n<p>没修改+1e5+lxl=膜队。</p>\n<p>所以我们考虑怎么膜队维护。</p>\n<p>我们首先肯定要维护所有数的出现次数。然后怎么做？</p>\n<p>考虑暴力：对于每个可能成为答案的数，查询对应的另一个数是否存在。这个大概没法用什么数据结构优化了，所以考虑神奇的$\\texttt{bitset}$。用$\\texttt{bitset}$维护每个数是否出现，我们发现：</p>\n<ul>\n<li>对于询问1，若存在k和k+x，则对应着$\\texttt{S&amp;(S&lt;&lt;x).any()==true}$ 。</li>\n<li>对于询问2，若存在$a+b=x$,即$a-(-b)=x$。对于负数，我们不好维护，所以用处理负下标的一般方法，转化成$a-(-b+N)=x-N$。（此处N是一个较大的整数）这样，用另外一个$\\texttt{bitset}$，对于每个出现的$k$，令对应的$(-k+n)$下标处的值为1就珂以了。另外，$\\texttt{bitset}$的移位运算会将$\\texttt{int}$强转成$\\texttt{size_t}$，当移位数为负数的时候会出锅。所以要手动把上面的左移改成右移，移位数取反。</li>\n<li>对于询问3，我们发现我们用$\\texttt{bitset}$没法很好的维护了。所以暴力枚举因子，判断是否存在,珂以发现这并不是复杂度的瓶颈。这样做是正确的……</li>\n</ul>\n<h3 id=\"我的代码：-2\"><a href=\"#我的代码：-2\" class=\"headerlink\" title=\"我的代码：\"></a>我的代码：</h3><p><del>您看我如果不卡常的话码风还是挺正常的嘛</del></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">bitset</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e5</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> blo[maxn],a[maxn],col[maxn];</span><br><span class=\"line\"><span class=\"built_in\">bitset</span>&lt;maxn&gt; ex,rev;</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Q</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> type,l,r,x,id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"keyword\">const</span> Q&amp; q) <span class=\"keyword\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> blo[l]==blo[q.l]?r&lt;q.r:l&lt;q.l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;q[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">QuerySub</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (ex&amp;(ex&lt;&lt;x)).any();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">QueryAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (ex&amp;(rev&gt;&gt;(maxn-x))).any();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">QueryMul</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i*i&lt;=x;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x%i==<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ex[i] &amp;&amp; ex[x/i]) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (++col[x]==<span class=\"number\">1</span>) </span><br><span class=\"line\">        ex[x]=<span class=\"number\">1</span>,rev[maxn-x]=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (--col[x]==<span class=\"number\">0</span>)</span><br><span class=\"line\">        ex[x]=<span class=\"number\">0</span>,rev[maxn-x]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T=<span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,a+i),blo[i]=(i<span class=\"number\">-1</span>)/T+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>,&amp;q[i].type,&amp;q[i].l,&amp;q[i].r,&amp;q[i].x);</span><br><span class=\"line\">        q[i].id=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sort(q+<span class=\"number\">1</span>,q+m+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ans[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,L=<span class=\"number\">1</span>,R=<span class=\"number\">0</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> l=q[i].l,r=q[i].r,x=q[i].x;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (R&lt;r) add(a[++R]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L&gt;l) add(a[--L]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L&lt;l) del(a[L++]);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (R&gt;r) del(a[R--]);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (q[i].type)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                ans[q[i].id]=QuerySub(x);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                ans[q[i].id]=QueryAdd(x);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                ans[q[i].id]=QueryMul(x);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i) <span class=\"built_in\">puts</span>(ans[i]?<span class=\"string\">\"hana\"</span>:<span class=\"string\">\"bi\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"luogu-P4688-YNOI2016-掉进兔子洞\"><a href=\"#luogu-P4688-YNOI2016-掉进兔子洞\" class=\"headerlink\" title=\"luogu P4688[YNOI2016]掉进兔子洞\"></a><a href=\"https://www.luogu.org/problemnew/show/P4688\" target=\"_blank\" rel=\"noopener\">luogu P4688</a>[YNOI2016]掉进兔子洞</h1><h2 id=\"题目描述-3\"><a href=\"#题目描述-3\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>给定一个长度为n的数列，有m次询问。每次询问给出三个区间，询问若从这三个区间一起删数，一直删到三个区间没有共同的数为止，最后这三个区间一共剩下的数的数量。（询问之间互相独立）</p>\n<h2 id=\"题解-2\"><a href=\"#题解-2\" class=\"headerlink\" title=\"题解\"></a>题解</h2><p>这道题的话，首先，还是经验公式：</p>\n<p>没修改+1e5+lxl=膜队。</p>\n<p>所以考虑怎么膜队。</p>\n<p>首先通过补集转化，问题转化为三个区间共同出现的数的数量。既然是膜队，就要对每个区间分别处理。现在我们需要维护的信息就十分明确了：维护资瓷快速求交集的区间出现元素。这用数据结构并不好维护，所以考虑万能的$\\texttt{bitset}$。现在问题来了：$\\texttt{bitset}$只能对于每个元素，维护是否出现过，并不能维护出现多少次。<del>此时情况开始变得辣手起来。。。</del></p>\n<p>能不能通过某种手段，使得$\\texttt{bitset}$中留够足够的空间使得每个相同的数能够连续存储在一段空间中？珂以！我们只需要在离散化时不去重就珂以了！在存储时，令$x+cnt[x]-1$这一位为1，就珂以了。（我在代码中是采用$\\texttt{shadowice1984}$大佬的方法，令离散化之后的值为数列中小于等于该数的数的个数，就令$x-cnt[x]+1$这一位为1。显然这两种方法是基本相同的。那么，我们就做完啦！</p>\n<p><del>才不是呢！lxl的题怎么能这么轻易做完？</del></p>\n<p>我们发现我们的最终结果是保存在$1e5个​$$\\texttt{bitset}​$里面的。算一波空间，会发现我们开不下。。。所以，我们的算法错了么？考虑充足的时限，我们把询问分成三次处理。这里还有一个避免分类讨论的trick，就是首先把询问储存下来，每次查询时将莫队的询问数组清零，并将当前处理的区间复制到莫队的数组里。这样能使代码简洁许多，并提高珂复用性。</p>\n<h3 id=\"我的代码：-3\"><a href=\"#我的代码：-3\" class=\"headerlink\" title=\"我的代码：\"></a>我的代码：</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::sort;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::lower_bound;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">bitset</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::min;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e5</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn],blo[maxn],col[maxn],len[maxn];</span><br><span class=\"line\"><span class=\"built_in\">bitset</span>&lt;maxn&gt; ans[<span class=\"number\">40000</span>],tmp;</span><br><span class=\"line\"><span class=\"keyword\">int</span> l1[maxn],l2[maxn],l3[maxn],r1[maxn],r2[maxn],r3[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Q</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l,r,id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"keyword\">const</span> Q&amp; q) <span class=\"keyword\">const</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> blo[l]==blo[q.l]?r&lt;q.r:l&lt;q.l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;qry[maxn*<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">upd</span><span class=\"params\">(<span class=\"keyword\">int</span> p,<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x==<span class=\"number\">1</span>)</span><br><span class=\"line\">        tmp[a[p]-(col[a[p]])]=<span class=\"number\">1</span>,++col[a[p]];</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        tmp[a[p]-col[a[p]]+<span class=\"number\">1</span>]=<span class=\"number\">0</span>,--col[a[p]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> &amp;tmp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tmp=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=l;i&lt;=r;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++tmp;</span><br><span class=\"line\">        qry[tmp].l=l1[i];qry[tmp].r=r1[i];qry[tmp].id=i-l+<span class=\"number\">1</span>;</span><br><span class=\"line\">        ++tmp;</span><br><span class=\"line\">        qry[tmp].l=l2[i];qry[tmp].r=r2[i];qry[tmp].id=i-l+<span class=\"number\">1</span>;</span><br><span class=\"line\">        ++tmp;</span><br><span class=\"line\">        qry[tmp].l=l3[i];qry[tmp].r=r3[i];qry[tmp].id=i-l+<span class=\"number\">1</span>;</span><br><span class=\"line\">        len[i-l+<span class=\"number\">1</span>]=r1[i]-l1[i]+<span class=\"number\">1</span>+r2[i]-l2[i]+<span class=\"number\">1</span>+r3[i]-l3[i]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> l,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tmp=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> L=<span class=\"number\">1</span>,R=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// int leftid=(left-1)*3+1,rightid=min(tmp,(right-1)*3+1);</span></span><br><span class=\"line\">    <span class=\"comment\">// sort(qry+left,qry+right+1);</span></span><br><span class=\"line\">    init(l,r,tmp);</span><br><span class=\"line\">    sort(qry+<span class=\"number\">1</span>,qry+tmp+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(col,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(col));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=r-l+<span class=\"number\">1</span>;++i) ans[i].<span class=\"built_in\">set</span>();</span><br><span class=\"line\">    ::tmp.reset();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=tmp;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> l=qry[i].l,r=qry[i].r;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (R&lt;r) upd(++R,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L&gt;l) upd(--L,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (R&gt;r) upd(R--,<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (L&lt;l) upd(L++,<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"comment\">// if (cnt==1) ans[qry[i].id]&amp;=tmp;</span></span><br><span class=\"line\">        <span class=\"comment\">// else if (cnt==2) ans[qry[i].id-33333]&amp;=tmp;</span></span><br><span class=\"line\">        <span class=\"comment\">// else ans[qry[i].id-(33333+33336-1)]&amp;=tmp;</span></span><br><span class=\"line\">        ans[qry[i].id]&amp;=::tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// for (int i=1;i&lt;=tmp;++i)</span></span><br><span class=\"line\">    <span class=\"comment\">//     len[qry[i].id]+=qry[i].r-qry[i].l+1;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=r-l+<span class=\"number\">1</span>;++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,len[i]-(<span class=\"keyword\">int</span>)ans[i].count()*<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T=<span class=\"built_in\">sqrt</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        blo[i]=(i<span class=\"number\">-1</span>)/T+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,a+i),++mp[a[i]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;::iterator it=mp.begin(),lst=it++;it!=mp.end();lst=it++)</span><br><span class=\"line\">        it-&gt;second+=lst-&gt;second;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) a[i]=mp[a[i]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d%d%d\"</span>,l1+i,r1+i,l2+i,r2+i,l3+i,r3+i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;i+=<span class=\"number\">36000</span>) solve(i,min(i+<span class=\"number\">36000</span><span class=\"number\">-1</span>,m));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"蒟蒻_WA自动机的模板库","date":"2022-01-21T13:33:28.000Z","comments":1,"_content":"\n# 更新日志\n\n2019.2.16\n\n* 修复珂朵莉树代码中的错误\n* FFT板子更新为预处理单位复根的版本(多项式基本操作请移步多项式算法总结qwq)\n\n2019.2.17\n\n* 新增NTT板子\n\n<!-- more -->\n2019.2.25\n\n* 新增替罪羊树板子\n\n2019.3.6\n\n* 新增K-D Tree(2-D Tree) -> [简单题AC代码]\n* 更新高消板子\n* 更新LCT板子\n\n2019.3.31\n* 新增Miller-Rabin素数判断\n* 新增Pollard-Rho大数分解\n\n2019.4.4\n* 新增SAM板子\n\n2019.4.22\n* 新增二维凸包\n* 新增笛卡尔树\n* 新增Manacher\n\n2019.4.26\n* 新增毒瘤圆方树\n\n2019.4.27\n* 新增广义圆方树\n\n# 数学\n\n## 线性筛\n\n```cpp\ninline void sieve(int n)\n{\n\tfor (int i=2;i<=n;++i)\n\t{\n\t\tif (!v[i]) {v[i]=i;prime[++cnt]=i;}\n\t\tfor (int j=1;j<=cnt;++j)\n\t\t{\n\t\t\tif (prime[j]>v[i] || i*prime[j]>n) break;\n\t\t\tv[i*prime[j]]=prime[j];\n\t\t}\n\t}\n\tfor (int i=1;i<=cnt;++i)\n\t\tisprime[prime[i]]=true;\n}\n```\n\n\n## 高斯消元 \n> 模板题【SDOI2006】异或方程组\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n\nusing std::fabs;\nusing std::swap;\n\nconst int maxn=1e3+10;\nconst double eps=1e-6;\n\ninline int Gauss_Elimination(double (*A)[maxn],double* f,int n)\n{\n    for (int i=1,c=1,j;i<=n;++i)\n    {\n        for (j=c;j<=n && fabs(A[j][i])<eps;++j);\n        if (j==n+1) continue;\n        for (int k=1;k<=n+1;++k) swap(A[c][k],A[j][k]);\n        for (int j=c+1;j<=n;++j)\n            if (fabs(A[j][i])>eps) \n            {\n                double t=A[j][i]/A[c][i];\n                for (int k=i;k<=n+1;++k)\n                    A[j][k]-=t*A[c][k];\n            }\n        ++c;\n    }\n    bool NoAnswer=false,InfAnswer=false;\n    for (int i=n;i;--i)\n    {\n        bool NoVariables=true;\n        for (int j=i;j<=n;++j)\n            if (fabs(A[i][j])>eps) NoVariables=false;\n        if (NoVariables)\n            if (fabs(A[i][n+1])>eps) NoAnswer=true; // 0=C,C!=0,无解\n            else InfAnswer=true; // 0=0,无穷多组解\n        else\n        {\n            for (int j=i+1;j<=n;++j) A[i][n+1]-=A[i][j]*f[j];\n            f[i]=A[i][n+1]/A[i][i];\n        }\n    }\n    if (NoAnswer) return -1; // 无解返回-1.. \n    return !InfAnswer; //无穷多解返回0，有唯一解返回1.\n}\n\nint main()\n{\n    static double A[maxn][maxn],f[maxn];\n    int n;\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;++i)\n        for (int j=1;j<=n+1;++j)\n            scanf(\"%lf\",&A[i][j]);\n    int result=Gauss_Elimination(A,f,n);\n    if (result^1) return printf(\"%d\\n\",result)&0;\n    for (int i=1;i<=n;++i) printf(\"x%d=%.2lf\\n\",i,f[i]);\n}\n```\n\n\n\n## 三分\n\n```cpp\ninline double F(double x)\n{\n\tdouble f=0;\n\tfor (int i=n;~i;--i)\n\t\tf=f*x+a[i];\n\treturn f;\n}\n\nint main()\n{\n\tdouble l,r;\n\tscanf(\"%d%lf%lf\",&n,&l,&r);\n\tfor (int i=n;~i;--i)\n\t\tscanf(\"%lf\",a+i);\n\twhile (l+eps<r)\n\t{\n\t\tdouble m1=l+(r-l)/3;\n\t\tdouble m2=r-(r-l)/3;\n\t\tif (F(m1)>F(m2)) r=m2;\n\t\t\telse l=m1;\n\t}\n\tprintf(\"%.5lf\",l);\n}\n```\n\n\n\n## 矩阵快速幂\n\n```cpp\nMatrix operator^ (ll k)\n{\n\tMatrix ans(n,m);\n\tfor (int i=1;i<=n;++i)\n\t\tans.a[i][i]=1;\n\tMatrix t=*this;\n\tfor (;k;k>>=1)\n\t{\n\t\tif (k&1) ans=ans*t;\n\t\tt=t*t;\n\t}\n\treturn ans;\n}\n```\n\n\n\n## 乘法逆元\n\n### 线性递推\n\n```cpp\ninv[1]=1;\ninv[i]=(p-p/i)*inv[p%i]%p;\n```\n\n###  阶乘逆元\n\n$\\text{inv}(i)=\\text{inv}(i+1) \\times(i+1)$\n\n## 有理数取模\n\n```cpp\ninline ll pow(int a,int b,int mod)\n{\n\tll ans=1ll;\n\tfor (;b;b>>=1)\n\t{\n\t\tif (b&1) ans=ans*a%mod;\n\t\ta=(ll)a*a%mod;\n\t}\n\treturn ans;\n}\n\ninline ll read()\n{\n\tchar ch;\n\twhile (!isdigit(ch=getchar()));\n\tll x=ch-48;\n\twhile (isdigit(ch=getchar()))\n\t\tx=(x*10+ch-48)%mod;\n\treturn x;\n}\n\nint main()\n{\n\tll a,b;\n\ta=read();b=read();\n\tif (!b) return puts(\"Angry!\"),0; \n\tprintf(\"%lld\",(ll)a*pow(b,mod-2,mod)%mod);\n}\n```\n\n## Miller-Rabin\n```cpp\nint pr[]={2,3,5,7,11,13,17,19,23,29,31,37};\n\ninline ll qpow(ll a,ll b,ll p)\n{\n    ll ans=1%p;\n    for (;b;b>>=1)\n    {\n        if (b&1) ans=ans*a%p;\n        a=a*a%p;\n    }\n    return ans;\n}\n\ninline bool miller_rabin(int n)\n{\n    if (n==1) return false;\n    for (int i=0;i<12;++i) if (n==pr[i]) return true;\n    int m=(n-1),k=0;\n    while (!(m&1)) m>>=1,++k;\n    for (int i=0;i<12 && pr[i]<n;++i)\n    {\n        ll x=qpow(pr[i],m,n),y=x;\n        for (int t=0;t<k;++t)\n        {\n            x=x*x%n;\n            if (x==1 && y!=1 && y!=n-1) return false;\n            y=x;\n        }\n        if (x!=1) return false;\n    }\n    return true;\n}\n\n```\n\n## Pollard-Rho\n```cpp\n#include <cstdio>\n#include <ctime>\n#include <cmath>\n#include <random>\n#include <chrono>\n\nusing std::abs;\n\nstd::mt19937_64 Rnd(std::chrono::steady_clock::now().time_since_epoch().count());\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nint pr[]={2,3,5,7,11,13,17,19,23,29,31,37};\n\ninline ll gcd(ll a,ll b){return b==0?a:gcd(b,a%b);}\n\ninline ll rnd(ll x){return (ll)(Rnd()%x+1);}\n\ninline ll quick_pow(ll a,ll b,ll p)\n{\n    ll ans=1%p;\n    for (;b;b>>=1)\n    {\n        if (b&1) ans=ans*a%p;\n        a=a*a%p;\n    }\n    return ans;\n}\n\ninline ll slow_mul(ull a,ll b,ll p)\n{\n    ull ans=0;\n    for (;b;b>>=1)\n    {\n        if (b&1) ans=(ull)(ans+a);\n        if (ans>=p) ans-=p;\n        a=(ull)(a+a)%p;\n        if (a>=p) a-=p;\n    }\n    return ans;\n}\n\ninline bool miller_rabin(ll n)\n{\n    if (n==1) return false;\n    for (int i=0;i<12;++i) if (n==pr[i]) return true;\n    if (n%2==0 || n%3==0 || n%5==0) return false;\n    ll m=(n-1),k=0;\n    while (!(m&1)) m>>=1,++k;\n    for (int i=0;i<12 && pr[i]<n;++i)\n    {\n        ll x=quick_pow(pr[i],m,n),y=x;\n        for (int t=0;t<k;++t)\n        {\n            x=slow_mul(x,x,n);\n            if (x==1 && y!=1 && y!=n-1) return false;\n            y=x;\n        }\n        if (x!=1) return false;\n    }\n    return true;\n}\n\n#define f(x) ((slow_mul(x,x,n)+c)%n)\ninline ll rho(ll n)\n{\n    if (!(n&1)) return 2;\n    if (n%3==0) return 3;\n    ll x=0,y=0,t=1,c=rnd(n-1),q=1;\n    for (int k=2;;k<<=1,y=x,q=1)\n    {\n        for (int i=1;i<k;++i)\n        {\n            x=f(x);\n            q=slow_mul(q,abs(x-y),n);\n            if (!(i&0x7f))\n                if ((t=gcd(q,n))>1) break;\n        }\n        if (t>1 || (t=gcd(q,n))>1) break; \n    }\n    return t;\n}\n\nll max_p;\n\nll solve(ll n)\n{\n    if (n==1) return 1;\n    if (miller_rabin(n)) return max_p=n>max_p?n:max_p; \n    ll t=n;\n    while (t==n) t=rho(n);\n    solve(n/t);solve(t);\n    return max_p;\n}\n\nint main()\n{\n    freopen(\"pol.in\",\"r\",stdin);\n    freopen(\"pol.out\",\"w\",stdout);\n    int T;\n    scanf(\"%d\",&T);\n    while (T--)\n    {\n        ll x;\n        scanf(\"%lld\",&x);max_p=0;\n        ll ret=solve(x);\n        if (ret==x) puts(\"Prime\");\n        else printf(\"%lld\\n\",ret);\n    }\n    fprintf(stderr,\"%d\",clock());\n}\n```\n\n## FFT\n\n```cpp\n#include <cstdio>\n#include <cmath>\n\nconst double Pi=acos(-1.0);\nconst int maxn=2e6+100;\n\ndouble q[maxn];\nint limit=1,rev[maxn];\n\nstruct Complex\n{\n    double real,imag;\n    Complex(double real,double imag):real(real),imag(imag){}\n    Complex(){}\n    Complex conj();\n}w[maxn],winv[maxn],A[maxn];\n\ninline Complex Complex::conj(){return Complex(real,-imag);}\ninline Complex operator+(const Complex& a,const Complex& b){return Complex(a.real+b.real,a.imag+b.imag);}\ninline Complex operator-(const Complex& a,const Complex& b){return Complex(a.real-b.real,a.imag-b.imag);}\ninline Complex operator*(const Complex& a,const Complex& b){return Complex(a.real*b.real-a.imag*b.imag,a.real*b.imag+a.imag*b.real);}\n\ntemplate<typename T>\ninline void swap(T& a,T& b){T t=a;a=b;b=t;}\n\ninline void DFT(Complex* A,Complex* w,int limit)\n{\n    for (int i=0;i<limit;++i)\n        if (i<rev[i]) swap(A[i],A[rev[i]]);\n    for (int mid=1;mid<limit;mid<<=1)\n        for (int R=mid<<1,j=0;j<limit;j+=R)\n            for (int k=0;k<mid;++k)\n            {\n                Complex x=A[j+k],y=w[limit/mid/2*k]*A[j+mid+k];\n                A[j+k]=x+y;\n                A[j+mid+k]=x-y;\n            }\n}\n\ninline void prework(int n)\n{\n    int l=0;\n    while (limit<=(n<<1)+1) limit<<=1,++l;\n    for (int i=0;i<limit;++i)\n        rev[i]=(rev[i>>1]>>1)|((i&1)<<(l-1));\n    for (int i=0;i<limit;++i) \n        w[i]=Complex(cos(Pi*2/limit*i),sin(Pi*2/limit*i)),winv[i]=w[i].conj();\n}\n\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for (int i=0;i<=n;++i)\n        scanf(\"%lf\",&A[i].real);\n    for (int i=0;i<=m;++i)\n        scanf(\"%lf\",&A[i].imag);\n    prework(n>=m?n:m);\n    DFT(A,w,limit);\n    for (int i=0;i<limit;++i)\n        A[i]=A[i]*A[i];\n    DFT(A,winv,limit);\n    for (int i=0;i<=n+m;++i)\n        printf(\"%d \",(int)(A[i].imag/2/limit+0.1));\n}\n```\n\n\n\n## NTT\n\n```cpp\ninline int qpow(int a,int b,int p)\n{\n    int ans=1%p;\n    for (;b;b>>=1,a=(ll)a*a%p)\n        if (b&1) ans=(ll)ans*a%p;\n    return ans;\n}\n\ninline void prework(int n,int m)\n{\n    int l=0;\n    while (limit<=(n+m+1)) limit<<=1,++l;\n    w[0]=1;w[1]=qpow(g,(P-1)/limit,P),winv[0]=1,winv[1]=qpow(w[1],P-2,P);\n    for (int i=2;i<limit;++i)\n        w[i]=(ll)w[i-1]*w[1]%P,winv[i]=1ll*winv[i-1]*winv[1]%P;\n    for (int i=1;i<limit;++i)\n        rev[i]=(rev[i>>1]>>1)|((i&1)<<(l-1));\n}\n\ninline void NTT(int *A,int *w,int limit)\n{\n    for (int i=0;i<limit;++i)\n        if (i<rev[i]) swap(A[i],A[rev[i]]);\n    for (int mid=1;mid<limit;mid<<=1)\n        for (int R=mid<<1,j=0;j<limit;j+=R)\n            for (int k=0;k<mid;++k)\n            {\n                int x=A[j+k],y=(ll)A[j+k+mid]*w[limit/2/mid*k]%P;\n                A[j+k]=(x+y)%P;A[j+mid+k]=(x-y+P)%P;\n            }\n}\n\ninline void DFT(int *A){ NTT(A,w,limit); }\n\ninline void IDFT(int *A)\n{\n    NTT(A,winv,limit);\n    int inv=qpow(limit,P-2,P);\n    for (int i=0;i<=limit;++i)\n        A[i]=((ll)A[i]*inv)%P;\n}\n```\n\n# 计算几何\n## 二维凸包\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n\nusing std::sort;\nusing std::sqrt;\n\nconst int maxn=1e5+100;\n\nstruct Point\n{\n    double x,y;\n    Point(double x,double y):x(x),y(y){}\n    Point(){}\n    bool operator< (const Point& p) const{return x==p.x?y<p.y:x<p.x;}\n    Point operator- (const Point& p){return Point(x-p.x,y-p.y);}\n    double operator* (const Point& p){return x*p.x+y*p.y;}\n}p[maxn];\n\ntypedef Point Vector;\n\ninline double dis(const Point& a,const Point& b){return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));}\n\ninline double cross(const Vector& a,const Vector& b){return a.x*b.y-b.x*a.y;}\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;++i)\n        scanf(\"%lf%lf\",&p[i].x,&p[i].y);\n    sort(p+1,p+n+1);\n    static int stack[maxn];\n    int top=0;\n    stack[++top]=1;\n    bool used[maxn];\n    for (int i=2;i<=n;++i)\n    {\n        while (top>1 && cross(p[stack[top]]-p[stack[top-1]],p[i]-p[stack[top]])<=0) used[stack[top--]]=false;\n        stack[++top]=i;\n        used[i]=true;\n    }\n    int prec=top;\n    for (int i=n;i;--i)\n        if (!used[i])\n        {\n            while (top>prec && cross(p[stack[top]]-p[stack[top-1]],p[i]-p[stack[top]])<=0) used[stack[top--]]=false;\n            stack[++top]=i;\n            used[i]=true;\n        }\n    double ans=0;\n    for (int i=2;i<=top;++i)\n        ans+=dis(p[stack[i]],p[stack[i-1]]);\n    printf(\"%.2lf\",ans);\n}\n```\n\n# 字符串\n\n## Manacher\n```cpp\n#include <cstdio>\n#include <cstring>\n\nconst int maxn=3e7+10;\n\nchar buf[maxn],s[maxn];\nint f[maxn];\n\ntemplate<class T>inline T min(T a,T b){return a<b?a:b;}\ntemplate<class T>inline T max(T a,T b){return a<b?b:a;}\n\ninline void manacher(int n)\n{\n    int maxright=0,mid=0;\n    for (int i=1;i<n;++i)\n    {\n        if (i<maxright) f[i]=min(f[(mid<<1)-i],f[mid]+mid-i);\n        else f[i]=1;\n        while (s[i+f[i]]==s[i-f[i]]) ++f[i];\n        if (i+f[i]>maxright) maxright=i+f[i],mid=i;\n    }\n}\n\nint main()\n{\n    int n;\n    scanf(\"%s\",buf);\n    n=strlen(buf);\n    s[0]=s[1]='@';\n    for (int i=0;i<n;++i)\n        s[(i<<1)+2]=buf[i],s[(i<<1)+3]='@';\n    n=n*2+2;s[n]=0;\n    manacher(n);\n    int ans=0;\n    for (int i=0;i<n;++i)\n        ans=max(ans,f[i]);\n    printf(\"%d\",ans-1);\n}\n```\n\n## 制胡窜哈希\n\n```cpp\ninline void hs1(char* s)\n{\n\tpw1[0]=1;hsh1[0]=s[0];\n\tfor (int i=1;i<n;++i)\n\t{\n\t\tpw1[i]=(ll)pw1[i-1]*seed%mod1;\n\t\thsh1[i]=((ll)hsh1[i-1]*seed+s[i])%mod1;\n\t}\n}\n\ninline void hs2(char* s)\n{\n\tpw2[0]=1;hsh2[0]=s[0];\n\tfor (int i=1;i<n;++i)\n\t{\n\t\tpw2[i]=(ll)pw2[i-1]*seed%mod2;\n\t\thsh2[i]=((ll)hsh2[i-1]*seed+s[i])%mod2;\n\t}\n}\n\ninline pair<int,int> gethash(int l,int r)\n{\n\tint t1=((hsh1[r]-(ll)hsh1[l-1]*pw1[r-l+1]%mod1)+mod1)%mod1;\n\tint t2=((hsh2[r]-(ll)hsh2[l-1]*pw2[r-l+1]%mod2)+mod2)%mod2;\n\treturn make_pair(t1,t2);\n}\n```\n\n\n\n## KMP\n\n```cpp\ninline void getfail(int n)\n{\n    for (int i=1,j;i<n;++i)\n    {\n        j=f[i];\n        while (j && P[j]!=P[i]) j=f[j];\n        f[i+1]=P[i]==P[j]?j+1:0;\n    }\n}\n\ninline void kmp(int n,int m)\n{\n    for (int i=0,j=0;i<n;++i)\n    {\n        while (j && T[i]!=P[j]) j=f[j];\n        if (T[i]==P[j]) ++j;\n        if (j==m) printf(\"%d\\n\",i-m+2);\n    }\n}\n```\n\n\n\n## AC自动机\n\n```cpp\nvoid add(const char* s)\n{\n\tint n=strlen(s),u=0;\n\tfor (int i=0;i<n;++i)\n\t{\n\t\tint c=idx(s[i]);\n\t\tif (!ch[u][c]) ch[u][c]=++cnt;\n\t\tu=ch[u][c];\n\t}\n\t++tag[u];\n}\n\nvoid getfail()\n{\n\tqueue<int> q;\n\tfor (int i=0;i<26;++i)\n\t\tif (ch[0][i]) q.push(ch[0][i]);\n\twhile (!q.empty())\n\t{\n\t\tint u=q.front();q.pop();\n\t\tfor (int i=0;i<26;++i)\n\t\t{\n\t\t\tint c=ch[u][i];\n\t\t\tif (!c) {ch[u][i]=ch[f[u]][i];continue;}\n\t\t\tq.push(c);\n\t\t\tint v=f[u];\n\t\t\twhile (v && !ch[v][i]) v=f[v];\n\t\t\tf[c]=ch[v][i];\n\t\t\tlast[c]=tag[f[c]]?f[c]:last[f[c]];\n\t\t}\n\t}\n}\n\nint get(const char *s)\n{\n    int n=strlen(s);\n    int x=0,ret=0;\n    for(int i=0;i<n;++i)\n    {\n        x=ch[x][idx(s[i])];\n        for(int j=x;j;j=last[j])\n        \tif(!vis[j])vis[j]=1,ret+=tag[j];\n    }\n    return ret;\n}\n```\n\n\n\n## SA\n\n```cpp\ninline void build_sa(int n,int m)\n{\n    int *x=t1,*y=t2;\n    for (int i=0;i<m;++i) c[i]=0;\n    for (int i=0;i<n;++i) c[x[i]=s[i]]++;\n    for (int i=1;i<m;++i) c[i]+=c[i-1];\n    for (int i=n-1;~i;--i) sa[--c[x[i]]]=i;\n    for (int k=1,p=1;k<=n && p<n;k<<=1,m=p)\n    {\n        p=0;\n        for (int i=n-k;i<n;++i) y[p++]=i;\n        for (int i=0;i<n;++i) if (sa[i]>=k) y[p++]=sa[i]-k;\n        for (int i=0;i<m;++i) c[i]=0;\n        for (int i=0;i<n;++i) c[t3[i]=x[y[i]]]++;\n        for (int i=1;i<m;++i) c[i]+=c[i-1];\n        for (int i=n-1;~i;--i) sa[--c[t3[i]]]=y[i];\n        p=1;swap(x,y);x[sa[0]]=0;\n        for (register int i=1;i<n;++i)\n            x[sa[i]]=(y[sa[i]+k]==y[sa[i-1]+k] && y[sa[i]]==y[sa[i-1]])?p-1:p++;\n    }\n}\n\ninline void get_height(int n)\n{\n    int k=0,j=0;\n    for (int i=0;i<=n;++i) rank[sa[i]]=i;\n    for (int i=0;i<n;height[rank[i++]]=k)\n        for (k?--k:0,j=sa[rank[i]-1];s[j+k]==s[i+k];++k);\n}\n```\n\n## SAM\n```cpp\n#include <cstdio>\n#include <cstring>\n\nconst int maxn=2e6+1000;\n\nint tr[maxn][26],parent[maxn],mx[maxn],right[maxn],cnt=1,last=1;\n\ninline void radixsort(int n)\n{\n    static int c[maxn],id[maxn];\n    for (int i=1;i<=cnt;++i) ++c[mx[i]];\n    for (int i=1;i<=n;++i) c[i]+=c[i-1];\n    for (int i=cnt;i;--i) id[--c[mx[i]]]=i;\n    for (int i=cnt-1;~i;--i) right[parent[id[i]]]+=right[id[i]];\n}\n\ninline void insert(int x)\n{\n    int p=last,np=last=++cnt;\n    right[np]=1;mx[np]=mx[p]+1;\n    while (p && !tr[p][x]) tr[p][x]=np,p=parent[p];\n    if (!p) parent[np]=1;\n    else\n    {\n        int q=tr[p][x];\n        if (mx[q]==mx[p]+1) parent[np]=q;\n        else\n        {\n            int nq=++cnt;\n            mx[nq]=mx[p]+1;\n            memcpy(tr[nq],tr[q],sizeof(tr[q]));\n            while (p && tr[p][x]==q) tr[p][x]=nq,p=parent[p];\n            parent[nq]=parent[q];parent[q]=parent[np]=nq;\n        }\n    }\n}\n\nint main()\n{\n    int n;\n    static char s[maxn];\n    scanf(\"%s\",s);\n    n=strlen(s);\n    for (int i=0;i<n;++i) insert(s[i]-'a');\n    radixsort(n);\n    int ans=0;\n    for (int i=1;i<=cnt;++i) if (right[i]>1 && right[i]*mx[i]>ans) ans=right[i]*mx[i]; \n    printf(\"%d\\n\",ans);\n}\n```\n\n# 图论\n## 广义圆方树(APIO2018 铁人两项)\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n\nusing std::vector;\n\nconst int maxn=2e6+100;\n\nvector<int> G[maxn],T[maxn];\nint dfn[maxn],low[maxn],dfc,tot,cnt,val[maxn],siz[maxn];\n\ntemplate<class T>inline T max(T a,T b){return a<b?b:a;}\ntemplate<class T>inline T min(T a,T b){return a<b?a:b;}\ntemplate<class T>inline void swap(T& a,T& b){a^=b^=a^=b;}\n\ninline void tarjan(int u,int ff)\n{\n    static int stack[maxn],top=0;\n    dfn[u]=low[u]=++dfc;\n    stack[++top]=u;\n    ++cnt;val[u]=-1;\n    for (auto v:G[u])\n    {\n        if (v==ff) continue;\n        if (!dfn[v])\n        {\n            tarjan(v,u);\n            low[u]=min(low[u],low[v]);\n            if (low[v]>=dfn[u])\n            {\n                ++tot;\n                int x;\n                do\n                {\n                    x=stack[top--];\n                    ++val[tot];\n                    T[x].push_back(tot);\n                    T[tot].push_back(x);\n                } while (x!=v);\n                T[u].push_back(tot);\n                T[tot].push_back(u);\n                ++val[tot];\n            }\n        }\n        else low[u]=min(low[u],dfn[v]);\n    }\n}\n\ninline int64_t calc(int u,int ff,int n,int N)\n{\n    int64_t ans=0;\n    siz[u]=(u<=N);\n    for (auto v:T[u])\n    {\n        if (v==ff) continue;\n        ans+=calc(v,u,n,N);\n        ans+=(int64_t)siz[u]*siz[v]*val[u];\n        siz[u]+=siz[v];\n    }\n    ans+=(int64_t)siz[u]*(n-siz[u])*val[u];\n    return ans;\n}\n\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    tot=n;\n    for (int i=1,u,v;i<=m;++i)\n        scanf(\"%d%d\",&u,&v),G[u].push_back(v),G[v].push_back(u);\n    int64_t ans=0;\n    for (int i=1;i<=n;++i)\n        if (!dfn[i])\n        {\n            cnt=0;\n            tarjan(i,0);\n            ans+=calc(i,0,cnt,n);\n        } \n    printf(\"%lld\\n\",ans*2);\n}\n```\n\n## 静态仙人掌（圆方树）\n```cpp\n#include <cstdio>\n#include <algorithm>\n\nconst int maxn=3e4+1200;\n\nstruct Graph\n{\n    struct Edge\n    {\n        int to,next,w;\n    }edge[maxn<<1];\n    int head[maxn],cnt;\n\n    inline void _add(int u,int v,int w)\n    {\n        edge[++cnt].next=head[u];\n        edge[cnt].to=v;\n        edge[cnt].w=w;\n        head[u]=cnt;\n    }\n    inline void add(int u,int v,int w){_add(u,v,w);_add(v,u,w);}\n}G,T;\n\nint dfn[maxn],low[maxn],tot,dfc;\nint fa[maxn],val[maxn],sum[maxn];\n\ntemplate<class T>inline T min(T a,T b){return a<b?a:b;}\ntemplate<class T>inline T max(T a,T b){return a<b?b:a;}\ntemplate<class T>inline void swap(T &a,T &b){a^=b^=a^=b;}\n\ninline void build(int u,int v,int w)\n{\n    ++tot;\n    int s=w;\n    for (int x=v;x!=fa[u];x=fa[x])\n        sum[x]=s,s+=val[x];\n    sum[tot]=sum[u];\n    sum[u]=0;\n    for (int x=v;x!=fa[u];x=fa[x])\n    {\n        int sp=min(sum[x],sum[tot]-sum[x]);\n        T.add(x,tot,sp);\n    }\n}\n\ninline void tarjan(int u,int ff)\n{\n    dfn[u]=low[u]=++dfc;\n    for (int i=G.head[u];i;i=G.edge[i].next)\n    {\n        int v=G.edge[i].to;\n        if (v==ff) continue;\n        if (!dfn[v])\n        {\n            fa[v]=u;\n            val[v]=G.edge[i].w;\n            tarjan(v,u);\n            low[u]=min(low[u],low[v]);\n        }\n        else low[u]=min(low[u],dfn[v]);\n        if (low[v]<=dfn[u]) continue;\n        T.add(u,v,G.edge[i].w);\n    }\n    for (int i=G.head[u];i;i=G.edge[i].next)\n    {\n        int v=G.edge[i].to;\n        if (fa[v]!=u && dfn[v]>dfn[u])\n            build(u,v,G.edge[i].w);\n    }\n}\n\nint depth[maxn],siz[maxn],top[maxn],son[maxn],dis[maxn];\n\ninline void dfs(int u,int ff,int dep,int di)\n{\n    depth[u]=dep;\n    dis[u]=di;\n    fa[u]=ff;\n    int maxs=-1;\n    siz[u]=1;\n    for (int i=T.head[u];i;i=T.edge[i].next)\n    {\n        int v=T.edge[i].to;\n        if (v!=ff)\n        {\n            dfs(v,u,dep+1,di+T.edge[i].w);\n            siz[u]+=siz[v];\n            if (siz[v]>maxs) maxs=siz[v],son[u]=v;\n        }\n    }\n}\n\ninline void dfs(int u,int topf)\n{\n    top[u]=topf;\n    if (!son[u]) return;\n    dfs(son[u],topf);\n    for (int i=T.head[u];i;i=T.edge[i].next)\n    {\n        int v=T.edge[i].to;\n        if (v!=fa[u] && v!=son[u])\n            dfs(v,v);\n    }\n}\n\ninline int LCA(int u,int v)\n{\n    while (top[u]!=top[v])\n    {\n        if (depth[top[u]]<depth[top[v]]) swap(u,v);\n        u=fa[top[u]];\n    }\n    return depth[u]>depth[v]?v:u;\n}\n\ninline int find(int u,int lca)\n{\n    int res=son[lca];\n    while (top[u]!=top[lca])\n        res=top[u],u=fa[top[u]];\n    return u==lca?res:son[lca];\n}\n\ninline int query(int u,int v,int n)\n{\n    int lca=LCA(u,v);\n    if (lca<=n) return dis[u]+dis[v]-2*dis[lca];\n    int x=find(u,lca),y=find(v,lca);\n    int ans=dis[u]+dis[v]-dis[x]-dis[y];\n    if (sum[x]<sum[y]) swap(x,y);\n    ans+=min(sum[x]-sum[y],sum[lca]-sum[x]+sum[y]);\n    return ans;\n}\n\nint main()\n{\n    int n,m,q;\n    scanf(\"%d%d%d\",&n,&m,&q);\n    for (int i=1,u,v,w;i<=m;++i)\n        scanf(\"%d%d%d\",&u,&v,&w),G.add(u,v,w);\n    tot=n;\n    tarjan(1,0);\n    dfs(1,0,1,0);\n    dfs(1,1);\n    for (int i=1,u,v;i<=q;++i)\n    {\n        scanf(\"%d%d\",&u,&v);\n        printf(\"%d\\n\",query(u,v,n));\n    }\n}\n```\n\n## Kruskal\n\n```cpp\nstruct Edge\n{\n\tint u,v,w;\n\tbool operator< (const Edge& e) const {return w<e.w;}\n}edge[maxn];\nint fa[maxn],cnt;\n\ninline int find(int x){return x==fa[x]?x:fa[x]=find(fa[x]);}\n\ninline int kruskal(int m)\n{\n\tint ans=0;\n\tstd::sort(edge+1,edge+m+1);\n\tfor (int i=1;i<=m;++i)\n\t{\n\t\tint u=edge[i].u,v=edge[i].v,w=edge[i].w;\n\t\tif (find(u)!=find(v))\n\t\t\t++cnt,fa[find(u)]=find(v),ans+=w;\n\t}\n\treturn ans;\n}\n```\n\n## LCA\n\n###  树剖  \n\n```cpp\nvoid dfs(int u,int f,int dep)\n{\n    depth[u]=dep;\n    fa[u]=f;\n    siz[u]=1;\n    int maxs=-1;\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=f) \n        {\n            dfs(v,u,dep+1);\n            siz[u]+=siz[v];\n            if (siz[v]>=maxs) maxs=siz[v],son[u]=v;\n        }\n    }\n}\n\nvoid dfs(int u,int topf)\n{\n    top[u]=topf;\n    if (!son[u]) return;\n    dfs(son[u],topf);\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=fa[u] && v!=son[u]) dfs(v,v);\n    }\n}\n\nint lca(int u,int v)\n{\n    while (top[u]!=top[v])\n    {\n        if (depth[top[u]]<depth[top[v]]) swap(u,v);\n        u=fa[top[u]];\n    }\n    if (depth[u]>depth[v]) swap(u,v);\n    return u;\n}\n```\n\n### 倍增\n\n```cpp\ninline void dfs(int u,int fa,int dep)\n{\n    f[u][0]=fa;\n    depth[u]=dep;\n    for (int i=1;(1<<i)<=n;++i)\n        f[u][i]=f[f[u][i-1]][i-1];\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=fa) dfs(v,u,dep+1);\n    }\n}\n\ninline int lca(int u,int v)\n{\n    if (depth[u]<depth[v]) swap(u,v);\n    int l=depth[u]-depth[v];\n    for (int i=0;(1<<i)<=l;++i)\n        if (l&(1<<i)) u=f[u][i];\n    if (u==v) return u;\n    for (int i=22;i>=0;--i)\n        if (f[u][i]!=f[v][i]) \n            u=f[u][i],v=f[v][i];\n    return f[u][0];\n}\n```\n\n### DFS序转RMQ\n\n```cpp\ninline int Min(int x,int y){return depth[x]<depth[y]?x:y;}\n\nvoid dfs(int u,int f,int dep)\n{\n    fa[u]=f;\n    dfn[++tot]=u;\n    pre[u]=tot;\n    depth[tot]=dep;\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=f)\n        {\n            dfs(v,u,dep+1);\n            dfn[++tot]=u;\n            depth[tot]=dep;\n        }\n    }\n}\n\ninline void rmq_init()\n{\n    for (int i=1;i<=tot;++i) st[i][0]=i; \n    for (int j=1;(1<<j)<=tot;++j)\n        for (int i=1;i+(1<<j)-1<=tot;++i)\n            st[i][j]=Min(st[i][j-1],st[i+(1<<(j-1))][j-1]);\n}\n\ninline int rmq(int L,int R)\n{\n    int k=0;\n    while ((1<<(k+1))<=R-L+1) ++k;\n    return Min(st[L][k],st[R-(1<<k)+1][k]);\n}\n\ninline int lca(int x,int y)\n{\n    x=pre[x];y=pre[y];\n    if (x>y) swap(x,y);\n    return dfn[rmq(x,y)];\n}\n```\n\n### Tarjan\n\n```cpp\ninline int find(int x){ return x==fa[x]?x:fa[x]=find(fa[x]);}\n\nvoid dfs(int u,int f)\n{\n    fa[u]=u;\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=f) dfs(v,u),fa[v]=u;\n    }\n    for (int i=query_head[u];~i;i=query[i].next)\n    {\n        int v=query[i].v;\n        if (vis[v]) query[i].ans=query[i^1].ans=find(v);\n    } \n    vis[u]=true;\n}\n```\n\n\n\n## 单源最短路径\n\n> Dijkstra\n\n```cpp\nvoid Dijkstra(int s)\n{\n\tmemset(d,0x3f,sizeof(d));\n\tstd::priority_queue<Node> q;\n\td[s]=0;\n\tq.push(Node(s,0));\n\twhile (!q.empty())\n\t{\n\t\tint u=q.top().u,di=q.top().dis;q.pop();\n\t\tif (di!=d[u]) continue;\n\t\tfor (int i=head[u];i;i=edge[i].next)\n\t\t{\n\t\t\tint v=edge[i].to;\n\t\t\tif (d[v]>d[u]+edge[i].w)\n\t\t\t{\n\t\t\t\td[v]=d[u]+edge[i].w;\n\t\t\t\tq.push(Node(v,d[v]));\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n> SPFA\n\n```cpp\nvoid spfa()\n{\n    d[s]=0;\n    vis[s]=1;\n    queue<int> q;\n    q.push(s);\n    while (!q.empty())\n    {\n        int u=q.front(); q.pop();vis[u]=false;\n        for (int i=head[u];i;i=edges[i].next)\n        {\n            Edge& e=edges[i];\n            if (d[e.to]>d[u]+e.w)\n            {\n                d[e.to]=d[u]+e.w;\n                if (!vis[e.to]) q.push(e.to),vis[e.to]=true;\n            }\n        }\n    }\n}\n```\n\n\n\n## 网络流\n\n> Dinic最大流\n\n```cpp\nbool bfs()\n{\n\tqueue<int> q;\n\tq.push(s);\n\tmemset(depth,0,sizeof(depth));\n\tdepth[s]=1;\n\twhile (!q.empty())\n\t{\n\t\tint u=q.front();q.pop();\n\t\tfor (int i=head[u];~i;i=edge[i].next)\n\t\t{\n\t\t\tint v=edge[i].to;\n\t\t\tif (!depth[v] && edge[i].w>0)\n\t\t\t\tdepth[v]=depth[u]+1,q.push(v);\n\t\t}\n\t}\n\treturn depth[t]>0; \n}\n\nint dfs(int u,int flow)\n{\n\tif (u==t) return flow;\n\tfor (int &i=cur[u];~i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif (depth[v]==depth[u]+1 && edge[i].w>0)\n\t\t{\n\t\t\tint d=dfs(v,min(flow,edge[i].w));\n\t\t\tif (d>0)\n\t\t\t{\n\t\t\t\tedge[i].w-=d;\n\t\t\t\tedge[i^1].w+=d;\n\t\t\t\treturn d;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint dinic(int n)\n{\n\tint ans=0;\n\twhile (bfs())\n\t{\n\t\tmemcpy(cur,head,sizeof(cur));\n\t\twhile (int d=dfs(s,INF)) ans+=d;\n\t}\n\treturn ans;\n}\n```\n\n> Edmonds-Karp费用流\n\n```cpp\ninline bool spfa()\n{\n\tstatic int vis[maxn];\n\tqueue<int> q;\n\tq.push(s);\n\tmemset(vis,0,sizeof(vis));\n\tmemset(d,0x3f,sizeof(d));\n\td[s]=0;vis[s]=true;\n\twhile (!q.empty())\n\t{\n\t\tint u=q.front();q.pop();\n\t\tvis[u]=false;\n\t\tfor (int i=head[u];~i;i=edge[i].next)\n\t\t{\n\t\t\tint v=edge[i].to;\n\t\t\tif (edge[i].flow>0 && d[v]>d[u]+edge[i].cost)\n\t\t\t{\n\t\t\t\td[v]=d[u]+edge[i].cost;\n\t\t\t\tincf[v]=edge[i].flow;\n\t\t\t\tinedge[v]=i;\n\t\t\t\tpre[v]=u;\n\t\t\t\tif (!vis[v]) vis[v]=true,q.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn d[t]<inf;\n}\n\ninline void mcmf()\n{\n\tint flow=0,cost=0;\n\twhile (spfa())\n\t{\n\t\tint u=t,mn=inf;\n\t\tfor (int i=t;i!=s;i=pre[i])\n\t\t\tmn=min(mn,incf[i]);\n\t\tfor (int i=t;i!=s;i=pre[i])\n\t\t{\n\t\t\tedge[inedge[i]].flow-=mn;\n\t\t\tedge[inedge[i]^1].flow+=mn;\n\t\t}\n\t\tcost+=d[t]*mn;\n\t\tflow+=mn;\n\t}\n\tprintf(\"%d %d\",flow,cost);\n}\n\n```\n\n\n\n## 割点\n\n```cpp\ninline void tarjan(int u,int rt)\n{\n\tint chd=0;\n\tdfn[u]=low[u]=++idx;\n\tfor (int i=head[u];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif (!dfn[v])\n\t\t{\n\t\t\ttarjan(v,rt);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t\tif (low[v]>=dfn[u])\n\t\t\t{\n\t\t\t\t++chd;\n\t\t\t\tif (chd>1 || u!=rt)\n\t\t\t\t\tiscut[u]=true;\n\t\t\t}\n\t\t}\n\t\telse low[u]=min(low[u],dfn[v]);\n\t}\n}\n```\n\n\n\n## Tarjan缩点\n\n```cpp\nstruct Graph\n{\n\tint head[maxn],cnt;\n\tEdge edge[maxm];\n\tinline void add(int u,int v)\n\t{\n\t\tedge[++cnt].next=head[u];\n\t\tedge[cnt].to=v;\n\t\thead[u]=cnt;\n\t}\n}old,dag;\n\nvoid tarjan(int u)\n{\n\tdfn[u]=low[u]=++idx;\n\tstk[++top]=u;\n\tinstack[u]=true;\n\tfor (int i=old.head[u];i;i=old.edge[i].next)\n\t{\n\t\tint v=old.edge[i].to;\n\t\tif (!dfn[v])\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if (instack[v]) low[u]=min(low[u],dfn[v]);\n\t}\n\tif (dfn[u]==low[u])\n\t{\n\t\tint v;\n\t\t++scc_cnt;\n\t\tdo\n\t\t{\n\t\t\tv=stk[top--];\n\t\t\tbelong[v]=scc_cnt;\n\t\t\tw[scc_cnt]+=val[v];\n\t\t\tinstack[v]=false;\n\t\t}while (v!=u);\n\t}\n}\n\ninline void rebuild(int n)\n{\n\tfor (int u=1;u<=n;++u)\n\t\tfor (int i=old.head[u];i;i=old.edge[i].next)\n\t\t\tif (belong[u]!=belong[old.edge[i].to])\n\t\t\t\tdag.add(belong[u],belong[old.edge[i].to]);\n}\n\ninline void work(int n)\n{\n\tfor (int i=1;i<=n;++i)\n\t\tif (!dfn[i]) tarjan(i);\n}\n```\n\n\n\n## 2-SAT\n\n```cpp\ninline void tarjan(int u)\n{\n\tdfn[u]=low[u]=++idx;\n\tinstack[u]=true;\n\tstk[++top]=u;\n\tfor (int i=head[u];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif (instack[v]) low[u]=min(low[u],dfn[v]);\n\t\t\telse if (!dfn[v])\n\t\t\t\ttarjan(v),low[u]=min(low[u],low[v]);\n\t}\n\tif (dfn[u]==low[u])\n\t{\n\t\tint v;++scc_cnt;\n\t\tdo\n\t\t{\n\t\t\tv=stk[top--];\n\t\t\tbelong[v]=scc_cnt;\n\t\t\tinstack[v]=false;\n\t\t}while (v!=u);\n\t}\n}\n\ninline bool twosat(int n)\n{\n\tfor (int i=1;i<=n<<1;++i)\n\t\tif (!dfn[i]) tarjan(i);\n\tfor (int i=1;i<=n;++i)\n\t\tif (belong[i]==belong[i+n]) return false;\n\treturn true;\n}\n```\n\n\n\n# 数据结构\n\n## ST表\n\n```cpp\ninline void prework(int n)\n{\n\tfor (rint j=1;(1<<j)<=n;++j)\n\t\tfor (rint i=1;(i+(1<<j)-1)<=n;++i)\n\t\t\td[i][j]=max(d[i][j-1],d[i+(1<<(j-1))][j-1]);\n}\n\ninline int query(int i,int j)\n{\n\tint k=0,len=j-i+1;\n\twhile (1<<(k+1)<=len)++k;\n\treturn max(d[i][k],d[j-(1<<k)+1][k]);\n}\n```\n\n \n\n## 线段树2\n\n```cpp\nvoid build(int l,int r,int o)\n{\n\tmul[o]=1;\n\tif (l==r)\n\t{\n\t\tscanf(\"%lld\",sumv+o);\n\t\treturn;\n\t}\n\tint m=(l+r)>>1;\n\tbuild(ls);build(rs);\n\tpushup(o);\n}\n\ninline void pushdown(int o,int len)\n{\n\tsumv[o<<1]=(sumv[o<<1]*mul[o]+addv[o]*(len-(len>>1)))%p;\n\tsumv[o<<1|1]=(sumv[o<<1|1]*mul[o]+addv[o]*(len>>1))%p;\n\tmul[o<<1]=mul[o<<1]*mul[o]%p;\n\tmul[o<<1|1]=mul[o<<1|1]*mul[o]%p;\n\taddv[o<<1]=(addv[o<<1]*mul[o]+addv[o])%p;\n\taddv[o<<1|1]=(addv[o<<1|1]*mul[o]+addv[o])%p;\n\taddv[o]=0;mul[o]=1;\n}\n\nvoid multiplicate(int L,int R,int c,int l,int r,int o)\n{\n\tif (L<=l && R>=r)\n\t{\n\t\tmul[o]=mul[o]*c%p;\n\t\taddv[o]=addv[o]*c%p;\n\t\tsumv[o]=sumv[o]*c%p;\n\t\treturn;\n\t}\n\tpushdown(o,r-l+1);\n\tint m=(l+r)>>1;\n\tif (L<=m) multiplicate(L,R,c,ls);\n\tif (R>m)  multiplicate(L,R,c,rs);\n\tpushup(o);\n}\n\nvoid add(int L,int R,int c,int l,int r,int o)\n{\n\tif (L<=l && R>=r)\n\t{\n\t\taddv[o]=(addv[o]+c)%p;\n\t\tsumv[o]=(sumv[o]+c*(r-l+1))%p;\n\t\treturn;\n\t}\n\tpushdown(o,r-l+1);\n\tint m=(l+r)>>1;\n\tif (L<=m) add(L,R,c,ls);\n\tif (R>m)  add(L,R,c,rs);\n\tpushup(o);\n}\n\nlong long Querysum(int L,int R,int l,int r,int o)\n{\n\tif (L<=l && R>=r) return sumv[o]%p;\n\tpushdown(o,r-l+1);\n\tint m=(l+r)>>1;\n\tlong long tot=0;\n\tif (L<=m) tot=(tot+Querysum(L,R,ls))%p;\n\tif (R>m)  tot=(tot+Querysum(L,R,rs))%p;\n\tpushup(o);\n\treturn tot;\n}\n```\n\n\n\n## 左偏树\n\n```cpp\ninline int merge(int x,int y)\n{\n\tif (!x || !y) return x+y;\n\tif (val[x]>val[y] || (val[x]==val[y] && x>y))\n\t\tswap(x,y);\n\trs(x)=merge(rs(x),y);\n\tfa[rs(x)]=x;\n\tif (dis[rs(x)]>dis[ls(x)]) swap(ls(x),rs(x));\n\tdis[x]=dis[rs(x)]+1;\n\treturn x;\n}\n\ninline int findroot(int x)\n{\n\twhile (fa[x]) x=fa[x];\n\treturn x;\n}\n\ninline int pop(int x)\n{\n\tint ret=val[x];\n\tfa[ls(x)]=fa[rs(x)]=0;\n\tval[x]=-1;\n\tmerge(ls(x),rs(x));\n\tls(x)=rs(x)=0;\n\treturn ret;\n}\n```\n\n\n\n## 主席树\n\n```cpp\ninline void insert(int x,int &rt,int oldrt,int l,int r)\n{\n    rt=++num;\n    tree[rt]=tree[oldrt];\n    ++tree[rt].sumv;\n    if (l==r) return;\n    int m=(l+r)>>1;\n    if (x<=m) insert(x,tree[rt].ls,tree[oldrt].ls,l,m);\n        else insert(x,tree[rt].rs,tree[oldrt].rs,m+1,r);\n}\n\ninline int query(int x,int lrt,int rrt,int l,int r)\n{\n    if (l==r) return l;\n    int m=(l+r)>>1;\n    int k=tree[tree[rrt].ls].sumv-tree[tree[lrt].ls].sumv;\n    if (x<=k) return query(x,tree[lrt].ls,tree[rrt].ls,l,m);\n        else return query(x-k,tree[lrt].rs,tree[rrt].rs,m+1,r);\n}\n\n```\n\n\n\n## CDQ分治（三维偏序）\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n\nusing std::sort;\n\nconst int maxn=1e5+1000;\n\nstruct Tuple\n{\n    int a,b,c,cnt,ans;\n    bool operator< (const Tuple& Tp) const \n    {\n        if (a!=Tp.a) return a<Tp.a;\n        if (b!=Tp.b) return b<Tp.b;\n        return c<Tp.c;\n    }\n    bool operator!= (const Tuple& Tp)\n    {\n        return a!=Tp.a || b!=Tp.b || c!=Tp.c;\n    }\n}tmp[maxn],a[maxn];\n\nstruct cmp\n{\n    bool operator() (const Tuple& a,const Tuple& b)\n    {\n        if (a.b!=b.b) return a.b<b.b;\n        return a.c<b.c;\n    }\n};\n\nint c[maxn*2],n,k;\n\ninline void update(int x,int y)\n{\n    for (int i=x;i<=k;i+=i&-i) c[i]+=y;\n}\n\ninline int query(int x)\n{\n    int ans=0;\n    for (int i=x;i;i-=i&-i) ans+=c[i];\n    return ans;\n}\n\nvoid solve(int l,int r)\n{\n    if (l==r) return;\n    int mid=(l+r)>>1;\n    solve(l,mid);solve(mid+1,r);\n    sort(a+l,a+mid+1,cmp());sort(a+mid+1,a+r+1,cmp());\n    for (int t1=l,t2=mid+1;t2<=r;++t2)\n    {\n        while (a[t1].b<=a[t2].b && t1<=mid) update(a[t1].c,a[t1].cnt),++t1;\n        a[t2].ans+=query(a[t2].c);\n    }\n    for (int i=l;i<=mid;++i) \n        if (a[i].b<=a[r].b) update(a[i].c,-a[i].cnt);\n            else break;\n    // memset(c,0,sizeof(c));\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&k);\n    for (int i=1;i<=n;++i) \n        scanf(\"%d%d%d\",&tmp[i].a,&tmp[i].b,&tmp[i].c);\n    std::sort(tmp+1,tmp+n+1);\n    int tot;a[tot=1]=tmp[1];a[1].cnt=1;\n    for (int i=2;i<=n;++i)\n        if (tmp[i]!=tmp[i-1]) a[++tot]=tmp[i],a[tot].cnt=1;\n            else ++a[tot].cnt;\n    solve(1,tot);\n    // for (int i=1;i<=tot;++i) printf(\"%d \",a[i].ans);\n    static int ans[maxn];\n    for (int i=1;i<=tot;++i) ans[a[i].ans+a[i].cnt-1]+=a[i].cnt;\n    for (int i=0;i<n;++i) printf(\"%d\\n\",ans[i]);\n}\n```\n\n\n\n## 点分治\n\n```cpp\nvoid getroot(int u,int fa)\n{\n    mxsiz[u]=0;siz[u]=1;\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (vis[v] || v==fa) continue;\n        getroot(v,u);\n        siz[u]+=siz[v];\n        mxsiz[u]=max(mxsiz[u],siz[v]);\n    }\n    mxsiz[u]=max(mxsiz[u],S-siz[u]);\n    if (mxsiz[u]<mxsiz[root]) root=u;\n}\n\nvoid getdis(int u,int fa,int d)\n{\n    tmp[++cnt]=d;\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (vis[v] || v==fa) continue;\n        getdis(v,u,d+edge[i].w);\n    }\n}\n\nvoid getans(int opt)\n{\n    sort(tmp+1,tmp+cnt+1);\n    for (int u=1;u<=cnt;++u)\n    {\n        for (int t=1;t<=m;++t)\n        {\n            pair<int*,int*> p=equal_range(tmp+1,tmp+cnt+1,query[t]-tmp[u]);\n            if (p.second!=p.first) count[t]+=opt*(p.second-p.first);\n            // assert(p.second==p.first);\n        }\n    }\n}\n\nvoid solve(int u)\n{\n    vis[u]=1;\n    getdis(u,cnt=0,0);\n    getans(1);\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (vis[v]) continue;\n        getdis(v,cnt=0,edge[i].w);\n        getans(-1);\n        mxsiz[root=0]=0x3f3f3f3f;\n        S=siz[v];\n        getroot(v,0);\n        solve(v);\n    }\n}\n```\n\n## 笛卡尔树(Luogu P3793)\n```cpp\n#include <cstdio>\n\ntypedef long long unsigned int uint64_t;\n\nnamespace GenHelper\n{\n    unsigned z1,z2,z3,z4,b;\n    unsigned rand_()\n    {\n        b=((z1<<6)^z1)>>13;\n        z1=((z1&4294967294U)<<18)^b;\n        b=((z2<<2)^z2)>>27;\n        z2=((z2&4294967288U)<<2)^b;\n        b=((z3<<13)^z3)>>21;\n        z3=((z3&4294967280U)<<7)^b;\n        b=((z4<<3)^z4)>>12;\n        z4=((z4&4294967168U)<<13)^b;\n        return (z1^z2^z3^z4);\n    }\n}\n\nvoid srand(unsigned x)\n{\n    using namespace GenHelper;\n    z1=x; \n    z2=(~x)^0x233333333U; \n    z3=x^0x1234598766U; \n    z4=(~x)+51;\n}\n\nint read()\n{\n    using namespace GenHelper;\n    int a=rand_()&32767;\n    int b=rand_()&32767;\n    return a*32768+b;\n}\n\nconst int maxn=2e7+1000;\nconst int INF=0x7fffffff;\n\nint a[maxn],ls[maxn],rs[maxn],root;\n\ninline void init(int n)\n{\n    static int stack[maxn];\n    int top=0;\n    a[0]=-INF;\n    for (int i=1;i<=n;++i)\n    {\n        while (top && a[stack[top]]<=a[i]) ls[i]=stack[top--];\n        rs[stack[top]]=i;\n        stack[++top]=i;\n    }\n    root=stack[1];\n}\n\ninline uint64_t query(int l,int r)\n{\n    for (int x=root;;x=x<l?rs[x]:ls[x])\n        if (x>=l && x<=r) return a[x];\n}\n\nint main()\n{\n    int n,m,s;\n    scanf(\"%d%d%d\",&n,&m,&s);\n    srand(s);\n    for (int i=1;i<=n;++i) a[i]=read();\n    uint64_t ans=0;int l,r;\n    init(n);\n    for (int i=1;i<=m;++i)\n    {\n        l=read()%n+1;\n        r=read()%n+1;\n        ans+=l>r?query(r,l):query(l,r);\n    }\n    printf(\"%llu\",ans);\n}\n```\n\n## 树链剖分(LOJ模板题，带换根)\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define ls l,m,o<<1\n#define rs m+1,r,o<<1|1\n\ntypedef long long ll;\n\nconst int maxn=1e5+1000;\n\nint val[maxn],top[maxn],fa[maxn],siz[maxn],son[maxn];\nint f[maxn][30],depth[maxn],head[maxn],cnt,root,id[maxn],w[maxn];\nll sumv[maxn<<2],addv[maxn<<2],tot,n;\n\nstruct Edge\n{\n    int to,next;\n}edge[maxn<<1];\n\ninline void _add(int u,int v)\n{\n    edge[++cnt].next=head[u];\n    edge[cnt].to=v;\n    head[u]=cnt;\n}\n\ninline void add(int u,int v)\n{\n    _add(u,v);_add(v,u);\n}\n\nvoid dfs(int u,int fa,int dep)\n{\n    depth[u]=dep;\n    ::fa[u]=fa;\n    siz[u]=1;int maxs=-1;\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=fa)\n        {\n            dfs(v,u,dep+1);\n            siz[u]+=siz[v];\n            if (siz[v]>maxs) son[u]=v,maxs=siz[v];\n        }\n    }\n}\n\nvoid dfs(int u,int topf)\n{\n    id[u]=++tot;\n    w[tot]=val[u];\n    top[u]=topf;\n    if (!son[u]) return;\n    dfs(son[u],topf);\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=fa[u] && v!=son[u]) dfs(v,v);\n    }\n}\n\ninline void pushup(int o){sumv[o]=sumv[o<<1]+sumv[o<<1|1];}\n\ninline void pushdown(int o,int len)\n{\n    addv[o<<1]+=addv[o];\n    addv[o<<1|1]+=addv[o];\n    sumv[o<<1]+=addv[o]*(len-(len>>1));\n    sumv[o<<1|1]+=addv[o]*(len>>1);\n    addv[o]=0;\n}\n\nvoid build(int l,int r,int o)\n{\n    if (l==r) {sumv[o]=w[l];return;}\n    int m=(l+r)>>1;\n    build(ls);build(rs);\n    pushup(o);\n}\n\nvoid update(int L,int R,int c,int l,int r,int o)\n{\n    if (L<=l && R>=r)\n    {\n        addv[o]+=c;\n        sumv[o]+=c*(r-l+1);\n        return;\n    }\n    pushdown(o,r-l+1);\n    int m=(l+r)>>1;\n    if (L<=m) update(L,R,c,ls);\n    if (R> m) update(L,R,c,rs);\n    pushup(o);\n}\n\nll query(int L,int R,int l,int r,int o)\n{\n    if (L<=l && R>=r) return sumv[o];\n    int m=(l+r)>>1;\n    pushdown(o,r-l+1);\n    ll tot=0;\n    if (L<=m) tot+=query(L,R,ls);\n    if (R> m) tot+=query(L,R,rs);\n    return tot;\n}\n\ninline void AddRoute(int u,int v,int k)\n{\n    while (top[u]!=top[v])\n    {\n        if (depth[top[u]]<depth[top[v]]) u^=v^=u^=v;\n        update(id[top[u]],id[u],k,1,n,1);\n        u=fa[top[u]];\n    }\n    if (depth[u]>depth[v]) u^=v^=u^=v;\n    update(id[u],id[v],k,1,n,1);\n}\n\ninline ll QueryRoute(int u,int v)\n{\n    ll ans=0;\n    while (top[u]!=top[v])\n    {\n        if (depth[top[u]]<depth[top[v]]) u^=v^=u^=v;\n        ans+=query(id[top[u]],id[u],1,n,1);\n        u=fa[top[u]];\n    }\n    if (depth[u]>depth[v]) u^=v^=u^=v;\n    ans+=query(id[u],id[v],1,n,1);\n    return ans;\n}\n\ninline int lca(int u,int v)\n{\n    while (top[u]!=top[v])\n    {\n        if (depth[top[u]]<depth[top[v]]) u^=v^=u^=v;\n        u=fa[top[u]];\n    }\n    return depth[u]>depth[v]?v:u;\n}\n\ninline int get_son(int u,int prec)\n{\n    for (int i=20;~i;--i)\n        if (depth[f[u][i]]>depth[prec]) u=f[u][i];\n    return u;\n}\n\ninline void AddSubTree(int u,int k)\n{\n    if (u==root) update(1,n,k,1,n,1);\n    else if (lca(u,root)!=u)\n        update(id[u],id[u]+siz[u]-1,k,1,n,1);\n    else\n    {\n        update(1,n,k,1,n,1);\n        int v=get_son(root,u);\n        update(id[v],id[v]+siz[v]-1,-k,1,n,1);\n    }\n}\n\ninline ll QuerySubTree(int u)\n{\n    if (u==root) return query(1,n,1,n,1);\n    else if (lca(u,root)!=u)\n        return query(id[u],id[u]+siz[u]-1,1,n,1);\n    else\n    {\n        int v=get_son(root,u);\n        return query(1,n,1,n,1)-query(id[v],id[v]+siz[v]-1,1,n,1);\n    }\n        // return query(1,n,1,n,1)-query(id[u]+1,id[u]+siz[u]-1,1,n,1);\n        // // else return query(1,n,1,n,1);\n}\n\ninline void get_anc()\n{\n    for (int i=1;i<=n;++i) f[i][0]=fa[i];\n    for (int i=1;i<=20;++i)\n        for (int u=1;u<=n;++u)\n            f[u][i]=f[f[u][i-1]][i-1];\n}\n\nint main()\n{\n    // freopen(\"tree2.in\",\"r\",stdin);\n    // freopen(\"tree20.out\",\"w\",stdout);\n    int m;\n    scanf(\"%d\",&n);root=1;\n    for (int i=1;i<=n;++i) scanf(\"%d\",val+i);\n    for (int i=1,tmp;i<n;++i) scanf(\"%d\",&tmp),add(tmp,i+1);\n    dfs(1,0,1);dfs(1,1);build(1,n,1);get_anc();\n    scanf(\"%d\",&m);\n    for (int i=1,opt,u,v,k;i<=m;++i)\n    {\n        scanf(\"%d\",&opt);\n        switch (opt)\n        {\n            case 1:scanf(\"%d\",&root);break;\n            case 2:scanf(\"%d%d%d\",&u,&v,&k);AddRoute(u,v,k);break;\n            case 3:scanf(\"%d%d\",&u,&k);AddSubTree(u,k);break;\n            case 4:scanf(\"%d%d\",&u,&v);printf(\"%lld\\n\",QueryRoute(u,v));break;\n            case 5:scanf(\"%d\",&u);printf(\"%lld\\n\",QuerySubTree(u));break;\n        }\n    }\n}\n```\n\n\n\n## LCT\n\n```cpp\n#include <cstdio>\n#define ls(x) (ch[x][0])\n#define rs(x) (ch[x][1])\n\nconst int maxn=3e5+1000;\n\nint val[maxn],ch[maxn][2],fa[maxn],rev[maxn],s[maxn];\n\ninline void swap(int &a,int &b){a^=b^=a^=b;}\ninline bool nroot(int x){return ls(fa[x])==x || rs(fa[x])==x;}\ninline void pushup(int x){s[x]=s[ls(x)]^s[rs(x)]^val[x];}\n\ninline void pushr(int x)\n{\n    swap(ls(x),rs(x));rev[x]^=1;\n}\n\ninline void pushdown(int x)\n{\n    if (rev[x]) pushr(ls(x)),pushr(rs(x)),rev[x]=0;\n}\n\ninline void rotate(int x)\n{\n    int y=fa[x],z=fa[y],k=ch[y][1]==x;\n    if (nroot(y)) ch[z][ch[z][1]==y]=x;\n    fa[x]=z;\n    ch[y][k]=ch[x][k^1];\n    if (ch[x][k^1]) fa[ch[x][k^1]]=y;\n    ch[x][k^1]=y;\n    fa[y]=x;\n    pushup(y);pushup(x);\n}\n\ninline void splay(int x)\n{\n    static int stack[maxn];\n    int y=x,z=0;\n    while (nroot(y)) stack[++z]=y,y=fa[y];\n    stack[++z]=y;\n    while (z) pushdown(stack[z--]);\n    while (nroot(x))\n    {\n        y=fa[x],z=fa[y];\n        if (nroot(y)) rotate(((ls(z)==y)^(ls(y)==x))?x:y);\n        rotate(x);\n    }\n}\n\ninline void access(int x)\n{\n    for (int y=0;x;y=x,x=fa[x])\n        splay(x),ch[x][1]=y,pushup(x);\n}\n\ninline void makeroot(int x)\n{\n    access(x);splay(x);pushr(x);\n}\n\ninline int findroot(int x)\n{\n    access(x);\n    splay(x);\n    while (ls(x)) pushdown(x),x=ls(x);// 这里一定记得pushdown!\n    splay(x);\n    return x;\n}\n\ninline void link(int x,int y)\n{\n    makeroot(x);\n    if (findroot(y)!=x) fa[x]=y;\n}\n\ninline void cut(int x,int y)\n{\n    makeroot(x);\n    if (findroot(y)==x && fa[y]==x && !ch[y][0]) ch[x][1]=fa[y]=0,pushup(x);\n}\n\ninline void modify(int x,int y)\n{\n    splay(x);\n    s[x]^=val[x];\n    val[x]=y;\n    s[x]^=val[x];\n}\n\ninline void split(int x,int y)\n{\n    makeroot(x);access(y);splay(y);\n}\n\ninline int query(int x,int y){split(x,y);return s[y];}\n\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;++i)\n        scanf(\"%d\",val+i);\n    for (int i=1,opt,x,y;i<=m;++i)\n    {\n        scanf(\"%d%d%d\",&opt,&x,&y);\n        switch (opt)\n        {\n            case 0:printf(\"%d\\n\",query(x,y));break;\n            case 1:link(x,y);break;\n            case 2:cut(x,y);break;\n            case 3:modify(x,y);break;\n        }\n    }\n}\n```\n\n## K-D Tree\n```cpp\n#include <cstdio>\n#include <algorithm>\n\nusing std::nth_element;\nusing std::min;\nusing std::max;\n\nconst int maxn=1e6+100;\nconst int INF=0x3f3f3f3f;\n\nstruct Point\n{\n    int x,y;\n    Point(){}\n    Point(int x,int y):x(x),y(y){}\n};\n\nstruct KDTree\n{\n    static constexpr double alpha=0.75;\n    int root;\n    struct Node\n    {\n        int val,siz,sum;\n        int ch[2];\n        Point mn,mx,now;\n    }t[maxn];\n    int top,has_rebuild,fa_rebuild,k_rebuild;\n    KDTree(){t[0].mn=Point(INF,INF);t[0].mx=Point(-INF,-INF);}\n    int trash[maxn],Trash;\n    inline bool isbad(int o){return t[t[o].ch[0]].siz>t[o].siz*alpha || t[t[o].ch[1]].siz>t[o].siz*alpha;}\n    inline void pushup(int o)\n    {\n        t[o].siz=t[t[o].ch[0]].siz+t[t[o].ch[1]].siz+1;\n        t[o].sum=t[t[o].ch[0]].sum+t[t[o].ch[1]].sum+t[o].val;\n        t[o].mn.x=min({t[o].now.x,t[t[o].ch[0]].mn.x,t[t[o].ch[1]].mn.x});\n        t[o].mn.y=min({t[o].now.y,t[t[o].ch[0]].mn.y,t[t[o].ch[1]].mn.y});\n        t[o].mx.y=max({t[o].now.y,t[t[o].ch[0]].mx.y,t[t[o].ch[1]].mx.y});\n        t[o].mx.x=max({t[o].now.x,t[t[o].ch[0]].mx.x,t[t[o].ch[1]].mx.x});\n    }\n    inline void dfs(int o)\n    {\n        if (!o) return;\n        if (t[o].ch[0]) dfs(t[o].ch[0]);\n        trash[++Trash]=o;\n        if (t[o].ch[1]) dfs(t[o].ch[1]);\n    }\n    inline int _rebuild(int l,int r,int k)\n    {\n        if (l>r) return 0;\n        int mid=(l+r)>>1;\n        int x=trash[mid];\n        if (l==r) \n        {\n            t[x].ch[0]=t[x].ch[1]=0;\n            t[x].mn=t[x].mx=t[x].now;\n            t[x].siz=1;\n            t[x].sum=t[x].val;\n            return x;\n        }\n        if (k==1) nth_element(trash+l,trash+mid+1,trash+r+1,[this](const int x,const int y) ->bool {return t[x].now.x<t[y].now.x;});\n        else nth_element(trash+l,trash+mid+1,trash+r+1,[this](const int x,const int y) ->bool {return t[x].now.y<t[y].now.y;});\n        x=trash[mid];\n        t[x].ch[0]=_rebuild(l,mid-1,k^1);\n        t[x].ch[1]=_rebuild(mid+1,r,k^1);\n        pushup(x);\n        return x;\n    }\n    inline int rebuild(int o,int k)\n    {\n        Trash=0;\n        dfs(o);\n        if (Trash) return _rebuild(1,Trash,k);\n        return 0;\n    }\n    void _insert(const Point& p,const int x,int& o,int k)\n    {\n        if (!o)\n        {\n            o=++top;\n            t[o].sum=t[o].val=x;\n            t[o].mn=t[o].mx=t[o].now=p;\n            t[o].siz=1;\n            return;\n        }\n        if (k&1) _insert(p,x,t[o].ch[t[o].now.x<=p.x],0);\n        else _insert(p,x,t[o].ch[t[o].now.y<=p.y],1);\n        pushup(o);\n        if (isbad(t[o].ch[0])) has_rebuild=t[o].ch[0],fa_rebuild=o,k_rebuild=k^1;\n        else if (isbad(t[o].ch[1])) has_rebuild=t[o].ch[1],fa_rebuild=o,k_rebuild=k^1;\n    }\n    inline void insert(const Point& p,const int x)\n    {\n        _insert(p,x,root,0);\n        if (isbad(root)) root=rebuild(root,0);\n        else if (has_rebuild) t[fa_rebuild].ch[t[fa_rebuild].ch[1]==has_rebuild]=rebuild(has_rebuild,k_rebuild);\n        has_rebuild=fa_rebuild=k_rebuild=0;\n    }\n    inline bool check_range(int o,const Point& l,const Point& r)\n    {\n        return t[o].mn.x>=l.x && t[o].mn.y>=l.y && t[o].mx.x<=r.x && t[o].mx.y<=r.y;\n    }\n    inline bool check_point(int o,const Point& l,const Point& r)\n    {\n        return (t[o].now.x>=l.x && t[o].now.x<=r.x) && (t[o].now.y>=l.y && t[o].now.y<=r.y);\n    }\n    inline bool check_have(int o,const Point& l,const Point& r)\n    {\n        return !((t[o].mx.x<l.x) || (t[o].mx.y<l.y) || (t[o].mn.x>r.x) || (t[o].mn.y>r.y));\n    }\n    inline int query(const Point& l,const Point& r,int o)\n    {\n        if (!o) return 0;\n        if (check_range(o,l,r)) return t[o].sum;\n        int ans=0;\n        if (check_point(o,l,r)) ans+=t[o].val;\n        if (check_have(t[o].ch[0],l,r)) ans+=query(l,r,t[o].ch[0]);\n        if (check_have(t[o].ch[1],l,r)) ans+=query(l,r,t[o].ch[1]);\n        return ans;\n    }\n}T;\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    int opt,x,lastans=0;\n    Point a,b;\n    while (scanf(\"%d\",&opt) && opt!=3 && \"STO LCH OTZ\")\n    {\n        if (opt==1)\n        {\n            scanf(\"%d%d%d\",&a.x,&a.y,&x);\n            a.x^=lastans;a.y^=lastans;x^=lastans;\n            T.insert(a,x);\n        }\n        else\n        {\n            scanf(\"%d%d%d%d\",&a.x,&a.y,&b.x,&b.y);\n            a.x^=lastans;a.y^=lastans;b.x^=lastans;b.y^=lastans;\n            printf(\"%d\\n\",lastans=T.query(a,b,T.root));\n        }\n    }\n}\n```\n\n## 平衡树\n\n### Treap\n\n```cpp\nstruct Treap\n{\n    struct Node\n    {\n    \tint v,s,r,cnt;\n    \tNode* ch[2];\n    \tNode(int v,int s=1):s(s),cnt(s),r(rand()*rand()),v(v){ch[0]=ch[1]=0;}\n    \tinline void pushup()\n    \t{\n    \t\ts=cnt;\n    \t\tif (ch[0]) s+=ch[0]->s;\n    \t\tif (ch[1]) s+=ch[1]->s;\n    \t}\n    \tinline int cmp(int x)\n    \t{\n    \t\treturn v==x?-1:v<x;\n    \t}\n    };\n\tprivate:\n\t\tint __prec,__succ;\n\tpublic:\n\t\tTreap():__prec(0),__succ(0),root(0){}\n\t\tNode *root;\n\t\tinline void rotate(Node* &o,int d)\n\t\t{\n\t\t\tNode *k=o->ch[d^1];\n\t\t\to->ch[d^1]=k->ch[d];\n\t\t\tk->ch[d]=o;\n\t\t\to->pushup();\n\t\t\tk->pushup();\n\t\t\to=k;\n\t\t}\n\t\n\t\tinline void _insert(Node* &o,int x,int t=1)\n\t\t{\n\t\t\tif (!o){o=new Node(x,t);return;}\n\t\t\tint d=o->cmp(x);\n\t\t\tif (d==-1) {o->cnt+=t;o->s+=t;return;}\n\t\t\t_insert(o->ch[d],x,t);\n\t\t\tif (o->ch[d]->r > o->r) rotate(o,d^1);\n\t\t\to->pushup();\n\t\t}\n\t\tinline void insert(int x,int k=1){_insert(root,x,k);}\n\t\n\t\tinline void _remove(Node* &o,int x)\n\t\t{\n\t\t\tif (!o) return;\n\t\t\tint d=o->cmp(x);\n\t\t\tif (d==-1) \n\t\t\t{\n\t\t\t\tif (o->cnt>1) {--o->cnt;--o->s;return;}\n\t\t\t\tif (!(o->ch[0])){Node* k=o;o=o->ch[1];delete k;return;}\n\t\t\t\telse if (!(o->ch[1])){Node* k=o;o=o->ch[0];delete k;return;}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tint d2=(o->ch[0]->r > o->ch[1]->r);\n\t\t\t\t\trotate(o,d2);\n\t\t\t\t\t_remove(o->ch[d2],x);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse _remove(o->ch[d],x);\n\t\t\tif (o) o->pushup();\n\t\t}\n\t\tinline void remove(int x){_remove(root,x);}\n\t\n\t\tinline int _kth(Node* o,int k)\n\t\t{\n\t\t\tif (!o || k<=0) return INT_MIN;\n\t\t\tint s=o->ch[0]?o->ch[0]->s:0;\n\t\t\tif (k>=s+1 && k<=s+o->cnt) return o->v;\n\t\t\tif (k<=s) return _kth(o->ch[0],k);\n\t\t\treturn _kth(o->ch[1],k-s-o->cnt);\n\t\t}\n\t\tinline int kth(int k){return _kth(root,k);}\n\t\n\t\tinline int _rank(Node* o,int x)\n\t\t{\n\t\t\tif (!o) return 1;\n\t\t\tint s=o->ch[0]?o->ch[0]->s:0;\n\t\t\tif (o->v==x) return s+1;\n\t\t\tif (o->v<x) return s+o->cnt+_rank(o->ch[1],x);\n\t\t\treturn _rank(o->ch[0],x);\n\t\t}\n\t\tinline int rank(int x){return _rank(root,x);}\n\t\t\n\t\tinline int _count(Node* o,int x)\n\t\t{\n\t\t\tif (!o) return 0;\n\t\t\tint d=o->cmp(x);\n\t\t\tif (~d) return _count(o->ch[d],x);\n\t\t\treturn o->cnt;\n\t\t}\n\t\tinline int count(int x){return _count(root,x);}\n\t\n\t\tinline void _prec(Node* o,int x)\n\t\t{\n\t\t\tif (!o) return;\n\t\t\tif (o->v<x) __prec=max(__prec,o->v);\n\t\t\tif (o->v>=x) _prec(o->ch[0],x);\n\t\t\t\telse _prec(o->ch[1],x);\n\t\t}\n\t\tinline void _succ(Node* o,int x)\n\t\t{\n\t\t\tif (!o) return;\n\t\t\tif (o->v>x) __succ=min(__succ,o->v);\n\t\t\tif (o->v<=x) _succ(o->ch[1],x);\n\t\t\t\telse _succ(o->ch[0],x);\n\t\t}\n\t\tinline int prec(int x){__prec=INT_MIN+1;_prec(root,x);return __prec;}\n\t\tinline int succ(int x){__succ=INT_MAX  ;_succ(root,x);return __succ;}\n}T;\n```\n\n### 替罪羊树\n```cpp\n#include <cstdio>\n#include <vector>\n#include <cassert>\n\nusing std::vector;\n\nconst int maxn=1e5+1000;\n\nstruct Scapegoat_Tree\n{\n    int root,has_rebuild,fa;\n#if __cplusplus >= 201103L\n    static constexpr double alpha=0.75;\n#else \n    static const double alpha=0.75;\n#endif\n    struct Node\n    {\n        int siz,cnt,val;\n        bool deleted;\n        int ch[2];\n    }t[maxn];\n    inline bool isbad(int x){return t[t[x].ch[0]].cnt>t[x].cnt*alpha || t[t[x].ch[1]].cnt>t[x].cnt*alpha;}\n    inline void maintain(int x){t[x].siz=t[t[x].ch[0]].siz+t[t[x].ch[1]].siz+!t[x].deleted;t[x].cnt=t[t[x].ch[0]].cnt+t[t[x].ch[1]].cnt+1;}\n    int pool[maxn],top;\n    vector<int> tmp;\n    Scapegoat_Tree(){for (int i=1;i<maxn;++i) pool[++top]=i;}\n    void dfs(int o)\n    {\n        if (t[o].ch[0]) dfs(t[o].ch[0]);\n        if (!t[o].deleted) tmp.push_back(o);\n        else pool[++top]=o;\n        if (t[o].ch[1]) dfs(t[o].ch[1]);\n    }\n    int _rebuild(int l,int r)\n    {\n        if (l>r) return 0;\n        int mid=(l+r)>>1,o=tmp[mid];\n        if (l==r) t[o].siz=t[o].cnt=1;\n        t[o].ch[0]=_rebuild(l,mid-1);\n        t[o].ch[1]=_rebuild(mid+1,r);\n        maintain(o);\n        return o;\n    }\n    int rebuild(int o)\n    {\n        tmp.clear();\n        dfs(o);\n        return _rebuild(0,tmp.size()-1);\n    }\n    void _insert(int x,int &o)\n    {\n        if (!o)\n        {\n            o=pool[top--];\n            t[o].siz=t[o].cnt=1;\n            t[o].val=x;\n            t[o].deleted=false;\n            t[o].ch[0]=t[o].ch[1]=0;\n            return;\n        }\n        ++t[o].siz;++t[o].cnt;\n        int d=(t[o].val<=x);\n        _insert(x,t[o].ch[d]);\n        // if (isbad(o)) o=rebuild(o);//need repair?\n        if (isbad(t[o].ch[0])) has_rebuild=t[o].ch[0],fa=o;\n        else if (isbad(t[o].ch[1])) has_rebuild=t[o].ch[1],fa=o;\n        // maintain(o);\n    }\n    void insert(int x) \n    {\n        _insert(x,root);\n        if (has_rebuild) t[fa].ch[t[fa].ch[1]==has_rebuild]=rebuild(has_rebuild);\n        fa=has_rebuild=0;\n    }\n    void _remove_kth(int x,int o)\n    {\n        if (t[t[o].ch[0]].siz+1==x && !t[o].deleted)\n        {\n            t[o].deleted=true;\n            t[o].siz--;\n            return;\n        }\n        --t[o].siz;\n        if (t[t[o].ch[0]].siz>=x) _remove_kth(x,t[o].ch[0]);\n        else _remove_kth(x-t[t[o].ch[0]].siz-!t[o].deleted,t[o].ch[1]);\n        // maintain(o);\n    }\n    void remove_kth(int x)\n    {\n        _remove_kth(x,root);\n        if (t[root].cnt*alpha>t[root].siz) root=rebuild(root);\n        fa=has_rebuild=0;\n    }\n    int rank(int x)\n    {\n        int ans=1;\n        int o=root;\n        while (o)\n            if (t[o].val>=x) o=t[o].ch[0];\n            else ans+=t[t[o].ch[0]].siz+!t[o].deleted,o=t[o].ch[1]; \n        return ans;\n    }\n    int kth(int k)\n    {\n        int o=root;\n        while (1)\n        {\n            int s=t[t[o].ch[0]].siz;\n            if (!t[o].deleted && s+1==k) return t[o].val;\n            if (s>=k) o=t[o].ch[0];\n            else k-=s+!t[o].deleted,o=t[o].ch[1];\n        }\n    }\n    void print(int o)\n    {\n        if (!o) return;\n        print(t[o].ch[0]);\n        // printf(\"sizls=%d sizrs=%d ,siz=%d\\n\",t[t[o].ch[0]].siz,t[t[o].ch[1]].siz,t[o].siz);\n        if (!t[o].deleted) printf(\"%d \",t[o].val);\n        print(t[o].ch[1]);\n    }\n    /* data */\n}T;\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for (int i=1,opt,x;i<=n;++i)\n    {\n        scanf(\"%d%d\",&opt,&x);\n        switch (opt)\n        {\n            case 1:\n                T.insert(x);\n                break;\n            case 2:\n                T.remove_kth(T.rank(x));\n                break;\n            case 3:\n                printf(\"%d\\n\",T.rank(x));\n                break;\n            case 4:\n                printf(\"%d\\n\",T.kth(x));\n                break;\n            case 5:\n                printf(\"%d\\n\",T.kth(T.rank(x)-1));\n                break;\n            case 6:\n                printf(\"%d\\n\",T.kth(T.rank(x+1)));\n                break;\n        }\n        // T.print(T.root);putchar('\\n');\n        // T.root=T.rebuild(T.root);\n    }\n}\n```\n\n### Splay\n\n```cpp\nstruct Splay\n{\n    int root,cnt;\n    struct Node\n    {\n        int val,size,ff,ch[2],cnt;\n    }t[maxn];\n\n    inline void pushup(int x)\n    {\n        t[x].size=t[x].cnt+t[t[x].ch[0]].size+t[t[x].ch[1]].size;\n    }\n\n    inline void rotate(int x)\n    {\n        int y=t[x].ff,z=t[y].ff;\n        int k=(t[y].ch[1]==x);\n        t[z].ch[t[z].ch[1]==y]=x;\n        t[x].ff=z;\n        t[y].ch[k]=t[x].ch[k^1];\n        t[t[x].ch[k^1]].ff=y;\n        t[y].ff=x;\n        t[x].ch[k^1]=y;\n        pushup(y);pushup(x);\n    }\n\n    inline void splay(int x,int goal)\n    {\n        while (t[x].ff!=goal)\n        {\n            int y=t[x].ff,z=t[y].ff;\n            if (z!=goal) rotate((t[z].ch[1]==y)^(t[y].ch[1]==x)?x:y);\n            rotate(x);\n        }\n        if (!goal) root=x;\n    }\n\n    inline void insert(int x)\n    {\n        int u=root,ff=0;\n        while (t[u].val!=x && u)\n        {\n            ff=u;\n            u=t[u].ch[t[u].val<x];\n        }\n        if (u) {++t[u].cnt;splay(u,0);return;}\n        u=++cnt;\n        if (ff) t[ff].ch[x>t[ff].val]=u;\n        t[u].ff=ff;\n        t[u].ch[0]=t[u].ch[1]=0;\n        t[u].size=1;\n        t[u].cnt=1;\n        t[u].val=x;\n        splay(u,0);\n    }\n\n    inline void find(int x)\n    {\n        int u=root;\n        if (!u) return;\n        while (t[u].ch[t[u].val<x] && t[u].val!=x) u=t[u].ch[t[u].val<x];\n        splay(u,0);\n    }\n\n    inline int Next(int x,int type)\n    {\n        find(x);\n        int u=root;\n        if (t[u].val>x && type) return u;\n        if (t[u].val<x && !type) return u;\n        u=t[u].ch[type];\n        while (t[u].ch[type^1])u=t[u].ch[type^1];\n        splay(u,0);\n        return u;\n    }\n\n    inline void Delete(int x)\n    {\n        int prev=Next(x,0),succ=Next(x,1);\n        splay(prev,0);splay(succ,prev);\n        int u=t[succ].ch[0];\n        if (t[u].cnt>1){--t[u].cnt;splay(u,0);return;}\n            else t[succ].ch[0]=0;\n    }\n\n    inline int kth(int k)\n    {\n        int u=root;\n        if (t[u].size<k) return inf;\n        while (19260817)\n        {\n            int s=t[t[u].ch[0]].size;\n            if (s+t[u].cnt<k)\n                k-=s+t[u].cnt,u=t[u].ch[1];\n            else if (k<=s)\n                u=t[u].ch[0];\n            else {splay(u,0);return t[u].val;}\n        } \n    }\n}T;\n```\n\n### 权值线段树\n\n```cpp\nvoid insert(int x,int l=1,int r=n,int o=1)\n{\n    ++sumv[o];\n    if (l==r) return;\n    int m=(l+r)>>1;\n    if (x<=m) insert(x,ls);\n        else insert(x,rs);\n}\n\ninline void remove(int x,int l=1,int r=n,int o=1)\n{\n    --sumv[o];\n    if (l==r) return;\n    int m=(l+r)>>1;\n    if (x<=m) remove(x,ls);\n        else remove(x,rs);\n} \n\ninline int count(int x,int l=1,int r=n,int o=1)\n{\n    if (l==r) return sumv[o];\n    int m=(l+r)>>1;\n    if (x<=m) return count(x,ls);\n        else return count(x,rs);\n}\n\ninline int rank(int x,int l=1,int r=n,int o=1)\n{\n    if (l==r) return 1;\n    int m=(l+r)>>1;\n    if (x<=m) return rank(x,ls);\n        else return rank(x,rs)+sumv[o<<1];\n}\n\ninline int kth(int k,int l=1,int r=n,int o=1)\n{\n    if (l==r) return l;\n    int m=(l+r)>>1;\n    if (k<=sumv[o<<1]) return kth(k,ls);\n        return kth(k-sumv[o<<1],rs);\n}\n\ninline int prec(int x)\n{\n    return kth(rank(x)-1);\n}\n\ninline int succ(int x)\n{\n    return kth(rank(x)+count(x));\n}\n\ninline int get_rnk(int i)\n{\n    return lower_bound(b+1,b+n+1,i)-b;\n}\n\n```\n\n\n\n## 树套树\n\n```cpp\nstruct Node\n{\n\tint v,s,r,cnt;\n\tNode* ch[2];\n\tNode(int v,int s=1):s(s),cnt(s),r(rand()*rand()),v(v){ch[0]=ch[1]=0;}\n\tinline void pushup()\n\t{\n\t\ts=cnt;\n\t\tif (ch[0]) s+=ch[0]->s;\n\t\tif (ch[1]) s+=ch[1]->s;\n\t}\n\tinline int cmp(int x)\n\t{\n\t\treturn v==x?-1:v<x;\n\t}\n};\n\nstruct Treap\n{\n\tprivate:\n\t\tint __prec,__succ;\n\tpublic:\n\t\tTreap():__prec(0),__succ(0),root(0){}\n\t\tNode *root;\n\t\tinline void rotate(Node* &o,int d)\n\t\t{\n\t\t\tNode *k=o->ch[d^1];\n\t\t\to->ch[d^1]=k->ch[d];\n\t\t\tk->ch[d]=o;\n\t\t\to->pushup();\n\t\t\tk->pushup();\n\t\t\to=k;\n\t\t}\n\t\n\t\tinline void _insert(Node* &o,int x,int t=1)\n\t\t{\n\t\t\tif (!o){o=new Node(x,t);return;}\n\t\t\tint d=o->cmp(x);\n\t\t\tif (d==-1) {o->cnt+=t;o->s+=t;return;}\n\t\t\t_insert(o->ch[d],x,t);\n\t\t\tif (o->ch[d]->r > o->r) rotate(o,d^1);\n\t\t\to->pushup();\n\t\t}\n\t\tinline void insert(int x,int k=1){_insert(root,x,k);}\n\t\n\t\tinline void _remove(Node* &o,int x)\n\t\t{\n\t\t\tif (!o) return;\n\t\t\tint d=o->cmp(x);\n\t\t\tif (d==-1) \n\t\t\t{\n\t\t\t\tif (o->cnt>1) {--o->cnt;--o->s;return;}\n\t\t\t\tif (!(o->ch[0])){Node* k=o;o=o->ch[1];delete k;return;}\n\t\t\t\telse if (!(o->ch[1])){Node* k=o;o=o->ch[0];delete k;return;}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tint d2=(o->ch[0]->r > o->ch[1]->r);\n\t\t\t\t\trotate(o,d2);\n\t\t\t\t\t_remove(o->ch[d2],x);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse _remove(o->ch[d],x);\n\t\t\tif (o) o->pushup();\n\t\t}\n\t\tinline void remove(int x){_remove(root,x);}\n\t\n\t\tinline int _kth(Node* o,int k)\n\t\t{\n\t\t\tif (!o || k<=0) return INT_MIN;\n\t\t\tint s=o->ch[0]?o->ch[0]->s:0;\n\t\t\tif (k>=s+1 && k<=s+o->cnt) return o->v;\n\t\t\tif (k<=s) return _kth(o->ch[0],k);\n\t\t\treturn _kth(o->ch[1],k-s-o->cnt);\n\t\t}\n\t\tinline int kth(int k){return _kth(root,k);}\n\t\n\t\tinline int _rank(Node* o,int x)\n\t\t{\n\t\t\tif (!o) return 1;\n\t\t\tint s=o->ch[0]?o->ch[0]->s:0;\n\t\t\tif (o->v==x) return s+1;\n\t\t\tif (o->v<x) return s+o->cnt+_rank(o->ch[1],x);\n\t\t\treturn _rank(o->ch[0],x);\n\t\t}\n\t\tinline int rank(int x){return _rank(root,x);}\n\t\t\n\t\tinline int _count(Node* o,int x)\n\t\t{\n\t\t\tif (!o) return 0;\n\t\t\tint d=o->cmp(x);\n\t\t\tif (~d) return _count(o->ch[d],x);\n\t\t\treturn o->cnt;\n\t\t}\n\t\tinline int count(int x){return _count(root,x);}\n\t\n\t\tinline void _prec(Node* o,int x)\n\t\t{\n\t\t\tif (!o) return;\n\t\t\tif (o->v<x) __prec=max(__prec,o->v);\n\t\t\tif (o->v>=x) _prec(o->ch[0],x);\n\t\t\t\telse _prec(o->ch[1],x);\n\t\t}\n\t\tinline void _succ(Node* o,int x)\n\t\t{\n\t\t\tif (!o) return;\n\t\t\tif (o->v>x) __succ=min(__succ,o->v);\n\t\t\tif (o->v<=x) _succ(o->ch[1],x);\n\t\t\t\telse _succ(o->ch[0],x);\n\t\t}\n\t\tinline int prec(int x){__prec=INT_MIN+1;_prec(root,x);return __prec;}\n\t\tinline int succ(int x){__succ=INT_MAX  ;_succ(root,x);return __succ;}\n}tree[maxn<<2];\n\ninline void insert_tree(Treap& t,Node* rt)\n{\n\tif (!rt) return;\n\tt.insert(rt->v,rt->cnt);\n\tinsert_tree(t,rt->ch[0]);\n\tinsert_tree(t,rt->ch[1]);\n}\n\ninline void pushup(int o)\n{\n\tinsert_tree(tree[o],tree[o<<1].root);\n\tinsert_tree(tree[o],tree[o<<1|1].root);\n}\n\ninline void build(int l,int r,int o)\n{\n\tif (l==r) {tree[o].insert(a[l]);return;}\n\tint m=(l+r)>>1;\n\tbuild(ls);\n\tbuild(rs);\n\tpushup(o);\n}\n\ninline int rank(int L,int R,int k,int l,int r,int o)\n{\n\tif (L<=l && R>=r) return tree[o].rank(k);\n\tconst int m=(l+r)>>1;\n\tint tot=0;\n\tif (L<=m) tot+=rank(L,R,k,ls);\n\tif (R> m) tot+=rank(L,R,k,rs);\n\tif (L<=m && R>m) --tot;\n\treturn tot;\n}\n\ninline int count(int L,int R,int x,int l,int r,int o)\n{\n\tif (L<=l && R>=r) return tree[o].count(x);\n\tconst int m=(l+r)>>1;\n\tint tot=0;\n\tif (L<=m) tot+=count(L,R,x,ls);\n\tif (R> m) tot+=count(L,R,x,rs);\n\treturn tot;\n}\n\ninline void update(int p,int x,int l,int r,int o)\n{\n\ttree[o].remove(a[p]);\n\ttree[o].insert(x);\n\tif (l==r) return;\n\tint m=(l+r)>>1;\n\tif (p<=m) update(p,x,ls);\n\t\telse update(p,x,rs);\n}\n\ninline int prec(int L,int R,int x,int l,int r,int o)\n{\n\tif (L<=l && R>=r) return tree[o].prec(x);\n\tint m=(l+r)>>1,ans=INT_MIN+1;\n\tif (L<=m) ans=prec(L,R,x,ls);\n\tif (R>m)  ans=max(ans,prec(L,R,x,rs));\n\treturn ans;\n}\n\ninline int succ(int L,int R,int x,int l,int r,int o)\n{\n\tif (L<=l && R>=r) return tree[o].succ(x);\n\tint m=(l+r)>>1,ans=INT_MAX;\n\tif (L<=m) ans=succ(L,R,x,ls);\n\tif (R> m) ans=min(ans,succ(L,R,x,rs));\n\treturn ans;\n}\n\ninline int kth(int L,int R,int k,int n)\n{\n\tint l=1,r=tree[1].root->s;\n\twhile (l<=r)\n\t{\n\t\tint m=(l+r)>>1;\n\t\tint t=tree[1].kth(m);\n\t\tint K=rank(L,R,t,1,n,1);\n\t\tint cnt=count(L,R,t,1,n,1);\n\t\tif (K==k && !cnt) return succ(L,R,t,1,n,1);\n\t\tif (K+cnt-1>=k && K<=k && cnt) return t;\n\t\tif (cnt)\n\t\t\tif (K+cnt-1<k) l=m+1;\n\t\t\t\telse r=m-1;\n\t\telse\n\t\t\tif (K<k) l=m+1;\n\t\t\t\telse r=m-1;\n\t}\n\treturn INT_MAX;\n}\n```\n\n## DSU ON TREE（CF600E）\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nconst int maxn=1e5+1000;\n\ntypedef long long ll;\n\nll ans[maxn],tot;\nint head[maxn],_cnt,n,mx;\nint fa[maxn],siz[maxn],son[maxn],cnt[maxn],col[maxn],isson[maxn];\n\nstruct Edge\n{\n    int to,next;\n}edge[maxn<<1];\n\ninline int max(int a,int b){return a<b?b:a;}\n\ninline void add(int u,int v)\n{\n    edge[++_cnt].next=head[u];\n    edge[_cnt].to=v;\n    head[u]=_cnt;\n}\n\nvoid dfs(int u,int f)\n{\n    fa[u]=f;\n    siz[u]=1;\n    int maxs=-1;\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=f)\n        {\n            dfs(v,u);siz[u]+=siz[v];\n            if (siz[v]>maxs) maxs=siz[v],son[u]=v;\n        } \n    }\n    if (son[u]) isson[son[u]]=true;\n}\n\nvoid AddAns(int u,int x,int Son)\n{\n    if((cnt[col[u]]+=x)>mx) mx=cnt[col[u]],tot=col[u];\n        else if(cnt[col[u]]==mx) tot+=(ll)col[u];\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=fa[u] && v!=Son) AddAns(v,x,Son);\n    }\n}\n\nvoid solve(int u,int f,int keep)\n{\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=f && v!=son[u]) solve(v,u,0);\n    }\n    if (son[u]) solve(son[u],u,1);\n    AddAns(u,1,son[u]);\n    ans[u]=tot;\n    // int t=0;\n    // for (int i=1;i<=n;++i) t=max(t,cnt[i]);\n    // for (int i=1;i<=n;++i) if (cnt[i]==t) ans[u]=ans[u]+(ll)i;\n    if (!keep) AddAns(u,-1,0),mx=tot=0;\n}\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;++i) scanf(\"%d\",col+i);\n    for (int i=1,u,v;i<n;++i)\n    {\n        scanf(\"%d%d\",&u,&v);\n        add(u,v);add(v,u);\n    }\n    dfs(1,1);\n    solve(1,0,0);\n    for (int i=1;i<=n;++i) printf(\"%lld \",ans[i]);\n}\n```\n\n\n\n## 珂朵莉树\n\n```cpp\nstruct Node\n{\n    int l,r;\n    mutable int x;\n    Node(int l,int r=-1,int x=0):l(l),r(r),x(x){}\n    bool operator< (const Node &nd) const {return l<nd.l;}\n};\n\ntypedef long long ll;\ntypedef set<Node>::iterator It;\n\nstruct Cmp\n{\n    bool operator() (const It& a,const It& b) const {return a->x<b->x;}\n};\n\nint a[maxn];\nint seed,n,m,vmax;\nset<Node> s;\n\ninline void swap(int& a,int& b){a^=b^=a^=b;}\n\ninline int Rand()\n{\n    int ret=seed;\n    seed=((ll)seed*7+13)%1000000007;\n    return ret;\n}\n\ninline void init()\n{\n    for (int i=1;i<=n;++i)\n        s.insert(Node(i,i,a[i]));\n    s.insert(Node(n+1,n+1,0));\n}\n\ninline ll pow_mod(ll a,ll b,ll p)\n{\n    ll ans=1%p;a%=p;\n    for (;b;b>>=1)\n    {\n        if (b&1) ans=ans*a%p;\n        a=a*a%p;\n    }\n    return ans;\n}\n\ninline It split(int pos)\n{\n    It it=s.lower_bound(Node(pos)); \n    if (it!=s.end() && it->l==pos) return it;\n    --it;\n    int l=it->l,r=it->r,v=it->x;\n    s.erase(it);\n    s.insert(Node(l,pos-1,v));\n    return s.insert(Node(pos,r,v)).first;\n}\n\ninline void assign(int l,int r,int x)\n{\n    It it2=split(r+1),it1=split(l);\n    s.erase(it1,it2);\n    s.insert(Node(l,r,x));\n}\n\ninline void add(int l,int r,int x)\n{\n    It it2=split(r+1),it1=split(l);\n    for (It i=it1;i!=it2;++i) i->x+=x;\n}\n\ninline int kth(int l,int r,int x)\n{\n    vector<It> v;\n    It it2=split(r+1),it1=split(l);\n    for (It i=it1;i!=it2;++i) v.push_back(i);\n    sort(v.begin(),v.end(),Cmp());\n    for (int i=0;i<v.size();++i)\n    {\n        // assert(v[i]->r>=v[i]->l);//Assertion Failed...Fixed....\n        x-=v[i]->r-v[i]->l+1;\n        if (x<=0) return v[i]->x;\n    }\n    return -1;\n}\n\ninline int power(int l,int r,int x,int p)\n{\n    ll ans=0;\n    It it2=split(r+1),it1=split(l);\n    for (It it=it1;it!=it2;++it) ans=((ll)ans+(ll)pow_mod(it->x,x,p)*(it->r-it->l+1)%p)%p;\n    return ans;\n}\n```\n\n","source":"_posts/蒟蒻_WA自动机的模板库.md","raw":"---\ntitle: 蒟蒻_WA自动机的模板库\ndate: 2022-01-21 21:33:28\ntags:\ncategories: \n    - 模板\ncomments:\n---\n\n# 更新日志\n\n2019.2.16\n\n* 修复珂朵莉树代码中的错误\n* FFT板子更新为预处理单位复根的版本(多项式基本操作请移步多项式算法总结qwq)\n\n2019.2.17\n\n* 新增NTT板子\n\n<!-- more -->\n2019.2.25\n\n* 新增替罪羊树板子\n\n2019.3.6\n\n* 新增K-D Tree(2-D Tree) -> [简单题AC代码]\n* 更新高消板子\n* 更新LCT板子\n\n2019.3.31\n* 新增Miller-Rabin素数判断\n* 新增Pollard-Rho大数分解\n\n2019.4.4\n* 新增SAM板子\n\n2019.4.22\n* 新增二维凸包\n* 新增笛卡尔树\n* 新增Manacher\n\n2019.4.26\n* 新增毒瘤圆方树\n\n2019.4.27\n* 新增广义圆方树\n\n# 数学\n\n## 线性筛\n\n```cpp\ninline void sieve(int n)\n{\n\tfor (int i=2;i<=n;++i)\n\t{\n\t\tif (!v[i]) {v[i]=i;prime[++cnt]=i;}\n\t\tfor (int j=1;j<=cnt;++j)\n\t\t{\n\t\t\tif (prime[j]>v[i] || i*prime[j]>n) break;\n\t\t\tv[i*prime[j]]=prime[j];\n\t\t}\n\t}\n\tfor (int i=1;i<=cnt;++i)\n\t\tisprime[prime[i]]=true;\n}\n```\n\n\n## 高斯消元 \n> 模板题【SDOI2006】异或方程组\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n\nusing std::fabs;\nusing std::swap;\n\nconst int maxn=1e3+10;\nconst double eps=1e-6;\n\ninline int Gauss_Elimination(double (*A)[maxn],double* f,int n)\n{\n    for (int i=1,c=1,j;i<=n;++i)\n    {\n        for (j=c;j<=n && fabs(A[j][i])<eps;++j);\n        if (j==n+1) continue;\n        for (int k=1;k<=n+1;++k) swap(A[c][k],A[j][k]);\n        for (int j=c+1;j<=n;++j)\n            if (fabs(A[j][i])>eps) \n            {\n                double t=A[j][i]/A[c][i];\n                for (int k=i;k<=n+1;++k)\n                    A[j][k]-=t*A[c][k];\n            }\n        ++c;\n    }\n    bool NoAnswer=false,InfAnswer=false;\n    for (int i=n;i;--i)\n    {\n        bool NoVariables=true;\n        for (int j=i;j<=n;++j)\n            if (fabs(A[i][j])>eps) NoVariables=false;\n        if (NoVariables)\n            if (fabs(A[i][n+1])>eps) NoAnswer=true; // 0=C,C!=0,无解\n            else InfAnswer=true; // 0=0,无穷多组解\n        else\n        {\n            for (int j=i+1;j<=n;++j) A[i][n+1]-=A[i][j]*f[j];\n            f[i]=A[i][n+1]/A[i][i];\n        }\n    }\n    if (NoAnswer) return -1; // 无解返回-1.. \n    return !InfAnswer; //无穷多解返回0，有唯一解返回1.\n}\n\nint main()\n{\n    static double A[maxn][maxn],f[maxn];\n    int n;\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;++i)\n        for (int j=1;j<=n+1;++j)\n            scanf(\"%lf\",&A[i][j]);\n    int result=Gauss_Elimination(A,f,n);\n    if (result^1) return printf(\"%d\\n\",result)&0;\n    for (int i=1;i<=n;++i) printf(\"x%d=%.2lf\\n\",i,f[i]);\n}\n```\n\n\n\n## 三分\n\n```cpp\ninline double F(double x)\n{\n\tdouble f=0;\n\tfor (int i=n;~i;--i)\n\t\tf=f*x+a[i];\n\treturn f;\n}\n\nint main()\n{\n\tdouble l,r;\n\tscanf(\"%d%lf%lf\",&n,&l,&r);\n\tfor (int i=n;~i;--i)\n\t\tscanf(\"%lf\",a+i);\n\twhile (l+eps<r)\n\t{\n\t\tdouble m1=l+(r-l)/3;\n\t\tdouble m2=r-(r-l)/3;\n\t\tif (F(m1)>F(m2)) r=m2;\n\t\t\telse l=m1;\n\t}\n\tprintf(\"%.5lf\",l);\n}\n```\n\n\n\n## 矩阵快速幂\n\n```cpp\nMatrix operator^ (ll k)\n{\n\tMatrix ans(n,m);\n\tfor (int i=1;i<=n;++i)\n\t\tans.a[i][i]=1;\n\tMatrix t=*this;\n\tfor (;k;k>>=1)\n\t{\n\t\tif (k&1) ans=ans*t;\n\t\tt=t*t;\n\t}\n\treturn ans;\n}\n```\n\n\n\n## 乘法逆元\n\n### 线性递推\n\n```cpp\ninv[1]=1;\ninv[i]=(p-p/i)*inv[p%i]%p;\n```\n\n###  阶乘逆元\n\n$\\text{inv}(i)=\\text{inv}(i+1) \\times(i+1)$\n\n## 有理数取模\n\n```cpp\ninline ll pow(int a,int b,int mod)\n{\n\tll ans=1ll;\n\tfor (;b;b>>=1)\n\t{\n\t\tif (b&1) ans=ans*a%mod;\n\t\ta=(ll)a*a%mod;\n\t}\n\treturn ans;\n}\n\ninline ll read()\n{\n\tchar ch;\n\twhile (!isdigit(ch=getchar()));\n\tll x=ch-48;\n\twhile (isdigit(ch=getchar()))\n\t\tx=(x*10+ch-48)%mod;\n\treturn x;\n}\n\nint main()\n{\n\tll a,b;\n\ta=read();b=read();\n\tif (!b) return puts(\"Angry!\"),0; \n\tprintf(\"%lld\",(ll)a*pow(b,mod-2,mod)%mod);\n}\n```\n\n## Miller-Rabin\n```cpp\nint pr[]={2,3,5,7,11,13,17,19,23,29,31,37};\n\ninline ll qpow(ll a,ll b,ll p)\n{\n    ll ans=1%p;\n    for (;b;b>>=1)\n    {\n        if (b&1) ans=ans*a%p;\n        a=a*a%p;\n    }\n    return ans;\n}\n\ninline bool miller_rabin(int n)\n{\n    if (n==1) return false;\n    for (int i=0;i<12;++i) if (n==pr[i]) return true;\n    int m=(n-1),k=0;\n    while (!(m&1)) m>>=1,++k;\n    for (int i=0;i<12 && pr[i]<n;++i)\n    {\n        ll x=qpow(pr[i],m,n),y=x;\n        for (int t=0;t<k;++t)\n        {\n            x=x*x%n;\n            if (x==1 && y!=1 && y!=n-1) return false;\n            y=x;\n        }\n        if (x!=1) return false;\n    }\n    return true;\n}\n\n```\n\n## Pollard-Rho\n```cpp\n#include <cstdio>\n#include <ctime>\n#include <cmath>\n#include <random>\n#include <chrono>\n\nusing std::abs;\n\nstd::mt19937_64 Rnd(std::chrono::steady_clock::now().time_since_epoch().count());\n\ntypedef long long ll;\ntypedef unsigned long long ull;\n\nint pr[]={2,3,5,7,11,13,17,19,23,29,31,37};\n\ninline ll gcd(ll a,ll b){return b==0?a:gcd(b,a%b);}\n\ninline ll rnd(ll x){return (ll)(Rnd()%x+1);}\n\ninline ll quick_pow(ll a,ll b,ll p)\n{\n    ll ans=1%p;\n    for (;b;b>>=1)\n    {\n        if (b&1) ans=ans*a%p;\n        a=a*a%p;\n    }\n    return ans;\n}\n\ninline ll slow_mul(ull a,ll b,ll p)\n{\n    ull ans=0;\n    for (;b;b>>=1)\n    {\n        if (b&1) ans=(ull)(ans+a);\n        if (ans>=p) ans-=p;\n        a=(ull)(a+a)%p;\n        if (a>=p) a-=p;\n    }\n    return ans;\n}\n\ninline bool miller_rabin(ll n)\n{\n    if (n==1) return false;\n    for (int i=0;i<12;++i) if (n==pr[i]) return true;\n    if (n%2==0 || n%3==0 || n%5==0) return false;\n    ll m=(n-1),k=0;\n    while (!(m&1)) m>>=1,++k;\n    for (int i=0;i<12 && pr[i]<n;++i)\n    {\n        ll x=quick_pow(pr[i],m,n),y=x;\n        for (int t=0;t<k;++t)\n        {\n            x=slow_mul(x,x,n);\n            if (x==1 && y!=1 && y!=n-1) return false;\n            y=x;\n        }\n        if (x!=1) return false;\n    }\n    return true;\n}\n\n#define f(x) ((slow_mul(x,x,n)+c)%n)\ninline ll rho(ll n)\n{\n    if (!(n&1)) return 2;\n    if (n%3==0) return 3;\n    ll x=0,y=0,t=1,c=rnd(n-1),q=1;\n    for (int k=2;;k<<=1,y=x,q=1)\n    {\n        for (int i=1;i<k;++i)\n        {\n            x=f(x);\n            q=slow_mul(q,abs(x-y),n);\n            if (!(i&0x7f))\n                if ((t=gcd(q,n))>1) break;\n        }\n        if (t>1 || (t=gcd(q,n))>1) break; \n    }\n    return t;\n}\n\nll max_p;\n\nll solve(ll n)\n{\n    if (n==1) return 1;\n    if (miller_rabin(n)) return max_p=n>max_p?n:max_p; \n    ll t=n;\n    while (t==n) t=rho(n);\n    solve(n/t);solve(t);\n    return max_p;\n}\n\nint main()\n{\n    freopen(\"pol.in\",\"r\",stdin);\n    freopen(\"pol.out\",\"w\",stdout);\n    int T;\n    scanf(\"%d\",&T);\n    while (T--)\n    {\n        ll x;\n        scanf(\"%lld\",&x);max_p=0;\n        ll ret=solve(x);\n        if (ret==x) puts(\"Prime\");\n        else printf(\"%lld\\n\",ret);\n    }\n    fprintf(stderr,\"%d\",clock());\n}\n```\n\n## FFT\n\n```cpp\n#include <cstdio>\n#include <cmath>\n\nconst double Pi=acos(-1.0);\nconst int maxn=2e6+100;\n\ndouble q[maxn];\nint limit=1,rev[maxn];\n\nstruct Complex\n{\n    double real,imag;\n    Complex(double real,double imag):real(real),imag(imag){}\n    Complex(){}\n    Complex conj();\n}w[maxn],winv[maxn],A[maxn];\n\ninline Complex Complex::conj(){return Complex(real,-imag);}\ninline Complex operator+(const Complex& a,const Complex& b){return Complex(a.real+b.real,a.imag+b.imag);}\ninline Complex operator-(const Complex& a,const Complex& b){return Complex(a.real-b.real,a.imag-b.imag);}\ninline Complex operator*(const Complex& a,const Complex& b){return Complex(a.real*b.real-a.imag*b.imag,a.real*b.imag+a.imag*b.real);}\n\ntemplate<typename T>\ninline void swap(T& a,T& b){T t=a;a=b;b=t;}\n\ninline void DFT(Complex* A,Complex* w,int limit)\n{\n    for (int i=0;i<limit;++i)\n        if (i<rev[i]) swap(A[i],A[rev[i]]);\n    for (int mid=1;mid<limit;mid<<=1)\n        for (int R=mid<<1,j=0;j<limit;j+=R)\n            for (int k=0;k<mid;++k)\n            {\n                Complex x=A[j+k],y=w[limit/mid/2*k]*A[j+mid+k];\n                A[j+k]=x+y;\n                A[j+mid+k]=x-y;\n            }\n}\n\ninline void prework(int n)\n{\n    int l=0;\n    while (limit<=(n<<1)+1) limit<<=1,++l;\n    for (int i=0;i<limit;++i)\n        rev[i]=(rev[i>>1]>>1)|((i&1)<<(l-1));\n    for (int i=0;i<limit;++i) \n        w[i]=Complex(cos(Pi*2/limit*i),sin(Pi*2/limit*i)),winv[i]=w[i].conj();\n}\n\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for (int i=0;i<=n;++i)\n        scanf(\"%lf\",&A[i].real);\n    for (int i=0;i<=m;++i)\n        scanf(\"%lf\",&A[i].imag);\n    prework(n>=m?n:m);\n    DFT(A,w,limit);\n    for (int i=0;i<limit;++i)\n        A[i]=A[i]*A[i];\n    DFT(A,winv,limit);\n    for (int i=0;i<=n+m;++i)\n        printf(\"%d \",(int)(A[i].imag/2/limit+0.1));\n}\n```\n\n\n\n## NTT\n\n```cpp\ninline int qpow(int a,int b,int p)\n{\n    int ans=1%p;\n    for (;b;b>>=1,a=(ll)a*a%p)\n        if (b&1) ans=(ll)ans*a%p;\n    return ans;\n}\n\ninline void prework(int n,int m)\n{\n    int l=0;\n    while (limit<=(n+m+1)) limit<<=1,++l;\n    w[0]=1;w[1]=qpow(g,(P-1)/limit,P),winv[0]=1,winv[1]=qpow(w[1],P-2,P);\n    for (int i=2;i<limit;++i)\n        w[i]=(ll)w[i-1]*w[1]%P,winv[i]=1ll*winv[i-1]*winv[1]%P;\n    for (int i=1;i<limit;++i)\n        rev[i]=(rev[i>>1]>>1)|((i&1)<<(l-1));\n}\n\ninline void NTT(int *A,int *w,int limit)\n{\n    for (int i=0;i<limit;++i)\n        if (i<rev[i]) swap(A[i],A[rev[i]]);\n    for (int mid=1;mid<limit;mid<<=1)\n        for (int R=mid<<1,j=0;j<limit;j+=R)\n            for (int k=0;k<mid;++k)\n            {\n                int x=A[j+k],y=(ll)A[j+k+mid]*w[limit/2/mid*k]%P;\n                A[j+k]=(x+y)%P;A[j+mid+k]=(x-y+P)%P;\n            }\n}\n\ninline void DFT(int *A){ NTT(A,w,limit); }\n\ninline void IDFT(int *A)\n{\n    NTT(A,winv,limit);\n    int inv=qpow(limit,P-2,P);\n    for (int i=0;i<=limit;++i)\n        A[i]=((ll)A[i]*inv)%P;\n}\n```\n\n# 计算几何\n## 二维凸包\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n\nusing std::sort;\nusing std::sqrt;\n\nconst int maxn=1e5+100;\n\nstruct Point\n{\n    double x,y;\n    Point(double x,double y):x(x),y(y){}\n    Point(){}\n    bool operator< (const Point& p) const{return x==p.x?y<p.y:x<p.x;}\n    Point operator- (const Point& p){return Point(x-p.x,y-p.y);}\n    double operator* (const Point& p){return x*p.x+y*p.y;}\n}p[maxn];\n\ntypedef Point Vector;\n\ninline double dis(const Point& a,const Point& b){return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));}\n\ninline double cross(const Vector& a,const Vector& b){return a.x*b.y-b.x*a.y;}\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;++i)\n        scanf(\"%lf%lf\",&p[i].x,&p[i].y);\n    sort(p+1,p+n+1);\n    static int stack[maxn];\n    int top=0;\n    stack[++top]=1;\n    bool used[maxn];\n    for (int i=2;i<=n;++i)\n    {\n        while (top>1 && cross(p[stack[top]]-p[stack[top-1]],p[i]-p[stack[top]])<=0) used[stack[top--]]=false;\n        stack[++top]=i;\n        used[i]=true;\n    }\n    int prec=top;\n    for (int i=n;i;--i)\n        if (!used[i])\n        {\n            while (top>prec && cross(p[stack[top]]-p[stack[top-1]],p[i]-p[stack[top]])<=0) used[stack[top--]]=false;\n            stack[++top]=i;\n            used[i]=true;\n        }\n    double ans=0;\n    for (int i=2;i<=top;++i)\n        ans+=dis(p[stack[i]],p[stack[i-1]]);\n    printf(\"%.2lf\",ans);\n}\n```\n\n# 字符串\n\n## Manacher\n```cpp\n#include <cstdio>\n#include <cstring>\n\nconst int maxn=3e7+10;\n\nchar buf[maxn],s[maxn];\nint f[maxn];\n\ntemplate<class T>inline T min(T a,T b){return a<b?a:b;}\ntemplate<class T>inline T max(T a,T b){return a<b?b:a;}\n\ninline void manacher(int n)\n{\n    int maxright=0,mid=0;\n    for (int i=1;i<n;++i)\n    {\n        if (i<maxright) f[i]=min(f[(mid<<1)-i],f[mid]+mid-i);\n        else f[i]=1;\n        while (s[i+f[i]]==s[i-f[i]]) ++f[i];\n        if (i+f[i]>maxright) maxright=i+f[i],mid=i;\n    }\n}\n\nint main()\n{\n    int n;\n    scanf(\"%s\",buf);\n    n=strlen(buf);\n    s[0]=s[1]='@';\n    for (int i=0;i<n;++i)\n        s[(i<<1)+2]=buf[i],s[(i<<1)+3]='@';\n    n=n*2+2;s[n]=0;\n    manacher(n);\n    int ans=0;\n    for (int i=0;i<n;++i)\n        ans=max(ans,f[i]);\n    printf(\"%d\",ans-1);\n}\n```\n\n## 制胡窜哈希\n\n```cpp\ninline void hs1(char* s)\n{\n\tpw1[0]=1;hsh1[0]=s[0];\n\tfor (int i=1;i<n;++i)\n\t{\n\t\tpw1[i]=(ll)pw1[i-1]*seed%mod1;\n\t\thsh1[i]=((ll)hsh1[i-1]*seed+s[i])%mod1;\n\t}\n}\n\ninline void hs2(char* s)\n{\n\tpw2[0]=1;hsh2[0]=s[0];\n\tfor (int i=1;i<n;++i)\n\t{\n\t\tpw2[i]=(ll)pw2[i-1]*seed%mod2;\n\t\thsh2[i]=((ll)hsh2[i-1]*seed+s[i])%mod2;\n\t}\n}\n\ninline pair<int,int> gethash(int l,int r)\n{\n\tint t1=((hsh1[r]-(ll)hsh1[l-1]*pw1[r-l+1]%mod1)+mod1)%mod1;\n\tint t2=((hsh2[r]-(ll)hsh2[l-1]*pw2[r-l+1]%mod2)+mod2)%mod2;\n\treturn make_pair(t1,t2);\n}\n```\n\n\n\n## KMP\n\n```cpp\ninline void getfail(int n)\n{\n    for (int i=1,j;i<n;++i)\n    {\n        j=f[i];\n        while (j && P[j]!=P[i]) j=f[j];\n        f[i+1]=P[i]==P[j]?j+1:0;\n    }\n}\n\ninline void kmp(int n,int m)\n{\n    for (int i=0,j=0;i<n;++i)\n    {\n        while (j && T[i]!=P[j]) j=f[j];\n        if (T[i]==P[j]) ++j;\n        if (j==m) printf(\"%d\\n\",i-m+2);\n    }\n}\n```\n\n\n\n## AC自动机\n\n```cpp\nvoid add(const char* s)\n{\n\tint n=strlen(s),u=0;\n\tfor (int i=0;i<n;++i)\n\t{\n\t\tint c=idx(s[i]);\n\t\tif (!ch[u][c]) ch[u][c]=++cnt;\n\t\tu=ch[u][c];\n\t}\n\t++tag[u];\n}\n\nvoid getfail()\n{\n\tqueue<int> q;\n\tfor (int i=0;i<26;++i)\n\t\tif (ch[0][i]) q.push(ch[0][i]);\n\twhile (!q.empty())\n\t{\n\t\tint u=q.front();q.pop();\n\t\tfor (int i=0;i<26;++i)\n\t\t{\n\t\t\tint c=ch[u][i];\n\t\t\tif (!c) {ch[u][i]=ch[f[u]][i];continue;}\n\t\t\tq.push(c);\n\t\t\tint v=f[u];\n\t\t\twhile (v && !ch[v][i]) v=f[v];\n\t\t\tf[c]=ch[v][i];\n\t\t\tlast[c]=tag[f[c]]?f[c]:last[f[c]];\n\t\t}\n\t}\n}\n\nint get(const char *s)\n{\n    int n=strlen(s);\n    int x=0,ret=0;\n    for(int i=0;i<n;++i)\n    {\n        x=ch[x][idx(s[i])];\n        for(int j=x;j;j=last[j])\n        \tif(!vis[j])vis[j]=1,ret+=tag[j];\n    }\n    return ret;\n}\n```\n\n\n\n## SA\n\n```cpp\ninline void build_sa(int n,int m)\n{\n    int *x=t1,*y=t2;\n    for (int i=0;i<m;++i) c[i]=0;\n    for (int i=0;i<n;++i) c[x[i]=s[i]]++;\n    for (int i=1;i<m;++i) c[i]+=c[i-1];\n    for (int i=n-1;~i;--i) sa[--c[x[i]]]=i;\n    for (int k=1,p=1;k<=n && p<n;k<<=1,m=p)\n    {\n        p=0;\n        for (int i=n-k;i<n;++i) y[p++]=i;\n        for (int i=0;i<n;++i) if (sa[i]>=k) y[p++]=sa[i]-k;\n        for (int i=0;i<m;++i) c[i]=0;\n        for (int i=0;i<n;++i) c[t3[i]=x[y[i]]]++;\n        for (int i=1;i<m;++i) c[i]+=c[i-1];\n        for (int i=n-1;~i;--i) sa[--c[t3[i]]]=y[i];\n        p=1;swap(x,y);x[sa[0]]=0;\n        for (register int i=1;i<n;++i)\n            x[sa[i]]=(y[sa[i]+k]==y[sa[i-1]+k] && y[sa[i]]==y[sa[i-1]])?p-1:p++;\n    }\n}\n\ninline void get_height(int n)\n{\n    int k=0,j=0;\n    for (int i=0;i<=n;++i) rank[sa[i]]=i;\n    for (int i=0;i<n;height[rank[i++]]=k)\n        for (k?--k:0,j=sa[rank[i]-1];s[j+k]==s[i+k];++k);\n}\n```\n\n## SAM\n```cpp\n#include <cstdio>\n#include <cstring>\n\nconst int maxn=2e6+1000;\n\nint tr[maxn][26],parent[maxn],mx[maxn],right[maxn],cnt=1,last=1;\n\ninline void radixsort(int n)\n{\n    static int c[maxn],id[maxn];\n    for (int i=1;i<=cnt;++i) ++c[mx[i]];\n    for (int i=1;i<=n;++i) c[i]+=c[i-1];\n    for (int i=cnt;i;--i) id[--c[mx[i]]]=i;\n    for (int i=cnt-1;~i;--i) right[parent[id[i]]]+=right[id[i]];\n}\n\ninline void insert(int x)\n{\n    int p=last,np=last=++cnt;\n    right[np]=1;mx[np]=mx[p]+1;\n    while (p && !tr[p][x]) tr[p][x]=np,p=parent[p];\n    if (!p) parent[np]=1;\n    else\n    {\n        int q=tr[p][x];\n        if (mx[q]==mx[p]+1) parent[np]=q;\n        else\n        {\n            int nq=++cnt;\n            mx[nq]=mx[p]+1;\n            memcpy(tr[nq],tr[q],sizeof(tr[q]));\n            while (p && tr[p][x]==q) tr[p][x]=nq,p=parent[p];\n            parent[nq]=parent[q];parent[q]=parent[np]=nq;\n        }\n    }\n}\n\nint main()\n{\n    int n;\n    static char s[maxn];\n    scanf(\"%s\",s);\n    n=strlen(s);\n    for (int i=0;i<n;++i) insert(s[i]-'a');\n    radixsort(n);\n    int ans=0;\n    for (int i=1;i<=cnt;++i) if (right[i]>1 && right[i]*mx[i]>ans) ans=right[i]*mx[i]; \n    printf(\"%d\\n\",ans);\n}\n```\n\n# 图论\n## 广义圆方树(APIO2018 铁人两项)\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n\nusing std::vector;\n\nconst int maxn=2e6+100;\n\nvector<int> G[maxn],T[maxn];\nint dfn[maxn],low[maxn],dfc,tot,cnt,val[maxn],siz[maxn];\n\ntemplate<class T>inline T max(T a,T b){return a<b?b:a;}\ntemplate<class T>inline T min(T a,T b){return a<b?a:b;}\ntemplate<class T>inline void swap(T& a,T& b){a^=b^=a^=b;}\n\ninline void tarjan(int u,int ff)\n{\n    static int stack[maxn],top=0;\n    dfn[u]=low[u]=++dfc;\n    stack[++top]=u;\n    ++cnt;val[u]=-1;\n    for (auto v:G[u])\n    {\n        if (v==ff) continue;\n        if (!dfn[v])\n        {\n            tarjan(v,u);\n            low[u]=min(low[u],low[v]);\n            if (low[v]>=dfn[u])\n            {\n                ++tot;\n                int x;\n                do\n                {\n                    x=stack[top--];\n                    ++val[tot];\n                    T[x].push_back(tot);\n                    T[tot].push_back(x);\n                } while (x!=v);\n                T[u].push_back(tot);\n                T[tot].push_back(u);\n                ++val[tot];\n            }\n        }\n        else low[u]=min(low[u],dfn[v]);\n    }\n}\n\ninline int64_t calc(int u,int ff,int n,int N)\n{\n    int64_t ans=0;\n    siz[u]=(u<=N);\n    for (auto v:T[u])\n    {\n        if (v==ff) continue;\n        ans+=calc(v,u,n,N);\n        ans+=(int64_t)siz[u]*siz[v]*val[u];\n        siz[u]+=siz[v];\n    }\n    ans+=(int64_t)siz[u]*(n-siz[u])*val[u];\n    return ans;\n}\n\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    tot=n;\n    for (int i=1,u,v;i<=m;++i)\n        scanf(\"%d%d\",&u,&v),G[u].push_back(v),G[v].push_back(u);\n    int64_t ans=0;\n    for (int i=1;i<=n;++i)\n        if (!dfn[i])\n        {\n            cnt=0;\n            tarjan(i,0);\n            ans+=calc(i,0,cnt,n);\n        } \n    printf(\"%lld\\n\",ans*2);\n}\n```\n\n## 静态仙人掌（圆方树）\n```cpp\n#include <cstdio>\n#include <algorithm>\n\nconst int maxn=3e4+1200;\n\nstruct Graph\n{\n    struct Edge\n    {\n        int to,next,w;\n    }edge[maxn<<1];\n    int head[maxn],cnt;\n\n    inline void _add(int u,int v,int w)\n    {\n        edge[++cnt].next=head[u];\n        edge[cnt].to=v;\n        edge[cnt].w=w;\n        head[u]=cnt;\n    }\n    inline void add(int u,int v,int w){_add(u,v,w);_add(v,u,w);}\n}G,T;\n\nint dfn[maxn],low[maxn],tot,dfc;\nint fa[maxn],val[maxn],sum[maxn];\n\ntemplate<class T>inline T min(T a,T b){return a<b?a:b;}\ntemplate<class T>inline T max(T a,T b){return a<b?b:a;}\ntemplate<class T>inline void swap(T &a,T &b){a^=b^=a^=b;}\n\ninline void build(int u,int v,int w)\n{\n    ++tot;\n    int s=w;\n    for (int x=v;x!=fa[u];x=fa[x])\n        sum[x]=s,s+=val[x];\n    sum[tot]=sum[u];\n    sum[u]=0;\n    for (int x=v;x!=fa[u];x=fa[x])\n    {\n        int sp=min(sum[x],sum[tot]-sum[x]);\n        T.add(x,tot,sp);\n    }\n}\n\ninline void tarjan(int u,int ff)\n{\n    dfn[u]=low[u]=++dfc;\n    for (int i=G.head[u];i;i=G.edge[i].next)\n    {\n        int v=G.edge[i].to;\n        if (v==ff) continue;\n        if (!dfn[v])\n        {\n            fa[v]=u;\n            val[v]=G.edge[i].w;\n            tarjan(v,u);\n            low[u]=min(low[u],low[v]);\n        }\n        else low[u]=min(low[u],dfn[v]);\n        if (low[v]<=dfn[u]) continue;\n        T.add(u,v,G.edge[i].w);\n    }\n    for (int i=G.head[u];i;i=G.edge[i].next)\n    {\n        int v=G.edge[i].to;\n        if (fa[v]!=u && dfn[v]>dfn[u])\n            build(u,v,G.edge[i].w);\n    }\n}\n\nint depth[maxn],siz[maxn],top[maxn],son[maxn],dis[maxn];\n\ninline void dfs(int u,int ff,int dep,int di)\n{\n    depth[u]=dep;\n    dis[u]=di;\n    fa[u]=ff;\n    int maxs=-1;\n    siz[u]=1;\n    for (int i=T.head[u];i;i=T.edge[i].next)\n    {\n        int v=T.edge[i].to;\n        if (v!=ff)\n        {\n            dfs(v,u,dep+1,di+T.edge[i].w);\n            siz[u]+=siz[v];\n            if (siz[v]>maxs) maxs=siz[v],son[u]=v;\n        }\n    }\n}\n\ninline void dfs(int u,int topf)\n{\n    top[u]=topf;\n    if (!son[u]) return;\n    dfs(son[u],topf);\n    for (int i=T.head[u];i;i=T.edge[i].next)\n    {\n        int v=T.edge[i].to;\n        if (v!=fa[u] && v!=son[u])\n            dfs(v,v);\n    }\n}\n\ninline int LCA(int u,int v)\n{\n    while (top[u]!=top[v])\n    {\n        if (depth[top[u]]<depth[top[v]]) swap(u,v);\n        u=fa[top[u]];\n    }\n    return depth[u]>depth[v]?v:u;\n}\n\ninline int find(int u,int lca)\n{\n    int res=son[lca];\n    while (top[u]!=top[lca])\n        res=top[u],u=fa[top[u]];\n    return u==lca?res:son[lca];\n}\n\ninline int query(int u,int v,int n)\n{\n    int lca=LCA(u,v);\n    if (lca<=n) return dis[u]+dis[v]-2*dis[lca];\n    int x=find(u,lca),y=find(v,lca);\n    int ans=dis[u]+dis[v]-dis[x]-dis[y];\n    if (sum[x]<sum[y]) swap(x,y);\n    ans+=min(sum[x]-sum[y],sum[lca]-sum[x]+sum[y]);\n    return ans;\n}\n\nint main()\n{\n    int n,m,q;\n    scanf(\"%d%d%d\",&n,&m,&q);\n    for (int i=1,u,v,w;i<=m;++i)\n        scanf(\"%d%d%d\",&u,&v,&w),G.add(u,v,w);\n    tot=n;\n    tarjan(1,0);\n    dfs(1,0,1,0);\n    dfs(1,1);\n    for (int i=1,u,v;i<=q;++i)\n    {\n        scanf(\"%d%d\",&u,&v);\n        printf(\"%d\\n\",query(u,v,n));\n    }\n}\n```\n\n## Kruskal\n\n```cpp\nstruct Edge\n{\n\tint u,v,w;\n\tbool operator< (const Edge& e) const {return w<e.w;}\n}edge[maxn];\nint fa[maxn],cnt;\n\ninline int find(int x){return x==fa[x]?x:fa[x]=find(fa[x]);}\n\ninline int kruskal(int m)\n{\n\tint ans=0;\n\tstd::sort(edge+1,edge+m+1);\n\tfor (int i=1;i<=m;++i)\n\t{\n\t\tint u=edge[i].u,v=edge[i].v,w=edge[i].w;\n\t\tif (find(u)!=find(v))\n\t\t\t++cnt,fa[find(u)]=find(v),ans+=w;\n\t}\n\treturn ans;\n}\n```\n\n## LCA\n\n###  树剖  \n\n```cpp\nvoid dfs(int u,int f,int dep)\n{\n    depth[u]=dep;\n    fa[u]=f;\n    siz[u]=1;\n    int maxs=-1;\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=f) \n        {\n            dfs(v,u,dep+1);\n            siz[u]+=siz[v];\n            if (siz[v]>=maxs) maxs=siz[v],son[u]=v;\n        }\n    }\n}\n\nvoid dfs(int u,int topf)\n{\n    top[u]=topf;\n    if (!son[u]) return;\n    dfs(son[u],topf);\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=fa[u] && v!=son[u]) dfs(v,v);\n    }\n}\n\nint lca(int u,int v)\n{\n    while (top[u]!=top[v])\n    {\n        if (depth[top[u]]<depth[top[v]]) swap(u,v);\n        u=fa[top[u]];\n    }\n    if (depth[u]>depth[v]) swap(u,v);\n    return u;\n}\n```\n\n### 倍增\n\n```cpp\ninline void dfs(int u,int fa,int dep)\n{\n    f[u][0]=fa;\n    depth[u]=dep;\n    for (int i=1;(1<<i)<=n;++i)\n        f[u][i]=f[f[u][i-1]][i-1];\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=fa) dfs(v,u,dep+1);\n    }\n}\n\ninline int lca(int u,int v)\n{\n    if (depth[u]<depth[v]) swap(u,v);\n    int l=depth[u]-depth[v];\n    for (int i=0;(1<<i)<=l;++i)\n        if (l&(1<<i)) u=f[u][i];\n    if (u==v) return u;\n    for (int i=22;i>=0;--i)\n        if (f[u][i]!=f[v][i]) \n            u=f[u][i],v=f[v][i];\n    return f[u][0];\n}\n```\n\n### DFS序转RMQ\n\n```cpp\ninline int Min(int x,int y){return depth[x]<depth[y]?x:y;}\n\nvoid dfs(int u,int f,int dep)\n{\n    fa[u]=f;\n    dfn[++tot]=u;\n    pre[u]=tot;\n    depth[tot]=dep;\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=f)\n        {\n            dfs(v,u,dep+1);\n            dfn[++tot]=u;\n            depth[tot]=dep;\n        }\n    }\n}\n\ninline void rmq_init()\n{\n    for (int i=1;i<=tot;++i) st[i][0]=i; \n    for (int j=1;(1<<j)<=tot;++j)\n        for (int i=1;i+(1<<j)-1<=tot;++i)\n            st[i][j]=Min(st[i][j-1],st[i+(1<<(j-1))][j-1]);\n}\n\ninline int rmq(int L,int R)\n{\n    int k=0;\n    while ((1<<(k+1))<=R-L+1) ++k;\n    return Min(st[L][k],st[R-(1<<k)+1][k]);\n}\n\ninline int lca(int x,int y)\n{\n    x=pre[x];y=pre[y];\n    if (x>y) swap(x,y);\n    return dfn[rmq(x,y)];\n}\n```\n\n### Tarjan\n\n```cpp\ninline int find(int x){ return x==fa[x]?x:fa[x]=find(fa[x]);}\n\nvoid dfs(int u,int f)\n{\n    fa[u]=u;\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=f) dfs(v,u),fa[v]=u;\n    }\n    for (int i=query_head[u];~i;i=query[i].next)\n    {\n        int v=query[i].v;\n        if (vis[v]) query[i].ans=query[i^1].ans=find(v);\n    } \n    vis[u]=true;\n}\n```\n\n\n\n## 单源最短路径\n\n> Dijkstra\n\n```cpp\nvoid Dijkstra(int s)\n{\n\tmemset(d,0x3f,sizeof(d));\n\tstd::priority_queue<Node> q;\n\td[s]=0;\n\tq.push(Node(s,0));\n\twhile (!q.empty())\n\t{\n\t\tint u=q.top().u,di=q.top().dis;q.pop();\n\t\tif (di!=d[u]) continue;\n\t\tfor (int i=head[u];i;i=edge[i].next)\n\t\t{\n\t\t\tint v=edge[i].to;\n\t\t\tif (d[v]>d[u]+edge[i].w)\n\t\t\t{\n\t\t\t\td[v]=d[u]+edge[i].w;\n\t\t\t\tq.push(Node(v,d[v]));\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n> SPFA\n\n```cpp\nvoid spfa()\n{\n    d[s]=0;\n    vis[s]=1;\n    queue<int> q;\n    q.push(s);\n    while (!q.empty())\n    {\n        int u=q.front(); q.pop();vis[u]=false;\n        for (int i=head[u];i;i=edges[i].next)\n        {\n            Edge& e=edges[i];\n            if (d[e.to]>d[u]+e.w)\n            {\n                d[e.to]=d[u]+e.w;\n                if (!vis[e.to]) q.push(e.to),vis[e.to]=true;\n            }\n        }\n    }\n}\n```\n\n\n\n## 网络流\n\n> Dinic最大流\n\n```cpp\nbool bfs()\n{\n\tqueue<int> q;\n\tq.push(s);\n\tmemset(depth,0,sizeof(depth));\n\tdepth[s]=1;\n\twhile (!q.empty())\n\t{\n\t\tint u=q.front();q.pop();\n\t\tfor (int i=head[u];~i;i=edge[i].next)\n\t\t{\n\t\t\tint v=edge[i].to;\n\t\t\tif (!depth[v] && edge[i].w>0)\n\t\t\t\tdepth[v]=depth[u]+1,q.push(v);\n\t\t}\n\t}\n\treturn depth[t]>0; \n}\n\nint dfs(int u,int flow)\n{\n\tif (u==t) return flow;\n\tfor (int &i=cur[u];~i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif (depth[v]==depth[u]+1 && edge[i].w>0)\n\t\t{\n\t\t\tint d=dfs(v,min(flow,edge[i].w));\n\t\t\tif (d>0)\n\t\t\t{\n\t\t\t\tedge[i].w-=d;\n\t\t\t\tedge[i^1].w+=d;\n\t\t\t\treturn d;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint dinic(int n)\n{\n\tint ans=0;\n\twhile (bfs())\n\t{\n\t\tmemcpy(cur,head,sizeof(cur));\n\t\twhile (int d=dfs(s,INF)) ans+=d;\n\t}\n\treturn ans;\n}\n```\n\n> Edmonds-Karp费用流\n\n```cpp\ninline bool spfa()\n{\n\tstatic int vis[maxn];\n\tqueue<int> q;\n\tq.push(s);\n\tmemset(vis,0,sizeof(vis));\n\tmemset(d,0x3f,sizeof(d));\n\td[s]=0;vis[s]=true;\n\twhile (!q.empty())\n\t{\n\t\tint u=q.front();q.pop();\n\t\tvis[u]=false;\n\t\tfor (int i=head[u];~i;i=edge[i].next)\n\t\t{\n\t\t\tint v=edge[i].to;\n\t\t\tif (edge[i].flow>0 && d[v]>d[u]+edge[i].cost)\n\t\t\t{\n\t\t\t\td[v]=d[u]+edge[i].cost;\n\t\t\t\tincf[v]=edge[i].flow;\n\t\t\t\tinedge[v]=i;\n\t\t\t\tpre[v]=u;\n\t\t\t\tif (!vis[v]) vis[v]=true,q.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn d[t]<inf;\n}\n\ninline void mcmf()\n{\n\tint flow=0,cost=0;\n\twhile (spfa())\n\t{\n\t\tint u=t,mn=inf;\n\t\tfor (int i=t;i!=s;i=pre[i])\n\t\t\tmn=min(mn,incf[i]);\n\t\tfor (int i=t;i!=s;i=pre[i])\n\t\t{\n\t\t\tedge[inedge[i]].flow-=mn;\n\t\t\tedge[inedge[i]^1].flow+=mn;\n\t\t}\n\t\tcost+=d[t]*mn;\n\t\tflow+=mn;\n\t}\n\tprintf(\"%d %d\",flow,cost);\n}\n\n```\n\n\n\n## 割点\n\n```cpp\ninline void tarjan(int u,int rt)\n{\n\tint chd=0;\n\tdfn[u]=low[u]=++idx;\n\tfor (int i=head[u];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif (!dfn[v])\n\t\t{\n\t\t\ttarjan(v,rt);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t\tif (low[v]>=dfn[u])\n\t\t\t{\n\t\t\t\t++chd;\n\t\t\t\tif (chd>1 || u!=rt)\n\t\t\t\t\tiscut[u]=true;\n\t\t\t}\n\t\t}\n\t\telse low[u]=min(low[u],dfn[v]);\n\t}\n}\n```\n\n\n\n## Tarjan缩点\n\n```cpp\nstruct Graph\n{\n\tint head[maxn],cnt;\n\tEdge edge[maxm];\n\tinline void add(int u,int v)\n\t{\n\t\tedge[++cnt].next=head[u];\n\t\tedge[cnt].to=v;\n\t\thead[u]=cnt;\n\t}\n}old,dag;\n\nvoid tarjan(int u)\n{\n\tdfn[u]=low[u]=++idx;\n\tstk[++top]=u;\n\tinstack[u]=true;\n\tfor (int i=old.head[u];i;i=old.edge[i].next)\n\t{\n\t\tint v=old.edge[i].to;\n\t\tif (!dfn[v])\n\t\t{\n\t\t\ttarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if (instack[v]) low[u]=min(low[u],dfn[v]);\n\t}\n\tif (dfn[u]==low[u])\n\t{\n\t\tint v;\n\t\t++scc_cnt;\n\t\tdo\n\t\t{\n\t\t\tv=stk[top--];\n\t\t\tbelong[v]=scc_cnt;\n\t\t\tw[scc_cnt]+=val[v];\n\t\t\tinstack[v]=false;\n\t\t}while (v!=u);\n\t}\n}\n\ninline void rebuild(int n)\n{\n\tfor (int u=1;u<=n;++u)\n\t\tfor (int i=old.head[u];i;i=old.edge[i].next)\n\t\t\tif (belong[u]!=belong[old.edge[i].to])\n\t\t\t\tdag.add(belong[u],belong[old.edge[i].to]);\n}\n\ninline void work(int n)\n{\n\tfor (int i=1;i<=n;++i)\n\t\tif (!dfn[i]) tarjan(i);\n}\n```\n\n\n\n## 2-SAT\n\n```cpp\ninline void tarjan(int u)\n{\n\tdfn[u]=low[u]=++idx;\n\tinstack[u]=true;\n\tstk[++top]=u;\n\tfor (int i=head[u];i;i=edge[i].next)\n\t{\n\t\tint v=edge[i].to;\n\t\tif (instack[v]) low[u]=min(low[u],dfn[v]);\n\t\t\telse if (!dfn[v])\n\t\t\t\ttarjan(v),low[u]=min(low[u],low[v]);\n\t}\n\tif (dfn[u]==low[u])\n\t{\n\t\tint v;++scc_cnt;\n\t\tdo\n\t\t{\n\t\t\tv=stk[top--];\n\t\t\tbelong[v]=scc_cnt;\n\t\t\tinstack[v]=false;\n\t\t}while (v!=u);\n\t}\n}\n\ninline bool twosat(int n)\n{\n\tfor (int i=1;i<=n<<1;++i)\n\t\tif (!dfn[i]) tarjan(i);\n\tfor (int i=1;i<=n;++i)\n\t\tif (belong[i]==belong[i+n]) return false;\n\treturn true;\n}\n```\n\n\n\n# 数据结构\n\n## ST表\n\n```cpp\ninline void prework(int n)\n{\n\tfor (rint j=1;(1<<j)<=n;++j)\n\t\tfor (rint i=1;(i+(1<<j)-1)<=n;++i)\n\t\t\td[i][j]=max(d[i][j-1],d[i+(1<<(j-1))][j-1]);\n}\n\ninline int query(int i,int j)\n{\n\tint k=0,len=j-i+1;\n\twhile (1<<(k+1)<=len)++k;\n\treturn max(d[i][k],d[j-(1<<k)+1][k]);\n}\n```\n\n \n\n## 线段树2\n\n```cpp\nvoid build(int l,int r,int o)\n{\n\tmul[o]=1;\n\tif (l==r)\n\t{\n\t\tscanf(\"%lld\",sumv+o);\n\t\treturn;\n\t}\n\tint m=(l+r)>>1;\n\tbuild(ls);build(rs);\n\tpushup(o);\n}\n\ninline void pushdown(int o,int len)\n{\n\tsumv[o<<1]=(sumv[o<<1]*mul[o]+addv[o]*(len-(len>>1)))%p;\n\tsumv[o<<1|1]=(sumv[o<<1|1]*mul[o]+addv[o]*(len>>1))%p;\n\tmul[o<<1]=mul[o<<1]*mul[o]%p;\n\tmul[o<<1|1]=mul[o<<1|1]*mul[o]%p;\n\taddv[o<<1]=(addv[o<<1]*mul[o]+addv[o])%p;\n\taddv[o<<1|1]=(addv[o<<1|1]*mul[o]+addv[o])%p;\n\taddv[o]=0;mul[o]=1;\n}\n\nvoid multiplicate(int L,int R,int c,int l,int r,int o)\n{\n\tif (L<=l && R>=r)\n\t{\n\t\tmul[o]=mul[o]*c%p;\n\t\taddv[o]=addv[o]*c%p;\n\t\tsumv[o]=sumv[o]*c%p;\n\t\treturn;\n\t}\n\tpushdown(o,r-l+1);\n\tint m=(l+r)>>1;\n\tif (L<=m) multiplicate(L,R,c,ls);\n\tif (R>m)  multiplicate(L,R,c,rs);\n\tpushup(o);\n}\n\nvoid add(int L,int R,int c,int l,int r,int o)\n{\n\tif (L<=l && R>=r)\n\t{\n\t\taddv[o]=(addv[o]+c)%p;\n\t\tsumv[o]=(sumv[o]+c*(r-l+1))%p;\n\t\treturn;\n\t}\n\tpushdown(o,r-l+1);\n\tint m=(l+r)>>1;\n\tif (L<=m) add(L,R,c,ls);\n\tif (R>m)  add(L,R,c,rs);\n\tpushup(o);\n}\n\nlong long Querysum(int L,int R,int l,int r,int o)\n{\n\tif (L<=l && R>=r) return sumv[o]%p;\n\tpushdown(o,r-l+1);\n\tint m=(l+r)>>1;\n\tlong long tot=0;\n\tif (L<=m) tot=(tot+Querysum(L,R,ls))%p;\n\tif (R>m)  tot=(tot+Querysum(L,R,rs))%p;\n\tpushup(o);\n\treturn tot;\n}\n```\n\n\n\n## 左偏树\n\n```cpp\ninline int merge(int x,int y)\n{\n\tif (!x || !y) return x+y;\n\tif (val[x]>val[y] || (val[x]==val[y] && x>y))\n\t\tswap(x,y);\n\trs(x)=merge(rs(x),y);\n\tfa[rs(x)]=x;\n\tif (dis[rs(x)]>dis[ls(x)]) swap(ls(x),rs(x));\n\tdis[x]=dis[rs(x)]+1;\n\treturn x;\n}\n\ninline int findroot(int x)\n{\n\twhile (fa[x]) x=fa[x];\n\treturn x;\n}\n\ninline int pop(int x)\n{\n\tint ret=val[x];\n\tfa[ls(x)]=fa[rs(x)]=0;\n\tval[x]=-1;\n\tmerge(ls(x),rs(x));\n\tls(x)=rs(x)=0;\n\treturn ret;\n}\n```\n\n\n\n## 主席树\n\n```cpp\ninline void insert(int x,int &rt,int oldrt,int l,int r)\n{\n    rt=++num;\n    tree[rt]=tree[oldrt];\n    ++tree[rt].sumv;\n    if (l==r) return;\n    int m=(l+r)>>1;\n    if (x<=m) insert(x,tree[rt].ls,tree[oldrt].ls,l,m);\n        else insert(x,tree[rt].rs,tree[oldrt].rs,m+1,r);\n}\n\ninline int query(int x,int lrt,int rrt,int l,int r)\n{\n    if (l==r) return l;\n    int m=(l+r)>>1;\n    int k=tree[tree[rrt].ls].sumv-tree[tree[lrt].ls].sumv;\n    if (x<=k) return query(x,tree[lrt].ls,tree[rrt].ls,l,m);\n        else return query(x-k,tree[lrt].rs,tree[rrt].rs,m+1,r);\n}\n\n```\n\n\n\n## CDQ分治（三维偏序）\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n\nusing std::sort;\n\nconst int maxn=1e5+1000;\n\nstruct Tuple\n{\n    int a,b,c,cnt,ans;\n    bool operator< (const Tuple& Tp) const \n    {\n        if (a!=Tp.a) return a<Tp.a;\n        if (b!=Tp.b) return b<Tp.b;\n        return c<Tp.c;\n    }\n    bool operator!= (const Tuple& Tp)\n    {\n        return a!=Tp.a || b!=Tp.b || c!=Tp.c;\n    }\n}tmp[maxn],a[maxn];\n\nstruct cmp\n{\n    bool operator() (const Tuple& a,const Tuple& b)\n    {\n        if (a.b!=b.b) return a.b<b.b;\n        return a.c<b.c;\n    }\n};\n\nint c[maxn*2],n,k;\n\ninline void update(int x,int y)\n{\n    for (int i=x;i<=k;i+=i&-i) c[i]+=y;\n}\n\ninline int query(int x)\n{\n    int ans=0;\n    for (int i=x;i;i-=i&-i) ans+=c[i];\n    return ans;\n}\n\nvoid solve(int l,int r)\n{\n    if (l==r) return;\n    int mid=(l+r)>>1;\n    solve(l,mid);solve(mid+1,r);\n    sort(a+l,a+mid+1,cmp());sort(a+mid+1,a+r+1,cmp());\n    for (int t1=l,t2=mid+1;t2<=r;++t2)\n    {\n        while (a[t1].b<=a[t2].b && t1<=mid) update(a[t1].c,a[t1].cnt),++t1;\n        a[t2].ans+=query(a[t2].c);\n    }\n    for (int i=l;i<=mid;++i) \n        if (a[i].b<=a[r].b) update(a[i].c,-a[i].cnt);\n            else break;\n    // memset(c,0,sizeof(c));\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&k);\n    for (int i=1;i<=n;++i) \n        scanf(\"%d%d%d\",&tmp[i].a,&tmp[i].b,&tmp[i].c);\n    std::sort(tmp+1,tmp+n+1);\n    int tot;a[tot=1]=tmp[1];a[1].cnt=1;\n    for (int i=2;i<=n;++i)\n        if (tmp[i]!=tmp[i-1]) a[++tot]=tmp[i],a[tot].cnt=1;\n            else ++a[tot].cnt;\n    solve(1,tot);\n    // for (int i=1;i<=tot;++i) printf(\"%d \",a[i].ans);\n    static int ans[maxn];\n    for (int i=1;i<=tot;++i) ans[a[i].ans+a[i].cnt-1]+=a[i].cnt;\n    for (int i=0;i<n;++i) printf(\"%d\\n\",ans[i]);\n}\n```\n\n\n\n## 点分治\n\n```cpp\nvoid getroot(int u,int fa)\n{\n    mxsiz[u]=0;siz[u]=1;\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (vis[v] || v==fa) continue;\n        getroot(v,u);\n        siz[u]+=siz[v];\n        mxsiz[u]=max(mxsiz[u],siz[v]);\n    }\n    mxsiz[u]=max(mxsiz[u],S-siz[u]);\n    if (mxsiz[u]<mxsiz[root]) root=u;\n}\n\nvoid getdis(int u,int fa,int d)\n{\n    tmp[++cnt]=d;\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (vis[v] || v==fa) continue;\n        getdis(v,u,d+edge[i].w);\n    }\n}\n\nvoid getans(int opt)\n{\n    sort(tmp+1,tmp+cnt+1);\n    for (int u=1;u<=cnt;++u)\n    {\n        for (int t=1;t<=m;++t)\n        {\n            pair<int*,int*> p=equal_range(tmp+1,tmp+cnt+1,query[t]-tmp[u]);\n            if (p.second!=p.first) count[t]+=opt*(p.second-p.first);\n            // assert(p.second==p.first);\n        }\n    }\n}\n\nvoid solve(int u)\n{\n    vis[u]=1;\n    getdis(u,cnt=0,0);\n    getans(1);\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (vis[v]) continue;\n        getdis(v,cnt=0,edge[i].w);\n        getans(-1);\n        mxsiz[root=0]=0x3f3f3f3f;\n        S=siz[v];\n        getroot(v,0);\n        solve(v);\n    }\n}\n```\n\n## 笛卡尔树(Luogu P3793)\n```cpp\n#include <cstdio>\n\ntypedef long long unsigned int uint64_t;\n\nnamespace GenHelper\n{\n    unsigned z1,z2,z3,z4,b;\n    unsigned rand_()\n    {\n        b=((z1<<6)^z1)>>13;\n        z1=((z1&4294967294U)<<18)^b;\n        b=((z2<<2)^z2)>>27;\n        z2=((z2&4294967288U)<<2)^b;\n        b=((z3<<13)^z3)>>21;\n        z3=((z3&4294967280U)<<7)^b;\n        b=((z4<<3)^z4)>>12;\n        z4=((z4&4294967168U)<<13)^b;\n        return (z1^z2^z3^z4);\n    }\n}\n\nvoid srand(unsigned x)\n{\n    using namespace GenHelper;\n    z1=x; \n    z2=(~x)^0x233333333U; \n    z3=x^0x1234598766U; \n    z4=(~x)+51;\n}\n\nint read()\n{\n    using namespace GenHelper;\n    int a=rand_()&32767;\n    int b=rand_()&32767;\n    return a*32768+b;\n}\n\nconst int maxn=2e7+1000;\nconst int INF=0x7fffffff;\n\nint a[maxn],ls[maxn],rs[maxn],root;\n\ninline void init(int n)\n{\n    static int stack[maxn];\n    int top=0;\n    a[0]=-INF;\n    for (int i=1;i<=n;++i)\n    {\n        while (top && a[stack[top]]<=a[i]) ls[i]=stack[top--];\n        rs[stack[top]]=i;\n        stack[++top]=i;\n    }\n    root=stack[1];\n}\n\ninline uint64_t query(int l,int r)\n{\n    for (int x=root;;x=x<l?rs[x]:ls[x])\n        if (x>=l && x<=r) return a[x];\n}\n\nint main()\n{\n    int n,m,s;\n    scanf(\"%d%d%d\",&n,&m,&s);\n    srand(s);\n    for (int i=1;i<=n;++i) a[i]=read();\n    uint64_t ans=0;int l,r;\n    init(n);\n    for (int i=1;i<=m;++i)\n    {\n        l=read()%n+1;\n        r=read()%n+1;\n        ans+=l>r?query(r,l):query(l,r);\n    }\n    printf(\"%llu\",ans);\n}\n```\n\n## 树链剖分(LOJ模板题，带换根)\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#define ls l,m,o<<1\n#define rs m+1,r,o<<1|1\n\ntypedef long long ll;\n\nconst int maxn=1e5+1000;\n\nint val[maxn],top[maxn],fa[maxn],siz[maxn],son[maxn];\nint f[maxn][30],depth[maxn],head[maxn],cnt,root,id[maxn],w[maxn];\nll sumv[maxn<<2],addv[maxn<<2],tot,n;\n\nstruct Edge\n{\n    int to,next;\n}edge[maxn<<1];\n\ninline void _add(int u,int v)\n{\n    edge[++cnt].next=head[u];\n    edge[cnt].to=v;\n    head[u]=cnt;\n}\n\ninline void add(int u,int v)\n{\n    _add(u,v);_add(v,u);\n}\n\nvoid dfs(int u,int fa,int dep)\n{\n    depth[u]=dep;\n    ::fa[u]=fa;\n    siz[u]=1;int maxs=-1;\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=fa)\n        {\n            dfs(v,u,dep+1);\n            siz[u]+=siz[v];\n            if (siz[v]>maxs) son[u]=v,maxs=siz[v];\n        }\n    }\n}\n\nvoid dfs(int u,int topf)\n{\n    id[u]=++tot;\n    w[tot]=val[u];\n    top[u]=topf;\n    if (!son[u]) return;\n    dfs(son[u],topf);\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=fa[u] && v!=son[u]) dfs(v,v);\n    }\n}\n\ninline void pushup(int o){sumv[o]=sumv[o<<1]+sumv[o<<1|1];}\n\ninline void pushdown(int o,int len)\n{\n    addv[o<<1]+=addv[o];\n    addv[o<<1|1]+=addv[o];\n    sumv[o<<1]+=addv[o]*(len-(len>>1));\n    sumv[o<<1|1]+=addv[o]*(len>>1);\n    addv[o]=0;\n}\n\nvoid build(int l,int r,int o)\n{\n    if (l==r) {sumv[o]=w[l];return;}\n    int m=(l+r)>>1;\n    build(ls);build(rs);\n    pushup(o);\n}\n\nvoid update(int L,int R,int c,int l,int r,int o)\n{\n    if (L<=l && R>=r)\n    {\n        addv[o]+=c;\n        sumv[o]+=c*(r-l+1);\n        return;\n    }\n    pushdown(o,r-l+1);\n    int m=(l+r)>>1;\n    if (L<=m) update(L,R,c,ls);\n    if (R> m) update(L,R,c,rs);\n    pushup(o);\n}\n\nll query(int L,int R,int l,int r,int o)\n{\n    if (L<=l && R>=r) return sumv[o];\n    int m=(l+r)>>1;\n    pushdown(o,r-l+1);\n    ll tot=0;\n    if (L<=m) tot+=query(L,R,ls);\n    if (R> m) tot+=query(L,R,rs);\n    return tot;\n}\n\ninline void AddRoute(int u,int v,int k)\n{\n    while (top[u]!=top[v])\n    {\n        if (depth[top[u]]<depth[top[v]]) u^=v^=u^=v;\n        update(id[top[u]],id[u],k,1,n,1);\n        u=fa[top[u]];\n    }\n    if (depth[u]>depth[v]) u^=v^=u^=v;\n    update(id[u],id[v],k,1,n,1);\n}\n\ninline ll QueryRoute(int u,int v)\n{\n    ll ans=0;\n    while (top[u]!=top[v])\n    {\n        if (depth[top[u]]<depth[top[v]]) u^=v^=u^=v;\n        ans+=query(id[top[u]],id[u],1,n,1);\n        u=fa[top[u]];\n    }\n    if (depth[u]>depth[v]) u^=v^=u^=v;\n    ans+=query(id[u],id[v],1,n,1);\n    return ans;\n}\n\ninline int lca(int u,int v)\n{\n    while (top[u]!=top[v])\n    {\n        if (depth[top[u]]<depth[top[v]]) u^=v^=u^=v;\n        u=fa[top[u]];\n    }\n    return depth[u]>depth[v]?v:u;\n}\n\ninline int get_son(int u,int prec)\n{\n    for (int i=20;~i;--i)\n        if (depth[f[u][i]]>depth[prec]) u=f[u][i];\n    return u;\n}\n\ninline void AddSubTree(int u,int k)\n{\n    if (u==root) update(1,n,k,1,n,1);\n    else if (lca(u,root)!=u)\n        update(id[u],id[u]+siz[u]-1,k,1,n,1);\n    else\n    {\n        update(1,n,k,1,n,1);\n        int v=get_son(root,u);\n        update(id[v],id[v]+siz[v]-1,-k,1,n,1);\n    }\n}\n\ninline ll QuerySubTree(int u)\n{\n    if (u==root) return query(1,n,1,n,1);\n    else if (lca(u,root)!=u)\n        return query(id[u],id[u]+siz[u]-1,1,n,1);\n    else\n    {\n        int v=get_son(root,u);\n        return query(1,n,1,n,1)-query(id[v],id[v]+siz[v]-1,1,n,1);\n    }\n        // return query(1,n,1,n,1)-query(id[u]+1,id[u]+siz[u]-1,1,n,1);\n        // // else return query(1,n,1,n,1);\n}\n\ninline void get_anc()\n{\n    for (int i=1;i<=n;++i) f[i][0]=fa[i];\n    for (int i=1;i<=20;++i)\n        for (int u=1;u<=n;++u)\n            f[u][i]=f[f[u][i-1]][i-1];\n}\n\nint main()\n{\n    // freopen(\"tree2.in\",\"r\",stdin);\n    // freopen(\"tree20.out\",\"w\",stdout);\n    int m;\n    scanf(\"%d\",&n);root=1;\n    for (int i=1;i<=n;++i) scanf(\"%d\",val+i);\n    for (int i=1,tmp;i<n;++i) scanf(\"%d\",&tmp),add(tmp,i+1);\n    dfs(1,0,1);dfs(1,1);build(1,n,1);get_anc();\n    scanf(\"%d\",&m);\n    for (int i=1,opt,u,v,k;i<=m;++i)\n    {\n        scanf(\"%d\",&opt);\n        switch (opt)\n        {\n            case 1:scanf(\"%d\",&root);break;\n            case 2:scanf(\"%d%d%d\",&u,&v,&k);AddRoute(u,v,k);break;\n            case 3:scanf(\"%d%d\",&u,&k);AddSubTree(u,k);break;\n            case 4:scanf(\"%d%d\",&u,&v);printf(\"%lld\\n\",QueryRoute(u,v));break;\n            case 5:scanf(\"%d\",&u);printf(\"%lld\\n\",QuerySubTree(u));break;\n        }\n    }\n}\n```\n\n\n\n## LCT\n\n```cpp\n#include <cstdio>\n#define ls(x) (ch[x][0])\n#define rs(x) (ch[x][1])\n\nconst int maxn=3e5+1000;\n\nint val[maxn],ch[maxn][2],fa[maxn],rev[maxn],s[maxn];\n\ninline void swap(int &a,int &b){a^=b^=a^=b;}\ninline bool nroot(int x){return ls(fa[x])==x || rs(fa[x])==x;}\ninline void pushup(int x){s[x]=s[ls(x)]^s[rs(x)]^val[x];}\n\ninline void pushr(int x)\n{\n    swap(ls(x),rs(x));rev[x]^=1;\n}\n\ninline void pushdown(int x)\n{\n    if (rev[x]) pushr(ls(x)),pushr(rs(x)),rev[x]=0;\n}\n\ninline void rotate(int x)\n{\n    int y=fa[x],z=fa[y],k=ch[y][1]==x;\n    if (nroot(y)) ch[z][ch[z][1]==y]=x;\n    fa[x]=z;\n    ch[y][k]=ch[x][k^1];\n    if (ch[x][k^1]) fa[ch[x][k^1]]=y;\n    ch[x][k^1]=y;\n    fa[y]=x;\n    pushup(y);pushup(x);\n}\n\ninline void splay(int x)\n{\n    static int stack[maxn];\n    int y=x,z=0;\n    while (nroot(y)) stack[++z]=y,y=fa[y];\n    stack[++z]=y;\n    while (z) pushdown(stack[z--]);\n    while (nroot(x))\n    {\n        y=fa[x],z=fa[y];\n        if (nroot(y)) rotate(((ls(z)==y)^(ls(y)==x))?x:y);\n        rotate(x);\n    }\n}\n\ninline void access(int x)\n{\n    for (int y=0;x;y=x,x=fa[x])\n        splay(x),ch[x][1]=y,pushup(x);\n}\n\ninline void makeroot(int x)\n{\n    access(x);splay(x);pushr(x);\n}\n\ninline int findroot(int x)\n{\n    access(x);\n    splay(x);\n    while (ls(x)) pushdown(x),x=ls(x);// 这里一定记得pushdown!\n    splay(x);\n    return x;\n}\n\ninline void link(int x,int y)\n{\n    makeroot(x);\n    if (findroot(y)!=x) fa[x]=y;\n}\n\ninline void cut(int x,int y)\n{\n    makeroot(x);\n    if (findroot(y)==x && fa[y]==x && !ch[y][0]) ch[x][1]=fa[y]=0,pushup(x);\n}\n\ninline void modify(int x,int y)\n{\n    splay(x);\n    s[x]^=val[x];\n    val[x]=y;\n    s[x]^=val[x];\n}\n\ninline void split(int x,int y)\n{\n    makeroot(x);access(y);splay(y);\n}\n\ninline int query(int x,int y){split(x,y);return s[y];}\n\nint main()\n{\n    int n,m;\n    scanf(\"%d%d\",&n,&m);\n    for (int i=1;i<=n;++i)\n        scanf(\"%d\",val+i);\n    for (int i=1,opt,x,y;i<=m;++i)\n    {\n        scanf(\"%d%d%d\",&opt,&x,&y);\n        switch (opt)\n        {\n            case 0:printf(\"%d\\n\",query(x,y));break;\n            case 1:link(x,y);break;\n            case 2:cut(x,y);break;\n            case 3:modify(x,y);break;\n        }\n    }\n}\n```\n\n## K-D Tree\n```cpp\n#include <cstdio>\n#include <algorithm>\n\nusing std::nth_element;\nusing std::min;\nusing std::max;\n\nconst int maxn=1e6+100;\nconst int INF=0x3f3f3f3f;\n\nstruct Point\n{\n    int x,y;\n    Point(){}\n    Point(int x,int y):x(x),y(y){}\n};\n\nstruct KDTree\n{\n    static constexpr double alpha=0.75;\n    int root;\n    struct Node\n    {\n        int val,siz,sum;\n        int ch[2];\n        Point mn,mx,now;\n    }t[maxn];\n    int top,has_rebuild,fa_rebuild,k_rebuild;\n    KDTree(){t[0].mn=Point(INF,INF);t[0].mx=Point(-INF,-INF);}\n    int trash[maxn],Trash;\n    inline bool isbad(int o){return t[t[o].ch[0]].siz>t[o].siz*alpha || t[t[o].ch[1]].siz>t[o].siz*alpha;}\n    inline void pushup(int o)\n    {\n        t[o].siz=t[t[o].ch[0]].siz+t[t[o].ch[1]].siz+1;\n        t[o].sum=t[t[o].ch[0]].sum+t[t[o].ch[1]].sum+t[o].val;\n        t[o].mn.x=min({t[o].now.x,t[t[o].ch[0]].mn.x,t[t[o].ch[1]].mn.x});\n        t[o].mn.y=min({t[o].now.y,t[t[o].ch[0]].mn.y,t[t[o].ch[1]].mn.y});\n        t[o].mx.y=max({t[o].now.y,t[t[o].ch[0]].mx.y,t[t[o].ch[1]].mx.y});\n        t[o].mx.x=max({t[o].now.x,t[t[o].ch[0]].mx.x,t[t[o].ch[1]].mx.x});\n    }\n    inline void dfs(int o)\n    {\n        if (!o) return;\n        if (t[o].ch[0]) dfs(t[o].ch[0]);\n        trash[++Trash]=o;\n        if (t[o].ch[1]) dfs(t[o].ch[1]);\n    }\n    inline int _rebuild(int l,int r,int k)\n    {\n        if (l>r) return 0;\n        int mid=(l+r)>>1;\n        int x=trash[mid];\n        if (l==r) \n        {\n            t[x].ch[0]=t[x].ch[1]=0;\n            t[x].mn=t[x].mx=t[x].now;\n            t[x].siz=1;\n            t[x].sum=t[x].val;\n            return x;\n        }\n        if (k==1) nth_element(trash+l,trash+mid+1,trash+r+1,[this](const int x,const int y) ->bool {return t[x].now.x<t[y].now.x;});\n        else nth_element(trash+l,trash+mid+1,trash+r+1,[this](const int x,const int y) ->bool {return t[x].now.y<t[y].now.y;});\n        x=trash[mid];\n        t[x].ch[0]=_rebuild(l,mid-1,k^1);\n        t[x].ch[1]=_rebuild(mid+1,r,k^1);\n        pushup(x);\n        return x;\n    }\n    inline int rebuild(int o,int k)\n    {\n        Trash=0;\n        dfs(o);\n        if (Trash) return _rebuild(1,Trash,k);\n        return 0;\n    }\n    void _insert(const Point& p,const int x,int& o,int k)\n    {\n        if (!o)\n        {\n            o=++top;\n            t[o].sum=t[o].val=x;\n            t[o].mn=t[o].mx=t[o].now=p;\n            t[o].siz=1;\n            return;\n        }\n        if (k&1) _insert(p,x,t[o].ch[t[o].now.x<=p.x],0);\n        else _insert(p,x,t[o].ch[t[o].now.y<=p.y],1);\n        pushup(o);\n        if (isbad(t[o].ch[0])) has_rebuild=t[o].ch[0],fa_rebuild=o,k_rebuild=k^1;\n        else if (isbad(t[o].ch[1])) has_rebuild=t[o].ch[1],fa_rebuild=o,k_rebuild=k^1;\n    }\n    inline void insert(const Point& p,const int x)\n    {\n        _insert(p,x,root,0);\n        if (isbad(root)) root=rebuild(root,0);\n        else if (has_rebuild) t[fa_rebuild].ch[t[fa_rebuild].ch[1]==has_rebuild]=rebuild(has_rebuild,k_rebuild);\n        has_rebuild=fa_rebuild=k_rebuild=0;\n    }\n    inline bool check_range(int o,const Point& l,const Point& r)\n    {\n        return t[o].mn.x>=l.x && t[o].mn.y>=l.y && t[o].mx.x<=r.x && t[o].mx.y<=r.y;\n    }\n    inline bool check_point(int o,const Point& l,const Point& r)\n    {\n        return (t[o].now.x>=l.x && t[o].now.x<=r.x) && (t[o].now.y>=l.y && t[o].now.y<=r.y);\n    }\n    inline bool check_have(int o,const Point& l,const Point& r)\n    {\n        return !((t[o].mx.x<l.x) || (t[o].mx.y<l.y) || (t[o].mn.x>r.x) || (t[o].mn.y>r.y));\n    }\n    inline int query(const Point& l,const Point& r,int o)\n    {\n        if (!o) return 0;\n        if (check_range(o,l,r)) return t[o].sum;\n        int ans=0;\n        if (check_point(o,l,r)) ans+=t[o].val;\n        if (check_have(t[o].ch[0],l,r)) ans+=query(l,r,t[o].ch[0]);\n        if (check_have(t[o].ch[1],l,r)) ans+=query(l,r,t[o].ch[1]);\n        return ans;\n    }\n}T;\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    int opt,x,lastans=0;\n    Point a,b;\n    while (scanf(\"%d\",&opt) && opt!=3 && \"STO LCH OTZ\")\n    {\n        if (opt==1)\n        {\n            scanf(\"%d%d%d\",&a.x,&a.y,&x);\n            a.x^=lastans;a.y^=lastans;x^=lastans;\n            T.insert(a,x);\n        }\n        else\n        {\n            scanf(\"%d%d%d%d\",&a.x,&a.y,&b.x,&b.y);\n            a.x^=lastans;a.y^=lastans;b.x^=lastans;b.y^=lastans;\n            printf(\"%d\\n\",lastans=T.query(a,b,T.root));\n        }\n    }\n}\n```\n\n## 平衡树\n\n### Treap\n\n```cpp\nstruct Treap\n{\n    struct Node\n    {\n    \tint v,s,r,cnt;\n    \tNode* ch[2];\n    \tNode(int v,int s=1):s(s),cnt(s),r(rand()*rand()),v(v){ch[0]=ch[1]=0;}\n    \tinline void pushup()\n    \t{\n    \t\ts=cnt;\n    \t\tif (ch[0]) s+=ch[0]->s;\n    \t\tif (ch[1]) s+=ch[1]->s;\n    \t}\n    \tinline int cmp(int x)\n    \t{\n    \t\treturn v==x?-1:v<x;\n    \t}\n    };\n\tprivate:\n\t\tint __prec,__succ;\n\tpublic:\n\t\tTreap():__prec(0),__succ(0),root(0){}\n\t\tNode *root;\n\t\tinline void rotate(Node* &o,int d)\n\t\t{\n\t\t\tNode *k=o->ch[d^1];\n\t\t\to->ch[d^1]=k->ch[d];\n\t\t\tk->ch[d]=o;\n\t\t\to->pushup();\n\t\t\tk->pushup();\n\t\t\to=k;\n\t\t}\n\t\n\t\tinline void _insert(Node* &o,int x,int t=1)\n\t\t{\n\t\t\tif (!o){o=new Node(x,t);return;}\n\t\t\tint d=o->cmp(x);\n\t\t\tif (d==-1) {o->cnt+=t;o->s+=t;return;}\n\t\t\t_insert(o->ch[d],x,t);\n\t\t\tif (o->ch[d]->r > o->r) rotate(o,d^1);\n\t\t\to->pushup();\n\t\t}\n\t\tinline void insert(int x,int k=1){_insert(root,x,k);}\n\t\n\t\tinline void _remove(Node* &o,int x)\n\t\t{\n\t\t\tif (!o) return;\n\t\t\tint d=o->cmp(x);\n\t\t\tif (d==-1) \n\t\t\t{\n\t\t\t\tif (o->cnt>1) {--o->cnt;--o->s;return;}\n\t\t\t\tif (!(o->ch[0])){Node* k=o;o=o->ch[1];delete k;return;}\n\t\t\t\telse if (!(o->ch[1])){Node* k=o;o=o->ch[0];delete k;return;}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tint d2=(o->ch[0]->r > o->ch[1]->r);\n\t\t\t\t\trotate(o,d2);\n\t\t\t\t\t_remove(o->ch[d2],x);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse _remove(o->ch[d],x);\n\t\t\tif (o) o->pushup();\n\t\t}\n\t\tinline void remove(int x){_remove(root,x);}\n\t\n\t\tinline int _kth(Node* o,int k)\n\t\t{\n\t\t\tif (!o || k<=0) return INT_MIN;\n\t\t\tint s=o->ch[0]?o->ch[0]->s:0;\n\t\t\tif (k>=s+1 && k<=s+o->cnt) return o->v;\n\t\t\tif (k<=s) return _kth(o->ch[0],k);\n\t\t\treturn _kth(o->ch[1],k-s-o->cnt);\n\t\t}\n\t\tinline int kth(int k){return _kth(root,k);}\n\t\n\t\tinline int _rank(Node* o,int x)\n\t\t{\n\t\t\tif (!o) return 1;\n\t\t\tint s=o->ch[0]?o->ch[0]->s:0;\n\t\t\tif (o->v==x) return s+1;\n\t\t\tif (o->v<x) return s+o->cnt+_rank(o->ch[1],x);\n\t\t\treturn _rank(o->ch[0],x);\n\t\t}\n\t\tinline int rank(int x){return _rank(root,x);}\n\t\t\n\t\tinline int _count(Node* o,int x)\n\t\t{\n\t\t\tif (!o) return 0;\n\t\t\tint d=o->cmp(x);\n\t\t\tif (~d) return _count(o->ch[d],x);\n\t\t\treturn o->cnt;\n\t\t}\n\t\tinline int count(int x){return _count(root,x);}\n\t\n\t\tinline void _prec(Node* o,int x)\n\t\t{\n\t\t\tif (!o) return;\n\t\t\tif (o->v<x) __prec=max(__prec,o->v);\n\t\t\tif (o->v>=x) _prec(o->ch[0],x);\n\t\t\t\telse _prec(o->ch[1],x);\n\t\t}\n\t\tinline void _succ(Node* o,int x)\n\t\t{\n\t\t\tif (!o) return;\n\t\t\tif (o->v>x) __succ=min(__succ,o->v);\n\t\t\tif (o->v<=x) _succ(o->ch[1],x);\n\t\t\t\telse _succ(o->ch[0],x);\n\t\t}\n\t\tinline int prec(int x){__prec=INT_MIN+1;_prec(root,x);return __prec;}\n\t\tinline int succ(int x){__succ=INT_MAX  ;_succ(root,x);return __succ;}\n}T;\n```\n\n### 替罪羊树\n```cpp\n#include <cstdio>\n#include <vector>\n#include <cassert>\n\nusing std::vector;\n\nconst int maxn=1e5+1000;\n\nstruct Scapegoat_Tree\n{\n    int root,has_rebuild,fa;\n#if __cplusplus >= 201103L\n    static constexpr double alpha=0.75;\n#else \n    static const double alpha=0.75;\n#endif\n    struct Node\n    {\n        int siz,cnt,val;\n        bool deleted;\n        int ch[2];\n    }t[maxn];\n    inline bool isbad(int x){return t[t[x].ch[0]].cnt>t[x].cnt*alpha || t[t[x].ch[1]].cnt>t[x].cnt*alpha;}\n    inline void maintain(int x){t[x].siz=t[t[x].ch[0]].siz+t[t[x].ch[1]].siz+!t[x].deleted;t[x].cnt=t[t[x].ch[0]].cnt+t[t[x].ch[1]].cnt+1;}\n    int pool[maxn],top;\n    vector<int> tmp;\n    Scapegoat_Tree(){for (int i=1;i<maxn;++i) pool[++top]=i;}\n    void dfs(int o)\n    {\n        if (t[o].ch[0]) dfs(t[o].ch[0]);\n        if (!t[o].deleted) tmp.push_back(o);\n        else pool[++top]=o;\n        if (t[o].ch[1]) dfs(t[o].ch[1]);\n    }\n    int _rebuild(int l,int r)\n    {\n        if (l>r) return 0;\n        int mid=(l+r)>>1,o=tmp[mid];\n        if (l==r) t[o].siz=t[o].cnt=1;\n        t[o].ch[0]=_rebuild(l,mid-1);\n        t[o].ch[1]=_rebuild(mid+1,r);\n        maintain(o);\n        return o;\n    }\n    int rebuild(int o)\n    {\n        tmp.clear();\n        dfs(o);\n        return _rebuild(0,tmp.size()-1);\n    }\n    void _insert(int x,int &o)\n    {\n        if (!o)\n        {\n            o=pool[top--];\n            t[o].siz=t[o].cnt=1;\n            t[o].val=x;\n            t[o].deleted=false;\n            t[o].ch[0]=t[o].ch[1]=0;\n            return;\n        }\n        ++t[o].siz;++t[o].cnt;\n        int d=(t[o].val<=x);\n        _insert(x,t[o].ch[d]);\n        // if (isbad(o)) o=rebuild(o);//need repair?\n        if (isbad(t[o].ch[0])) has_rebuild=t[o].ch[0],fa=o;\n        else if (isbad(t[o].ch[1])) has_rebuild=t[o].ch[1],fa=o;\n        // maintain(o);\n    }\n    void insert(int x) \n    {\n        _insert(x,root);\n        if (has_rebuild) t[fa].ch[t[fa].ch[1]==has_rebuild]=rebuild(has_rebuild);\n        fa=has_rebuild=0;\n    }\n    void _remove_kth(int x,int o)\n    {\n        if (t[t[o].ch[0]].siz+1==x && !t[o].deleted)\n        {\n            t[o].deleted=true;\n            t[o].siz--;\n            return;\n        }\n        --t[o].siz;\n        if (t[t[o].ch[0]].siz>=x) _remove_kth(x,t[o].ch[0]);\n        else _remove_kth(x-t[t[o].ch[0]].siz-!t[o].deleted,t[o].ch[1]);\n        // maintain(o);\n    }\n    void remove_kth(int x)\n    {\n        _remove_kth(x,root);\n        if (t[root].cnt*alpha>t[root].siz) root=rebuild(root);\n        fa=has_rebuild=0;\n    }\n    int rank(int x)\n    {\n        int ans=1;\n        int o=root;\n        while (o)\n            if (t[o].val>=x) o=t[o].ch[0];\n            else ans+=t[t[o].ch[0]].siz+!t[o].deleted,o=t[o].ch[1]; \n        return ans;\n    }\n    int kth(int k)\n    {\n        int o=root;\n        while (1)\n        {\n            int s=t[t[o].ch[0]].siz;\n            if (!t[o].deleted && s+1==k) return t[o].val;\n            if (s>=k) o=t[o].ch[0];\n            else k-=s+!t[o].deleted,o=t[o].ch[1];\n        }\n    }\n    void print(int o)\n    {\n        if (!o) return;\n        print(t[o].ch[0]);\n        // printf(\"sizls=%d sizrs=%d ,siz=%d\\n\",t[t[o].ch[0]].siz,t[t[o].ch[1]].siz,t[o].siz);\n        if (!t[o].deleted) printf(\"%d \",t[o].val);\n        print(t[o].ch[1]);\n    }\n    /* data */\n}T;\n\nint main()\n{\n    int n;\n    scanf(\"%d\",&n);\n    for (int i=1,opt,x;i<=n;++i)\n    {\n        scanf(\"%d%d\",&opt,&x);\n        switch (opt)\n        {\n            case 1:\n                T.insert(x);\n                break;\n            case 2:\n                T.remove_kth(T.rank(x));\n                break;\n            case 3:\n                printf(\"%d\\n\",T.rank(x));\n                break;\n            case 4:\n                printf(\"%d\\n\",T.kth(x));\n                break;\n            case 5:\n                printf(\"%d\\n\",T.kth(T.rank(x)-1));\n                break;\n            case 6:\n                printf(\"%d\\n\",T.kth(T.rank(x+1)));\n                break;\n        }\n        // T.print(T.root);putchar('\\n');\n        // T.root=T.rebuild(T.root);\n    }\n}\n```\n\n### Splay\n\n```cpp\nstruct Splay\n{\n    int root,cnt;\n    struct Node\n    {\n        int val,size,ff,ch[2],cnt;\n    }t[maxn];\n\n    inline void pushup(int x)\n    {\n        t[x].size=t[x].cnt+t[t[x].ch[0]].size+t[t[x].ch[1]].size;\n    }\n\n    inline void rotate(int x)\n    {\n        int y=t[x].ff,z=t[y].ff;\n        int k=(t[y].ch[1]==x);\n        t[z].ch[t[z].ch[1]==y]=x;\n        t[x].ff=z;\n        t[y].ch[k]=t[x].ch[k^1];\n        t[t[x].ch[k^1]].ff=y;\n        t[y].ff=x;\n        t[x].ch[k^1]=y;\n        pushup(y);pushup(x);\n    }\n\n    inline void splay(int x,int goal)\n    {\n        while (t[x].ff!=goal)\n        {\n            int y=t[x].ff,z=t[y].ff;\n            if (z!=goal) rotate((t[z].ch[1]==y)^(t[y].ch[1]==x)?x:y);\n            rotate(x);\n        }\n        if (!goal) root=x;\n    }\n\n    inline void insert(int x)\n    {\n        int u=root,ff=0;\n        while (t[u].val!=x && u)\n        {\n            ff=u;\n            u=t[u].ch[t[u].val<x];\n        }\n        if (u) {++t[u].cnt;splay(u,0);return;}\n        u=++cnt;\n        if (ff) t[ff].ch[x>t[ff].val]=u;\n        t[u].ff=ff;\n        t[u].ch[0]=t[u].ch[1]=0;\n        t[u].size=1;\n        t[u].cnt=1;\n        t[u].val=x;\n        splay(u,0);\n    }\n\n    inline void find(int x)\n    {\n        int u=root;\n        if (!u) return;\n        while (t[u].ch[t[u].val<x] && t[u].val!=x) u=t[u].ch[t[u].val<x];\n        splay(u,0);\n    }\n\n    inline int Next(int x,int type)\n    {\n        find(x);\n        int u=root;\n        if (t[u].val>x && type) return u;\n        if (t[u].val<x && !type) return u;\n        u=t[u].ch[type];\n        while (t[u].ch[type^1])u=t[u].ch[type^1];\n        splay(u,0);\n        return u;\n    }\n\n    inline void Delete(int x)\n    {\n        int prev=Next(x,0),succ=Next(x,1);\n        splay(prev,0);splay(succ,prev);\n        int u=t[succ].ch[0];\n        if (t[u].cnt>1){--t[u].cnt;splay(u,0);return;}\n            else t[succ].ch[0]=0;\n    }\n\n    inline int kth(int k)\n    {\n        int u=root;\n        if (t[u].size<k) return inf;\n        while (19260817)\n        {\n            int s=t[t[u].ch[0]].size;\n            if (s+t[u].cnt<k)\n                k-=s+t[u].cnt,u=t[u].ch[1];\n            else if (k<=s)\n                u=t[u].ch[0];\n            else {splay(u,0);return t[u].val;}\n        } \n    }\n}T;\n```\n\n### 权值线段树\n\n```cpp\nvoid insert(int x,int l=1,int r=n,int o=1)\n{\n    ++sumv[o];\n    if (l==r) return;\n    int m=(l+r)>>1;\n    if (x<=m) insert(x,ls);\n        else insert(x,rs);\n}\n\ninline void remove(int x,int l=1,int r=n,int o=1)\n{\n    --sumv[o];\n    if (l==r) return;\n    int m=(l+r)>>1;\n    if (x<=m) remove(x,ls);\n        else remove(x,rs);\n} \n\ninline int count(int x,int l=1,int r=n,int o=1)\n{\n    if (l==r) return sumv[o];\n    int m=(l+r)>>1;\n    if (x<=m) return count(x,ls);\n        else return count(x,rs);\n}\n\ninline int rank(int x,int l=1,int r=n,int o=1)\n{\n    if (l==r) return 1;\n    int m=(l+r)>>1;\n    if (x<=m) return rank(x,ls);\n        else return rank(x,rs)+sumv[o<<1];\n}\n\ninline int kth(int k,int l=1,int r=n,int o=1)\n{\n    if (l==r) return l;\n    int m=(l+r)>>1;\n    if (k<=sumv[o<<1]) return kth(k,ls);\n        return kth(k-sumv[o<<1],rs);\n}\n\ninline int prec(int x)\n{\n    return kth(rank(x)-1);\n}\n\ninline int succ(int x)\n{\n    return kth(rank(x)+count(x));\n}\n\ninline int get_rnk(int i)\n{\n    return lower_bound(b+1,b+n+1,i)-b;\n}\n\n```\n\n\n\n## 树套树\n\n```cpp\nstruct Node\n{\n\tint v,s,r,cnt;\n\tNode* ch[2];\n\tNode(int v,int s=1):s(s),cnt(s),r(rand()*rand()),v(v){ch[0]=ch[1]=0;}\n\tinline void pushup()\n\t{\n\t\ts=cnt;\n\t\tif (ch[0]) s+=ch[0]->s;\n\t\tif (ch[1]) s+=ch[1]->s;\n\t}\n\tinline int cmp(int x)\n\t{\n\t\treturn v==x?-1:v<x;\n\t}\n};\n\nstruct Treap\n{\n\tprivate:\n\t\tint __prec,__succ;\n\tpublic:\n\t\tTreap():__prec(0),__succ(0),root(0){}\n\t\tNode *root;\n\t\tinline void rotate(Node* &o,int d)\n\t\t{\n\t\t\tNode *k=o->ch[d^1];\n\t\t\to->ch[d^1]=k->ch[d];\n\t\t\tk->ch[d]=o;\n\t\t\to->pushup();\n\t\t\tk->pushup();\n\t\t\to=k;\n\t\t}\n\t\n\t\tinline void _insert(Node* &o,int x,int t=1)\n\t\t{\n\t\t\tif (!o){o=new Node(x,t);return;}\n\t\t\tint d=o->cmp(x);\n\t\t\tif (d==-1) {o->cnt+=t;o->s+=t;return;}\n\t\t\t_insert(o->ch[d],x,t);\n\t\t\tif (o->ch[d]->r > o->r) rotate(o,d^1);\n\t\t\to->pushup();\n\t\t}\n\t\tinline void insert(int x,int k=1){_insert(root,x,k);}\n\t\n\t\tinline void _remove(Node* &o,int x)\n\t\t{\n\t\t\tif (!o) return;\n\t\t\tint d=o->cmp(x);\n\t\t\tif (d==-1) \n\t\t\t{\n\t\t\t\tif (o->cnt>1) {--o->cnt;--o->s;return;}\n\t\t\t\tif (!(o->ch[0])){Node* k=o;o=o->ch[1];delete k;return;}\n\t\t\t\telse if (!(o->ch[1])){Node* k=o;o=o->ch[0];delete k;return;}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tint d2=(o->ch[0]->r > o->ch[1]->r);\n\t\t\t\t\trotate(o,d2);\n\t\t\t\t\t_remove(o->ch[d2],x);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse _remove(o->ch[d],x);\n\t\t\tif (o) o->pushup();\n\t\t}\n\t\tinline void remove(int x){_remove(root,x);}\n\t\n\t\tinline int _kth(Node* o,int k)\n\t\t{\n\t\t\tif (!o || k<=0) return INT_MIN;\n\t\t\tint s=o->ch[0]?o->ch[0]->s:0;\n\t\t\tif (k>=s+1 && k<=s+o->cnt) return o->v;\n\t\t\tif (k<=s) return _kth(o->ch[0],k);\n\t\t\treturn _kth(o->ch[1],k-s-o->cnt);\n\t\t}\n\t\tinline int kth(int k){return _kth(root,k);}\n\t\n\t\tinline int _rank(Node* o,int x)\n\t\t{\n\t\t\tif (!o) return 1;\n\t\t\tint s=o->ch[0]?o->ch[0]->s:0;\n\t\t\tif (o->v==x) return s+1;\n\t\t\tif (o->v<x) return s+o->cnt+_rank(o->ch[1],x);\n\t\t\treturn _rank(o->ch[0],x);\n\t\t}\n\t\tinline int rank(int x){return _rank(root,x);}\n\t\t\n\t\tinline int _count(Node* o,int x)\n\t\t{\n\t\t\tif (!o) return 0;\n\t\t\tint d=o->cmp(x);\n\t\t\tif (~d) return _count(o->ch[d],x);\n\t\t\treturn o->cnt;\n\t\t}\n\t\tinline int count(int x){return _count(root,x);}\n\t\n\t\tinline void _prec(Node* o,int x)\n\t\t{\n\t\t\tif (!o) return;\n\t\t\tif (o->v<x) __prec=max(__prec,o->v);\n\t\t\tif (o->v>=x) _prec(o->ch[0],x);\n\t\t\t\telse _prec(o->ch[1],x);\n\t\t}\n\t\tinline void _succ(Node* o,int x)\n\t\t{\n\t\t\tif (!o) return;\n\t\t\tif (o->v>x) __succ=min(__succ,o->v);\n\t\t\tif (o->v<=x) _succ(o->ch[1],x);\n\t\t\t\telse _succ(o->ch[0],x);\n\t\t}\n\t\tinline int prec(int x){__prec=INT_MIN+1;_prec(root,x);return __prec;}\n\t\tinline int succ(int x){__succ=INT_MAX  ;_succ(root,x);return __succ;}\n}tree[maxn<<2];\n\ninline void insert_tree(Treap& t,Node* rt)\n{\n\tif (!rt) return;\n\tt.insert(rt->v,rt->cnt);\n\tinsert_tree(t,rt->ch[0]);\n\tinsert_tree(t,rt->ch[1]);\n}\n\ninline void pushup(int o)\n{\n\tinsert_tree(tree[o],tree[o<<1].root);\n\tinsert_tree(tree[o],tree[o<<1|1].root);\n}\n\ninline void build(int l,int r,int o)\n{\n\tif (l==r) {tree[o].insert(a[l]);return;}\n\tint m=(l+r)>>1;\n\tbuild(ls);\n\tbuild(rs);\n\tpushup(o);\n}\n\ninline int rank(int L,int R,int k,int l,int r,int o)\n{\n\tif (L<=l && R>=r) return tree[o].rank(k);\n\tconst int m=(l+r)>>1;\n\tint tot=0;\n\tif (L<=m) tot+=rank(L,R,k,ls);\n\tif (R> m) tot+=rank(L,R,k,rs);\n\tif (L<=m && R>m) --tot;\n\treturn tot;\n}\n\ninline int count(int L,int R,int x,int l,int r,int o)\n{\n\tif (L<=l && R>=r) return tree[o].count(x);\n\tconst int m=(l+r)>>1;\n\tint tot=0;\n\tif (L<=m) tot+=count(L,R,x,ls);\n\tif (R> m) tot+=count(L,R,x,rs);\n\treturn tot;\n}\n\ninline void update(int p,int x,int l,int r,int o)\n{\n\ttree[o].remove(a[p]);\n\ttree[o].insert(x);\n\tif (l==r) return;\n\tint m=(l+r)>>1;\n\tif (p<=m) update(p,x,ls);\n\t\telse update(p,x,rs);\n}\n\ninline int prec(int L,int R,int x,int l,int r,int o)\n{\n\tif (L<=l && R>=r) return tree[o].prec(x);\n\tint m=(l+r)>>1,ans=INT_MIN+1;\n\tif (L<=m) ans=prec(L,R,x,ls);\n\tif (R>m)  ans=max(ans,prec(L,R,x,rs));\n\treturn ans;\n}\n\ninline int succ(int L,int R,int x,int l,int r,int o)\n{\n\tif (L<=l && R>=r) return tree[o].succ(x);\n\tint m=(l+r)>>1,ans=INT_MAX;\n\tif (L<=m) ans=succ(L,R,x,ls);\n\tif (R> m) ans=min(ans,succ(L,R,x,rs));\n\treturn ans;\n}\n\ninline int kth(int L,int R,int k,int n)\n{\n\tint l=1,r=tree[1].root->s;\n\twhile (l<=r)\n\t{\n\t\tint m=(l+r)>>1;\n\t\tint t=tree[1].kth(m);\n\t\tint K=rank(L,R,t,1,n,1);\n\t\tint cnt=count(L,R,t,1,n,1);\n\t\tif (K==k && !cnt) return succ(L,R,t,1,n,1);\n\t\tif (K+cnt-1>=k && K<=k && cnt) return t;\n\t\tif (cnt)\n\t\t\tif (K+cnt-1<k) l=m+1;\n\t\t\t\telse r=m-1;\n\t\telse\n\t\t\tif (K<k) l=m+1;\n\t\t\t\telse r=m-1;\n\t}\n\treturn INT_MAX;\n}\n```\n\n## DSU ON TREE（CF600E）\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n\nconst int maxn=1e5+1000;\n\ntypedef long long ll;\n\nll ans[maxn],tot;\nint head[maxn],_cnt,n,mx;\nint fa[maxn],siz[maxn],son[maxn],cnt[maxn],col[maxn],isson[maxn];\n\nstruct Edge\n{\n    int to,next;\n}edge[maxn<<1];\n\ninline int max(int a,int b){return a<b?b:a;}\n\ninline void add(int u,int v)\n{\n    edge[++_cnt].next=head[u];\n    edge[_cnt].to=v;\n    head[u]=_cnt;\n}\n\nvoid dfs(int u,int f)\n{\n    fa[u]=f;\n    siz[u]=1;\n    int maxs=-1;\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=f)\n        {\n            dfs(v,u);siz[u]+=siz[v];\n            if (siz[v]>maxs) maxs=siz[v],son[u]=v;\n        } \n    }\n    if (son[u]) isson[son[u]]=true;\n}\n\nvoid AddAns(int u,int x,int Son)\n{\n    if((cnt[col[u]]+=x)>mx) mx=cnt[col[u]],tot=col[u];\n        else if(cnt[col[u]]==mx) tot+=(ll)col[u];\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=fa[u] && v!=Son) AddAns(v,x,Son);\n    }\n}\n\nvoid solve(int u,int f,int keep)\n{\n    for (int i=head[u];i;i=edge[i].next)\n    {\n        int v=edge[i].to;\n        if (v!=f && v!=son[u]) solve(v,u,0);\n    }\n    if (son[u]) solve(son[u],u,1);\n    AddAns(u,1,son[u]);\n    ans[u]=tot;\n    // int t=0;\n    // for (int i=1;i<=n;++i) t=max(t,cnt[i]);\n    // for (int i=1;i<=n;++i) if (cnt[i]==t) ans[u]=ans[u]+(ll)i;\n    if (!keep) AddAns(u,-1,0),mx=tot=0;\n}\n\nint main()\n{\n    scanf(\"%d\",&n);\n    for (int i=1;i<=n;++i) scanf(\"%d\",col+i);\n    for (int i=1,u,v;i<n;++i)\n    {\n        scanf(\"%d%d\",&u,&v);\n        add(u,v);add(v,u);\n    }\n    dfs(1,1);\n    solve(1,0,0);\n    for (int i=1;i<=n;++i) printf(\"%lld \",ans[i]);\n}\n```\n\n\n\n## 珂朵莉树\n\n```cpp\nstruct Node\n{\n    int l,r;\n    mutable int x;\n    Node(int l,int r=-1,int x=0):l(l),r(r),x(x){}\n    bool operator< (const Node &nd) const {return l<nd.l;}\n};\n\ntypedef long long ll;\ntypedef set<Node>::iterator It;\n\nstruct Cmp\n{\n    bool operator() (const It& a,const It& b) const {return a->x<b->x;}\n};\n\nint a[maxn];\nint seed,n,m,vmax;\nset<Node> s;\n\ninline void swap(int& a,int& b){a^=b^=a^=b;}\n\ninline int Rand()\n{\n    int ret=seed;\n    seed=((ll)seed*7+13)%1000000007;\n    return ret;\n}\n\ninline void init()\n{\n    for (int i=1;i<=n;++i)\n        s.insert(Node(i,i,a[i]));\n    s.insert(Node(n+1,n+1,0));\n}\n\ninline ll pow_mod(ll a,ll b,ll p)\n{\n    ll ans=1%p;a%=p;\n    for (;b;b>>=1)\n    {\n        if (b&1) ans=ans*a%p;\n        a=a*a%p;\n    }\n    return ans;\n}\n\ninline It split(int pos)\n{\n    It it=s.lower_bound(Node(pos)); \n    if (it!=s.end() && it->l==pos) return it;\n    --it;\n    int l=it->l,r=it->r,v=it->x;\n    s.erase(it);\n    s.insert(Node(l,pos-1,v));\n    return s.insert(Node(pos,r,v)).first;\n}\n\ninline void assign(int l,int r,int x)\n{\n    It it2=split(r+1),it1=split(l);\n    s.erase(it1,it2);\n    s.insert(Node(l,r,x));\n}\n\ninline void add(int l,int r,int x)\n{\n    It it2=split(r+1),it1=split(l);\n    for (It i=it1;i!=it2;++i) i->x+=x;\n}\n\ninline int kth(int l,int r,int x)\n{\n    vector<It> v;\n    It it2=split(r+1),it1=split(l);\n    for (It i=it1;i!=it2;++i) v.push_back(i);\n    sort(v.begin(),v.end(),Cmp());\n    for (int i=0;i<v.size();++i)\n    {\n        // assert(v[i]->r>=v[i]->l);//Assertion Failed...Fixed....\n        x-=v[i]->r-v[i]->l+1;\n        if (x<=0) return v[i]->x;\n    }\n    return -1;\n}\n\ninline int power(int l,int r,int x,int p)\n{\n    ll ans=0;\n    It it2=split(r+1),it1=split(l);\n    for (It it=it1;it!=it2;++it) ans=((ll)ans+(ll)pow_mod(it->x,x,p)*(it->r-it->l+1)%p)%p;\n    return ans;\n}\n```\n\n","slug":"蒟蒻_WA自动机的模板库","published":1,"updated":"2019-04-27T08:22:33.200Z","layout":"post","photos":[],"link":"","_id":"cjv7jjm8x003zv4tyod5ijn9k","content":"<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><p>2019.2.16</p>\n<ul>\n<li>修复珂朵莉树代码中的错误</li>\n<li>FFT板子更新为预处理单位复根的版本(多项式基本操作请移步多项式算法总结qwq)</li>\n</ul>\n<p>2019.2.17</p>\n<ul>\n<li>新增NTT板子</li>\n</ul>\n<a id=\"more\"></a>\n<p>2019.2.25</p>\n<ul>\n<li>新增替罪羊树板子</li>\n</ul>\n<p>2019.3.6</p>\n<ul>\n<li>新增K-D Tree(2-D Tree) -&gt; [简单题AC代码]</li>\n<li>更新高消板子</li>\n<li>更新LCT板子</li>\n</ul>\n<p>2019.3.31</p>\n<ul>\n<li>新增Miller-Rabin素数判断</li>\n<li>新增Pollard-Rho大数分解</li>\n</ul>\n<p>2019.4.4</p>\n<ul>\n<li>新增SAM板子</li>\n</ul>\n<p>2019.4.22</p>\n<ul>\n<li>新增二维凸包</li>\n<li>新增笛卡尔树</li>\n<li>新增Manacher</li>\n</ul>\n<p>2019.4.26</p>\n<ul>\n<li>新增毒瘤圆方树</li>\n</ul>\n<p>2019.4.27</p>\n<ul>\n<li>新增广义圆方树</li>\n</ul>\n<h1 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h1><h2 id=\"线性筛\"><a href=\"#线性筛\" class=\"headerlink\" title=\"线性筛\"></a>线性筛</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">sieve</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!v[i]) &#123;v[i]=i;prime[++cnt]=i;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=cnt;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prime[j]&gt;v[i] || i*prime[j]&gt;n) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            v[i*prime[j]]=prime[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=cnt;++i)</span><br><span class=\"line\">        isprime[prime[i]]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"高斯消元\"><a href=\"#高斯消元\" class=\"headerlink\" title=\"高斯消元\"></a>高斯消元</h2><blockquote>\n<p>模板题【SDOI2006】异或方程组<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">fabs</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::swap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e3</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps=<span class=\"number\">1e-6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Gauss_Elimination</span><span class=\"params\">(<span class=\"keyword\">double</span> (*A)[maxn],<span class=\"keyword\">double</span>* f,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,c=<span class=\"number\">1</span>,j;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=c;j&lt;=n &amp;&amp; <span class=\"built_in\">fabs</span>(A[j][i])&lt;eps;++j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j==n+<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=n+<span class=\"number\">1</span>;++k) swap(A[c][k],A[j][k]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=c+<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[j][i])&gt;eps) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">double</span> t=A[j][i]/A[c][i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=i;k&lt;=n+<span class=\"number\">1</span>;++k)</span><br><span class=\"line\">                    A[j][k]-=t*A[c][k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ++c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> NoAnswer=<span class=\"literal\">false</span>,InfAnswer=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n;i;--i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> NoVariables=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=i;j&lt;=n;++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[i][j])&gt;eps) NoVariables=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (NoVariables)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[i][n+<span class=\"number\">1</span>])&gt;eps) NoAnswer=<span class=\"literal\">true</span>; <span class=\"comment\">// 0=C,C!=0,无解</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> InfAnswer=<span class=\"literal\">true</span>; <span class=\"comment\">// 0=0,无穷多组解</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;=n;++j) A[i][n+<span class=\"number\">1</span>]-=A[i][j]*f[j];</span><br><span class=\"line\">            f[i]=A[i][n+<span class=\"number\">1</span>]/A[i][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NoAnswer) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">// 无解返回-1.. </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !InfAnswer; <span class=\"comment\">//无穷多解返回0，有唯一解返回1.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> A[maxn][maxn],f[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n+<span class=\"number\">1</span>;++j)</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;A[i][j]);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result=Gauss_Elimination(A,f,n);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result^<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,result)&amp;<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) <span class=\"built_in\">printf</span>(<span class=\"string\">\"x%d=%.2lf\\n\"</span>,i,f[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"三分\"><a href=\"#三分\" class=\"headerlink\" title=\"三分\"></a>三分</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">F</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> f=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n;~i;--i)</span><br><span class=\"line\">        f=f*x+a[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> l,r;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%lf%lf\"</span>,&amp;n,&amp;l,&amp;r);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n;~i;--i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,a+i);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l+eps&lt;r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> m1=l+(r-l)/<span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> m2=r-(r-l)/<span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (F(m1)&gt;F(m2)) r=m2;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> l=m1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.5lf\"</span>,l);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"矩阵快速幂\"><a href=\"#矩阵快速幂\" class=\"headerlink\" title=\"矩阵快速幂\"></a>矩阵快速幂</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Matrix <span class=\"keyword\">operator</span>^ (ll k)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">ans</span><span class=\"params\">(n,m)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        ans.a[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    Matrix t=*<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;k;k&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k&amp;<span class=\"number\">1</span>) ans=ans*t;</span><br><span class=\"line\">        t=t*t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"乘法逆元\"><a href=\"#乘法逆元\" class=\"headerlink\" title=\"乘法逆元\"></a>乘法逆元</h2><h3 id=\"线性递推\"><a href=\"#线性递推\" class=\"headerlink\" title=\"线性递推\"></a>线性递推</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inv[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">inv[i]=(p-p/i)*inv[p%i]%p;</span><br></pre></td></tr></table></figure>\n<h3 id=\"阶乘逆元\"><a href=\"#阶乘逆元\" class=\"headerlink\" title=\"阶乘逆元\"></a>阶乘逆元</h3><p>$\\text{inv}(i)=\\text{inv}(i+1) \\times(i+1)$</p>\n<h2 id=\"有理数取模\"><a href=\"#有理数取模\" class=\"headerlink\" title=\"有理数取模\"></a>有理数取模</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">pow</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> mod)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">1l</span>l;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=ans*a%mod;</span><br><span class=\"line\">        a=(ll)a*a%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch=getchar()));</span><br><span class=\"line\">    ll x=ch<span class=\"number\">-48</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch=getchar()))</span><br><span class=\"line\">        x=(x*<span class=\"number\">10</span>+ch<span class=\"number\">-48</span>)%mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll a,b;</span><br><span class=\"line\">    a=read();b=read();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!b) <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"Angry!\"</span>),<span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\"</span>,(ll)a*<span class=\"built_in\">pow</span>(b,mod<span class=\"number\">-2</span>,mod)%mod);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Miller-Rabin\"><a href=\"#Miller-Rabin\" class=\"headerlink\" title=\"Miller-Rabin\"></a>Miller-Rabin</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> pr[]=&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">11</span>,<span class=\"number\">13</span>,<span class=\"number\">17</span>,<span class=\"number\">19</span>,<span class=\"number\">23</span>,<span class=\"number\">29</span>,<span class=\"number\">31</span>,<span class=\"number\">37</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(ll a,ll b,ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">1</span>%p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=ans*a%p;</span><br><span class=\"line\">        a=a*a%p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">miller_rabin</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">12</span>;++i) <span class=\"keyword\">if</span> (n==pr[i]) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(n<span class=\"number\">-1</span>),k=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!(m&amp;<span class=\"number\">1</span>)) m&gt;&gt;=<span class=\"number\">1</span>,++k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">12</span> &amp;&amp; pr[i]&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ll x=qpow(pr[i],m,n),y=x;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t=<span class=\"number\">0</span>;t&lt;k;++t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x=x*x%n;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x==<span class=\"number\">1</span> &amp;&amp; y!=<span class=\"number\">1</span> &amp;&amp; y!=n<span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            y=x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x!=<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Pollard-Rho\"><a href=\"#Pollard-Rho\" class=\"headerlink\" title=\"Pollard-Rho\"></a>Pollard-Rho</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;random&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"function\">mt19937_64 <span class=\"title\">Rnd</span><span class=\"params\">(<span class=\"built_in\">std</span>::chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> pr[]=&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">11</span>,<span class=\"number\">13</span>,<span class=\"number\">17</span>,<span class=\"number\">19</span>,<span class=\"number\">23</span>,<span class=\"number\">29</span>,<span class=\"number\">31</span>,<span class=\"number\">37</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">gcd</span><span class=\"params\">(ll a,ll b)</span></span>&#123;<span class=\"keyword\">return</span> b==<span class=\"number\">0</span>?a:gcd(b,a%b);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">rnd</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">return</span> (ll)(Rnd()%x+<span class=\"number\">1</span>);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">quick_pow</span><span class=\"params\">(ll a,ll b,ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">1</span>%p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=ans*a%p;</span><br><span class=\"line\">        a=a*a%p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">slow_mul</span><span class=\"params\">(ull a,ll b,ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ull ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=(ull)(ans+a);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans&gt;=p) ans-=p;</span><br><span class=\"line\">        a=(ull)(a+a)%p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a&gt;=p) a-=p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">miller_rabin</span><span class=\"params\">(ll n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">12</span>;++i) <span class=\"keyword\">if</span> (n==pr[i]) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n%<span class=\"number\">2</span>==<span class=\"number\">0</span> || n%<span class=\"number\">3</span>==<span class=\"number\">0</span> || n%<span class=\"number\">5</span>==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    ll m=(n<span class=\"number\">-1</span>),k=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!(m&amp;<span class=\"number\">1</span>)) m&gt;&gt;=<span class=\"number\">1</span>,++k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">12</span> &amp;&amp; pr[i]&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ll x=quick_pow(pr[i],m,n),y=x;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t=<span class=\"number\">0</span>;t&lt;k;++t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x=slow_mul(x,x,n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x==<span class=\"number\">1</span> &amp;&amp; y!=<span class=\"number\">1</span> &amp;&amp; y!=n<span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            y=x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x!=<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> f(x) ((slow_mul(x,x,n)+c)%n)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">rho</span><span class=\"params\">(ll n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(n&amp;<span class=\"number\">1</span>)) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n%<span class=\"number\">3</span>==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    ll x=<span class=\"number\">0</span>,y=<span class=\"number\">0</span>,t=<span class=\"number\">1</span>,c=rnd(n<span class=\"number\">-1</span>),q=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">2</span>;;k&lt;&lt;=<span class=\"number\">1</span>,y=x,q=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;k;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x=f(x);</span><br><span class=\"line\">            q=slow_mul(q,<span class=\"built_in\">abs</span>(x-y),n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(i&amp;<span class=\"number\">0x7f</span>))</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((t=gcd(q,n))&gt;<span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t&gt;<span class=\"number\">1</span> || (t=gcd(q,n))&gt;<span class=\"number\">1</span>) <span class=\"keyword\">break</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ll max_p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">solve</span><span class=\"params\">(ll n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (miller_rabin(n)) <span class=\"keyword\">return</span> max_p=n&gt;max_p?n:max_p; </span><br><span class=\"line\">    ll t=n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t==n) t=rho(n);</span><br><span class=\"line\">    solve(n/t);solve(t);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"pol.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">\"pol.out\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ll x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;x);max_p=<span class=\"number\">0</span>;</span><br><span class=\"line\">        ll ret=solve(x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret==x) <span class=\"built_in\">puts</span>(<span class=\"string\">\"Prime\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"%d\"</span>,clock());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"FFT\"><a href=\"#FFT\" class=\"headerlink\" title=\"FFT\"></a>FFT</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> Pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">2e6</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> q[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> limit=<span class=\"number\">1</span>,rev[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> real,imag;</span><br><span class=\"line\">    Complex(<span class=\"keyword\">double</span> real,<span class=\"keyword\">double</span> imag):real(real),imag(imag)&#123;&#125;</span><br><span class=\"line\">    Complex()&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\">Complex <span class=\"title\">conj</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;w[maxn],winv[maxn],A[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> Complex Complex::conj()&#123;<span class=\"keyword\">return</span> Complex(real,-imag);&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Complex <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Complex&amp; a,<span class=\"keyword\">const</span> Complex&amp; b)&#123;<span class=\"keyword\">return</span> Complex(a.real+b.real,a.imag+b.imag);&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Complex <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> Complex&amp; a,<span class=\"keyword\">const</span> Complex&amp; b)&#123;<span class=\"keyword\">return</span> Complex(a.real-b.real,a.imag-b.imag);&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Complex <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> Complex&amp; a,<span class=\"keyword\">const</span> Complex&amp; b)&#123;<span class=\"keyword\">return</span> Complex(a.real*b.real-a.imag*b.imag,a.real*b.imag+a.imag*b.real);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T&amp; a,T&amp; b)</span></span>&#123;T t=a;a=b;b=t;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(Complex* A,Complex* w,<span class=\"keyword\">int</span> limit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;rev[i]) swap(A[i],A[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> mid=<span class=\"number\">1</span>;mid&lt;limit;mid&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> R=mid&lt;&lt;<span class=\"number\">1</span>,j=<span class=\"number\">0</span>;j&lt;limit;j+=R)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;mid;++k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Complex x=A[j+k],y=w[limit/mid/<span class=\"number\">2</span>*k]*A[j+mid+k];</span><br><span class=\"line\">                A[j+k]=x+y;</span><br><span class=\"line\">                A[j+mid+k]=x-y;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">prework</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (limit&lt;=(n&lt;&lt;<span class=\"number\">1</span>)+<span class=\"number\">1</span>) limit&lt;&lt;=<span class=\"number\">1</span>,++l;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        rev[i]=(rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i) </span><br><span class=\"line\">        w[i]=Complex(<span class=\"built_in\">cos</span>(Pi*<span class=\"number\">2</span>/limit*i),<span class=\"built_in\">sin</span>(Pi*<span class=\"number\">2</span>/limit*i)),winv[i]=w[i].conj();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;A[i].real);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=m;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;A[i].imag);</span><br><span class=\"line\">    prework(n&gt;=m?n:m);</span><br><span class=\"line\">    DFT(A,w,limit);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        A[i]=A[i]*A[i];</span><br><span class=\"line\">    DFT(A,winv,limit);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=n+m;++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,(<span class=\"keyword\">int</span>)(A[i].imag/<span class=\"number\">2</span>/limit+<span class=\"number\">0.1</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"NTT\"><a href=\"#NTT\" class=\"headerlink\" title=\"NTT\"></a>NTT</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">qpow</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">1</span>%p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>,a=(ll)a*a%p)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=(ll)ans*a%p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">prework</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (limit&lt;=(n+m+<span class=\"number\">1</span>)) limit&lt;&lt;=<span class=\"number\">1</span>,++l;</span><br><span class=\"line\">    w[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;w[<span class=\"number\">1</span>]=qpow(g,(P<span class=\"number\">-1</span>)/limit,P),winv[<span class=\"number\">0</span>]=<span class=\"number\">1</span>,winv[<span class=\"number\">1</span>]=qpow(w[<span class=\"number\">1</span>],P<span class=\"number\">-2</span>,P);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;limit;++i)</span><br><span class=\"line\">        w[i]=(ll)w[i<span class=\"number\">-1</span>]*w[<span class=\"number\">1</span>]%P,winv[i]=<span class=\"number\">1l</span>l*winv[i<span class=\"number\">-1</span>]*winv[<span class=\"number\">1</span>]%P;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;limit;++i)</span><br><span class=\"line\">        rev[i]=(rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> *w,<span class=\"keyword\">int</span> limit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;rev[i]) swap(A[i],A[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> mid=<span class=\"number\">1</span>;mid&lt;limit;mid&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> R=mid&lt;&lt;<span class=\"number\">1</span>,j=<span class=\"number\">0</span>;j&lt;limit;j+=R)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;mid;++k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x=A[j+k],y=(ll)A[j+k+mid]*w[limit/<span class=\"number\">2</span>/mid*k]%P;</span><br><span class=\"line\">                A[j+k]=(x+y)%P;A[j+mid+k]=(x-y+P)%P;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(<span class=\"keyword\">int</span> *A)</span></span>&#123; NTT(A,w,limit); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">IDFT</span><span class=\"params\">(<span class=\"keyword\">int</span> *A)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    NTT(A,winv,limit);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> inv=qpow(limit,P<span class=\"number\">-2</span>,P);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=limit;++i)</span><br><span class=\"line\">        A[i]=((ll)A[i]*inv)%P;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"计算几何\"><a href=\"#计算几何\" class=\"headerlink\" title=\"计算几何\"></a>计算几何</h1><h2 id=\"二维凸包\"><a href=\"#二维凸包\" class=\"headerlink\" title=\"二维凸包\"></a>二维凸包</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::sort;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">sqrt</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e5</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> x,y;</span><br><span class=\"line\">    Point(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y):x(x),y(y)&#123;&#125;</span><br><span class=\"line\">    Point()&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"keyword\">const</span> Point&amp; p) <span class=\"keyword\">const</span>&#123;<span class=\"keyword\">return</span> x==p.x?y&lt;p.y:x&lt;p.x;&#125;</span><br><span class=\"line\">    Point <span class=\"keyword\">operator</span>- (<span class=\"keyword\">const</span> Point&amp; p)&#123;<span class=\"keyword\">return</span> Point(x-p.x,y-p.y);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> <span class=\"keyword\">operator</span>* (<span class=\"keyword\">const</span> Point&amp; p)&#123;<span class=\"keyword\">return</span> x*p.x+y*p.y;&#125;</span><br><span class=\"line\">&#125;p[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Point Vector;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">dis</span><span class=\"params\">(<span class=\"keyword\">const</span> Point&amp; a,<span class=\"keyword\">const</span> Point&amp; b)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">cross</span><span class=\"params\">(<span class=\"keyword\">const</span> Vector&amp; a,<span class=\"keyword\">const</span> Vector&amp; b)</span></span>&#123;<span class=\"keyword\">return</span> a.x*b.y-b.x*a.y;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf%lf\"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class=\"line\">    sort(p+<span class=\"number\">1</span>,p+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"built_in\">stack</span>[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> top=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>[++top]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> used[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (top&gt;<span class=\"number\">1</span> &amp;&amp; cross(p[<span class=\"built_in\">stack</span>[top]]-p[<span class=\"built_in\">stack</span>[top<span class=\"number\">-1</span>]],p[i]-p[<span class=\"built_in\">stack</span>[top]])&lt;=<span class=\"number\">0</span>) used[<span class=\"built_in\">stack</span>[top--]]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>[++top]=i;</span><br><span class=\"line\">        used[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> prec=top;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n;i;--i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!used[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (top&gt;prec &amp;&amp; cross(p[<span class=\"built_in\">stack</span>[top]]-p[<span class=\"built_in\">stack</span>[top<span class=\"number\">-1</span>]],p[i]-p[<span class=\"built_in\">stack</span>[top]])&lt;=<span class=\"number\">0</span>) used[<span class=\"built_in\">stack</span>[top--]]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"built_in\">stack</span>[++top]=i;</span><br><span class=\"line\">            used[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=top;++i)</span><br><span class=\"line\">        ans+=dis(p[<span class=\"built_in\">stack</span>[i]],p[<span class=\"built_in\">stack</span>[i<span class=\"number\">-1</span>]]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.2lf\"</span>,ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><h2 id=\"Manacher\"><a href=\"#Manacher\" class=\"headerlink\" title=\"Manacher\"></a>Manacher</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">3e7</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> buf[maxn],s[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">min</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?a:b;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">max</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?b:a;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">manacher</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxright=<span class=\"number\">0</span>,mid=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;maxright) f[i]=min(f[(mid&lt;&lt;<span class=\"number\">1</span>)-i],f[mid]+mid-i);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> f[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s[i+f[i]]==s[i-f[i]]) ++f[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i+f[i]&gt;maxright) maxright=i+f[i],mid=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,buf);</span><br><span class=\"line\">    n=<span class=\"built_in\">strlen</span>(buf);</span><br><span class=\"line\">    s[<span class=\"number\">0</span>]=s[<span class=\"number\">1</span>]=<span class=\"string\">'@'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">        s[(i&lt;&lt;<span class=\"number\">1</span>)+<span class=\"number\">2</span>]=buf[i],s[(i&lt;&lt;<span class=\"number\">1</span>)+<span class=\"number\">3</span>]=<span class=\"string\">'@'</span>;</span><br><span class=\"line\">    n=n*<span class=\"number\">2</span>+<span class=\"number\">2</span>;s[n]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    manacher(n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">        ans=max(ans,f[i]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,ans<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"制胡窜哈希\"><a href=\"#制胡窜哈希\" class=\"headerlink\" title=\"制胡窜哈希\"></a>制胡窜哈希</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">hs1</span><span class=\"params\">(<span class=\"keyword\">char</span>* s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    pw1[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;hsh1[<span class=\"number\">0</span>]=s[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pw1[i]=(ll)pw1[i<span class=\"number\">-1</span>]*seed%mod1;</span><br><span class=\"line\">        hsh1[i]=((ll)hsh1[i<span class=\"number\">-1</span>]*seed+s[i])%mod1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">hs2</span><span class=\"params\">(<span class=\"keyword\">char</span>* s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    pw2[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;hsh2[<span class=\"number\">0</span>]=s[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pw2[i]=(ll)pw2[i<span class=\"number\">-1</span>]*seed%mod2;</span><br><span class=\"line\">        hsh2[i]=((ll)hsh2[i<span class=\"number\">-1</span>]*seed+s[i])%mod2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; gethash(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t1=((hsh1[r]-(ll)hsh1[l<span class=\"number\">-1</span>]*pw1[r-l+<span class=\"number\">1</span>]%mod1)+mod1)%mod1;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t2=((hsh2[r]-(ll)hsh2[l<span class=\"number\">-1</span>]*pw2[r-l+<span class=\"number\">1</span>]%mod2)+mod2)%mod2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> make_pair(t1,t2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">getfail</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,j;i&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        j=f[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &amp;&amp; P[j]!=P[i]) j=f[j];</span><br><span class=\"line\">        f[i+<span class=\"number\">1</span>]=P[i]==P[j]?j+<span class=\"number\">1</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">kmp</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &amp;&amp; T[i]!=P[j]) j=f[j];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T[i]==P[j]) ++j;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j==m) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,i-m+<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"AC自动机\"><a href=\"#AC自动机\" class=\"headerlink\" title=\"AC自动机\"></a>AC自动机</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=<span class=\"built_in\">strlen</span>(s),u=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c=idx(s[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ch[u][c]) ch[u][c]=++cnt;</span><br><span class=\"line\">        u=ch[u][c];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++tag[u];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getfail</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[<span class=\"number\">0</span>][i]) q.push(ch[<span class=\"number\">0</span>][i]);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=q.front();q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> c=ch[u][i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!c) &#123;ch[u][i]=ch[f[u]][i];<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">            q.push(c);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v=f[u];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (v &amp;&amp; !ch[v][i]) v=f[v];</span><br><span class=\"line\">            f[c]=ch[v][i];</span><br><span class=\"line\">            last[c]=tag[f[c]]?f[c]:last[f[c]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=<span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=<span class=\"number\">0</span>,ret=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x=ch[x][idx(s[i])];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=x;j;j=last[j])</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(!vis[j])vis[j]=<span class=\"number\">1</span>,ret+=tag[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"SA\"><a href=\"#SA\" class=\"headerlink\" title=\"SA\"></a>SA</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">build_sa</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *x=t1,*y=t2;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;++i) c[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) c[x[i]=s[i]]++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;m;++i) c[i]+=c[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n<span class=\"number\">-1</span>;~i;--i) sa[--c[x[i]]]=i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>,p=<span class=\"number\">1</span>;k&lt;=n &amp;&amp; p&lt;n;k&lt;&lt;=<span class=\"number\">1</span>,m=p)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n-k;i&lt;n;++i) y[p++]=i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) <span class=\"keyword\">if</span> (sa[i]&gt;=k) y[p++]=sa[i]-k;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;++i) c[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) c[t3[i]=x[y[i]]]++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;m;++i) c[i]+=c[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n<span class=\"number\">-1</span>;~i;--i) sa[--c[t3[i]]]=y[i];</span><br><span class=\"line\">        p=<span class=\"number\">1</span>;swap(x,y);x[sa[<span class=\"number\">0</span>]]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i)</span><br><span class=\"line\">            x[sa[i]]=(y[sa[i]+k]==y[sa[i<span class=\"number\">-1</span>]+k] &amp;&amp; y[sa[i]]==y[sa[i<span class=\"number\">-1</span>]])?p<span class=\"number\">-1</span>:p++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">get_height</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;++i) rank[sa[i]]=i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;height[rank[i++]]=k)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (k?--k:<span class=\"number\">0</span>,j=sa[rank[i]<span class=\"number\">-1</span>];s[j+k]==s[i+k];++k);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"SAM\"><a href=\"#SAM\" class=\"headerlink\" title=\"SAM\"></a>SAM</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">2e6</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> tr[maxn][<span class=\"number\">26</span>],parent[maxn],mx[maxn],right[maxn],cnt=<span class=\"number\">1</span>,last=<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">radixsort</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> c[maxn],id[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=cnt;++i) ++c[mx[i]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) c[i]+=c[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=cnt;i;--i) id[--c[mx[i]]]=i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=cnt<span class=\"number\">-1</span>;~i;--i) right[parent[id[i]]]+=right[id[i]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p=last,np=last=++cnt;</span><br><span class=\"line\">    right[np]=<span class=\"number\">1</span>;mx[np]=mx[p]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p &amp;&amp; !tr[p][x]) tr[p][x]=np,p=parent[p];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!p) parent[np]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> q=tr[p][x];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mx[q]==mx[p]+<span class=\"number\">1</span>) parent[np]=q;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nq=++cnt;</span><br><span class=\"line\">            mx[nq]=mx[p]+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">memcpy</span>(tr[nq],tr[q],<span class=\"keyword\">sizeof</span>(tr[q]));</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p &amp;&amp; tr[p][x]==q) tr[p][x]=nq,p=parent[p];</span><br><span class=\"line\">            parent[nq]=parent[q];parent[q]=parent[np]=nq;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> s[maxn];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,s);</span><br><span class=\"line\">    n=<span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) insert(s[i]-<span class=\"string\">'a'</span>);</span><br><span class=\"line\">    radixsort(n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=cnt;++i) <span class=\"keyword\">if</span> (right[i]&gt;<span class=\"number\">1</span> &amp;&amp; right[i]*mx[i]&gt;ans) ans=right[i]*mx[i]; </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"图论\"><a href=\"#图论\" class=\"headerlink\" title=\"图论\"></a>图论</h1><h2 id=\"广义圆方树-APIO2018-铁人两项\"><a href=\"#广义圆方树-APIO2018-铁人两项\" class=\"headerlink\" title=\"广义圆方树(APIO2018 铁人两项)\"></a>广义圆方树(APIO2018 铁人两项)</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">2e6</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; G[maxn],T[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dfn[maxn],low[maxn],dfc,tot,cnt,val[maxn],siz[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">max</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?b:a;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">min</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?a:b;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">void</span> <span class=\"title\">swap</span>(<span class=\"title\">T</span>&amp; <span class=\"title\">a</span>,<span class=\"title\">T</span>&amp; <span class=\"title\">b</span>)&#123;</span>a^=b^=a^=b;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> ff)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"built_in\">stack</span>[maxn],top=<span class=\"number\">0</span>;</span><br><span class=\"line\">    dfn[u]=low[u]=++dfc;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>[++top]=u;</span><br><span class=\"line\">    ++cnt;val[u]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> v:G[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v==ff) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tarjan(v,u);</span><br><span class=\"line\">            low[u]=min(low[u],low[v]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (low[v]&gt;=dfn[u])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ++tot;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">                <span class=\"keyword\">do</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    x=<span class=\"built_in\">stack</span>[top--];</span><br><span class=\"line\">                    ++val[tot];</span><br><span class=\"line\">                    T[x].push_back(tot);</span><br><span class=\"line\">                    T[tot].push_back(x);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> (x!=v);</span><br><span class=\"line\">                T[u].push_back(tot);</span><br><span class=\"line\">                T[tot].push_back(u);</span><br><span class=\"line\">                ++val[tot];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64_t <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> ff,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int64_t</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    siz[u]=(u&lt;=N);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> v:T[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v==ff) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        ans+=calc(v,u,n,N);</span><br><span class=\"line\">        ans+=(<span class=\"keyword\">int64_t</span>)siz[u]*siz[v]*val[u];</span><br><span class=\"line\">        siz[u]+=siz[v];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans+=(<span class=\"keyword\">int64_t</span>)siz[u]*(n-siz[u])*val[u];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    tot=n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,u,v;i&lt;=m;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;u,&amp;v),G[u].push_back(v),G[v].push_back(u);</span><br><span class=\"line\">    <span class=\"keyword\">int64_t</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">            tarjan(i,<span class=\"number\">0</span>);</span><br><span class=\"line\">            ans+=calc(i,<span class=\"number\">0</span>,cnt,n);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,ans*<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"静态仙人掌（圆方树）\"><a href=\"#静态仙人掌（圆方树）\" class=\"headerlink\" title=\"静态仙人掌（圆方树）\"></a>静态仙人掌（圆方树）</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">3e4</span>+<span class=\"number\">1200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> to,next,w;</span><br><span class=\"line\">    &#125;edge[maxn&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> head[maxn],cnt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _add(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> w)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        edge[++cnt].next=head[u];</span><br><span class=\"line\">        edge[cnt].to=v;</span><br><span class=\"line\">        edge[cnt].w=w;</span><br><span class=\"line\">        head[u]=cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> w)</span></span>&#123;_add(u,v,w);_add(v,u,w);&#125;</span><br><span class=\"line\">&#125;G,T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> dfn[maxn],low[maxn],tot,dfc;</span><br><span class=\"line\"><span class=\"keyword\">int</span> fa[maxn],val[maxn],sum[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">min</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?a:b;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">max</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?b:a;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">void</span> <span class=\"title\">swap</span>(<span class=\"title\">T</span> &amp;<span class=\"title\">a</span>,<span class=\"title\">T</span> &amp;<span class=\"title\">b</span>)&#123;</span>a^=b^=a^=b;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ++tot;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s=w;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x=v;x!=fa[u];x=fa[x])</span><br><span class=\"line\">        sum[x]=s,s+=val[x];</span><br><span class=\"line\">    sum[tot]=sum[u];</span><br><span class=\"line\">    sum[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x=v;x!=fa[u];x=fa[x])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sp=min(sum[x],sum[tot]-sum[x]);</span><br><span class=\"line\">        T.add(x,tot,sp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> ff)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dfn[u]=low[u]=++dfc;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=G.head[u];i;i=G.edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=G.edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v==ff) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fa[v]=u;</span><br><span class=\"line\">            val[v]=G.edge[i].w;</span><br><span class=\"line\">            tarjan(v,u);</span><br><span class=\"line\">            low[u]=min(low[u],low[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (low[v]&lt;=dfn[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        T.add(u,v,G.edge[i].w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=G.head[u];i;i=G.edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=G.edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fa[v]!=u &amp;&amp; dfn[v]&gt;dfn[u])</span><br><span class=\"line\">            build(u,v,G.edge[i].w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> depth[maxn],siz[maxn],top[maxn],son[maxn],dis[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> ff,<span class=\"keyword\">int</span> dep,<span class=\"keyword\">int</span> di)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    depth[u]=dep;</span><br><span class=\"line\">    dis[u]=di;</span><br><span class=\"line\">    fa[u]=ff;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxs=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    siz[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=T.head[u];i;i=T.edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=T.edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=ff)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dfs(v,u,dep+<span class=\"number\">1</span>,di+T.edge[i].w);</span><br><span class=\"line\">            siz[u]+=siz[v];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (siz[v]&gt;maxs) maxs=siz[v],son[u]=v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> topf)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    top[u]=topf;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!son[u]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    dfs(son[u],topf);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=T.head[u];i;i=T.edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=T.edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=fa[u] &amp;&amp; v!=son[u])</span><br><span class=\"line\">            dfs(v,v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (top[u]!=top[v])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth[top[u]]&lt;depth[top[v]]) swap(u,v);</span><br><span class=\"line\">        u=fa[top[u]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> depth[u]&gt;depth[v]?v:u;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> lca)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=son[lca];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (top[u]!=top[lca])</span><br><span class=\"line\">        res=top[u],u=fa[top[u]];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u==lca?res:son[lca];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lca=LCA(u,v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lca&lt;=n) <span class=\"keyword\">return</span> dis[u]+dis[v]<span class=\"number\">-2</span>*dis[lca];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=find(u,lca),y=find(v,lca);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=dis[u]+dis[v]-dis[x]-dis[y];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum[x]&lt;sum[y]) swap(x,y);</span><br><span class=\"line\">    ans+=min(sum[x]-sum[y],sum[lca]-sum[x]+sum[y]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m,q;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;n,&amp;m,&amp;q);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,u,v,w;i&lt;=m;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;u,&amp;v,&amp;w),G.add(u,v,w);</span><br><span class=\"line\">    tot=n;</span><br><span class=\"line\">    tarjan(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    dfs(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    dfs(<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,u,v;i&lt;=q;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;u,&amp;v);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,query(u,v,n));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Kruskal\"><a href=\"#Kruskal\" class=\"headerlink\" title=\"Kruskal\"></a>Kruskal</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u,v,w;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"keyword\">const</span> Edge&amp; e) <span class=\"keyword\">const</span> &#123;<span class=\"keyword\">return</span> w&lt;e.w;&#125;</span><br><span class=\"line\">&#125;edge[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> fa[maxn],cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> x==fa[x]?x:fa[x]=find(fa[x]);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">kruskal</span><span class=\"params\">(<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::sort(edge+<span class=\"number\">1</span>,edge+m+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=edge[i].u,v=edge[i].v,w=edge[i].w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (find(u)!=find(v))</span><br><span class=\"line\">            ++cnt,fa[find(u)]=find(v),ans+=w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"LCA\"><a href=\"#LCA\" class=\"headerlink\" title=\"LCA\"></a>LCA</h2><h3 id=\"树剖\"><a href=\"#树剖\" class=\"headerlink\" title=\"树剖\"></a>树剖</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> f,<span class=\"keyword\">int</span> dep)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    depth[u]=dep;</span><br><span class=\"line\">    fa[u]=f;</span><br><span class=\"line\">    siz[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxs=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=f) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dfs(v,u,dep+<span class=\"number\">1</span>);</span><br><span class=\"line\">            siz[u]+=siz[v];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (siz[v]&gt;=maxs) maxs=siz[v],son[u]=v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> topf)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    top[u]=topf;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!son[u]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    dfs(son[u],topf);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=fa[u] &amp;&amp; v!=son[u]) dfs(v,v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (top[u]!=top[v])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth[top[u]]&lt;depth[top[v]]) swap(u,v);</span><br><span class=\"line\">        u=fa[top[u]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (depth[u]&gt;depth[v]) swap(u,v);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"倍增\"><a href=\"#倍增\" class=\"headerlink\" title=\"倍增\"></a>倍增</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> fa,<span class=\"keyword\">int</span> dep)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    f[u][<span class=\"number\">0</span>]=fa;</span><br><span class=\"line\">    depth[u]=dep;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;(<span class=\"number\">1</span>&lt;&lt;i)&lt;=n;++i)</span><br><span class=\"line\">        f[u][i]=f[f[u][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=fa) dfs(v,u,dep+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (depth[u]&lt;depth[v]) swap(u,v);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=depth[u]-depth[v];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;(<span class=\"number\">1</span>&lt;&lt;i)&lt;=l;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l&amp;(<span class=\"number\">1</span>&lt;&lt;i)) u=f[u][i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u==v) <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">22</span>;i&gt;=<span class=\"number\">0</span>;--i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f[u][i]!=f[v][i]) </span><br><span class=\"line\">            u=f[u][i],v=f[v][i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[u][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"DFS序转RMQ\"><a href=\"#DFS序转RMQ\" class=\"headerlink\" title=\"DFS序转RMQ\"></a>DFS序转RMQ</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Min</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;<span class=\"keyword\">return</span> depth[x]&lt;depth[y]?x:y;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> f,<span class=\"keyword\">int</span> dep)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fa[u]=f;</span><br><span class=\"line\">    dfn[++tot]=u;</span><br><span class=\"line\">    pre[u]=tot;</span><br><span class=\"line\">    depth[tot]=dep;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=f)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dfs(v,u,dep+<span class=\"number\">1</span>);</span><br><span class=\"line\">            dfn[++tot]=u;</span><br><span class=\"line\">            depth[tot]=dep;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rmq_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=tot;++i) st[i][<span class=\"number\">0</span>]=i; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;(<span class=\"number\">1</span>&lt;&lt;j)&lt;=tot;++j)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i+(<span class=\"number\">1</span>&lt;&lt;j)<span class=\"number\">-1</span>&lt;=tot;++i)</span><br><span class=\"line\">            st[i][j]=Min(st[i][j<span class=\"number\">-1</span>],st[i+(<span class=\"number\">1</span>&lt;&lt;(j<span class=\"number\">-1</span>))][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rmq</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((<span class=\"number\">1</span>&lt;&lt;(k+<span class=\"number\">1</span>))&lt;=R-L+<span class=\"number\">1</span>) ++k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Min(st[L][k],st[R-(<span class=\"number\">1</span>&lt;&lt;k)+<span class=\"number\">1</span>][k]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    x=pre[x];y=pre[y];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&gt;y) swap(x,y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dfn[rmq(x,y)];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Tarjan\"><a href=\"#Tarjan\" class=\"headerlink\" title=\"Tarjan\"></a>Tarjan</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123; <span class=\"keyword\">return</span> x==fa[x]?x:fa[x]=find(fa[x]);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> f)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fa[u]=u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=f) dfs(v,u),fa[v]=u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=query_head[u];~i;i=query[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=query[i].v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[v]) query[i].ans=query[i^<span class=\"number\">1</span>].ans=find(v);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    vis[u]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"单源最短路径\"><a href=\"#单源最短路径\" class=\"headerlink\" title=\"单源最短路径\"></a>单源最短路径</h2><blockquote>\n<p>Dijkstra</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(d,<span class=\"number\">0x3f</span>,<span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::priority_queue&lt;Node&gt; q;</span><br><span class=\"line\">    d[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    q.push(Node(s,<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=q.top().u,di=q.top().dis;q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (di!=d[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d[v]&gt;d[u]+edge[i].w)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                d[v]=d[u]+edge[i].w;</span><br><span class=\"line\">                q.push(Node(v,d[v]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>SPFA</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">spfa</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    d[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    vis[s]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=q.front(); q.pop();vis[u]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edges[i].next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Edge&amp; e=edges[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d[e.to]&gt;d[u]+e.w)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                d[e.to]=d[u]+e.w;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[e.to]) q.push(e.to),vis[e.to]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网络流\"><a href=\"#网络流\" class=\"headerlink\" title=\"网络流\"></a>网络流</h2><blockquote>\n<p>Dinic最大流</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(depth,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(depth));</span><br><span class=\"line\">    depth[s]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=q.front();q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];~i;i=edge[i].next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!depth[v] &amp;&amp; edge[i].w&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">                depth[v]=depth[u]+<span class=\"number\">1</span>,q.push(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> depth[t]&gt;<span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> flow)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u==t) <span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> &amp;i=cur[u];~i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth[v]==depth[u]+<span class=\"number\">1</span> &amp;&amp; edge[i].w&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d=dfs(v,min(flow,edge[i].w));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                edge[i].w-=d;</span><br><span class=\"line\">                edge[i^<span class=\"number\">1</span>].w+=d;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dinic</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (bfs())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(cur,head,<span class=\"keyword\">sizeof</span>(cur));</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">int</span> d=dfs(s,INF)) ans+=d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Edmonds-Karp费用流</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">spfa</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> vis[maxn];</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(d,<span class=\"number\">0x3f</span>,<span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">    d[s]=<span class=\"number\">0</span>;vis[s]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=q.front();q.pop();</span><br><span class=\"line\">        vis[u]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];~i;i=edge[i].next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (edge[i].flow&gt;<span class=\"number\">0</span> &amp;&amp; d[v]&gt;d[u]+edge[i].cost)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                d[v]=d[u]+edge[i].cost;</span><br><span class=\"line\">                incf[v]=edge[i].flow;</span><br><span class=\"line\">                inedge[v]=i;</span><br><span class=\"line\">                pre[v]=u;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[v]) vis[v]=<span class=\"literal\">true</span>,q.push(v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[t]&lt;inf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">mcmf</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flow=<span class=\"number\">0</span>,cost=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (spfa())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=t,mn=inf;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=t;i!=s;i=pre[i])</span><br><span class=\"line\">            mn=min(mn,incf[i]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=t;i!=s;i=pre[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            edge[inedge[i]].flow-=mn;</span><br><span class=\"line\">            edge[inedge[i]^<span class=\"number\">1</span>].flow+=mn;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cost+=d[t]*mn;</span><br><span class=\"line\">        flow+=mn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\"</span>,flow,cost);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"割点\"><a href=\"#割点\" class=\"headerlink\" title=\"割点\"></a>割点</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> chd=<span class=\"number\">0</span>;</span><br><span class=\"line\">    dfn[u]=low[u]=++idx;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tarjan(v,rt);</span><br><span class=\"line\">            low[u]=min(low[u],low[v]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (low[v]&gt;=dfn[u])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ++chd;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (chd&gt;<span class=\"number\">1</span> || u!=rt)</span><br><span class=\"line\">                    iscut[u]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tarjan缩点\"><a href=\"#Tarjan缩点\" class=\"headerlink\" title=\"Tarjan缩点\"></a>Tarjan缩点</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> head[maxn],cnt;</span><br><span class=\"line\">    Edge edge[maxm];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">        edge[++cnt].next=head[u];</span><br><span class=\"line\">        edge[cnt].to=v;</span><br><span class=\"line\">        head[u]=cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;old,dag;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dfn[u]=low[u]=++idx;</span><br><span class=\"line\">    stk[++top]=u;</span><br><span class=\"line\">    instack[u]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=old.head[u];i;i=old.edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=old.edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tarjan(v);</span><br><span class=\"line\">            low[u]=min(low[u],low[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (instack[v]) low[u]=min(low[u],dfn[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dfn[u]==low[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v;</span><br><span class=\"line\">        ++scc_cnt;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            v=stk[top--];</span><br><span class=\"line\">            belong[v]=scc_cnt;</span><br><span class=\"line\">            w[scc_cnt]+=val[v];</span><br><span class=\"line\">            instack[v]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span> (v!=u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rebuild</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u=<span class=\"number\">1</span>;u&lt;=n;++u)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=old.head[u];i;i=old.edge[i].next)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (belong[u]!=belong[old.edge[i].to])</span><br><span class=\"line\">                dag.add(belong[u],belong[old.edge[i].to]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[i]) tarjan(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-SAT\"><a href=\"#2-SAT\" class=\"headerlink\" title=\"2-SAT\"></a>2-SAT</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dfn[u]=low[u]=++idx;</span><br><span class=\"line\">    instack[u]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    stk[++top]=u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instack[v]) low[u]=min(low[u],dfn[v]);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!dfn[v])</span><br><span class=\"line\">                tarjan(v),low[u]=min(low[u],low[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dfn[u]==low[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v;++scc_cnt;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            v=stk[top--];</span><br><span class=\"line\">            belong[v]=scc_cnt;</span><br><span class=\"line\">            instack[v]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span> (v!=u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">twosat</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n&lt;&lt;<span class=\"number\">1</span>;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[i]) tarjan(i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (belong[i]==belong[i+n]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h2 id=\"ST表\"><a href=\"#ST表\" class=\"headerlink\" title=\"ST表\"></a>ST表</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">prework</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (rint j=<span class=\"number\">1</span>;(<span class=\"number\">1</span>&lt;&lt;j)&lt;=n;++j)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (rint i=<span class=\"number\">1</span>;(i+(<span class=\"number\">1</span>&lt;&lt;j)<span class=\"number\">-1</span>)&lt;=n;++i)</span><br><span class=\"line\">            d[i][j]=max(d[i][j<span class=\"number\">-1</span>],d[i+(<span class=\"number\">1</span>&lt;&lt;(j<span class=\"number\">-1</span>))][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k=<span class=\"number\">0</span>,len=j-i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>&lt;&lt;(k+<span class=\"number\">1</span>)&lt;=len)++k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(d[i][k],d[j-(<span class=\"number\">1</span>&lt;&lt;k)+<span class=\"number\">1</span>][k]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"线段树2\"><a href=\"#线段树2\" class=\"headerlink\" title=\"线段树2\"></a>线段树2</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    mul[o]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,sumv+o);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    build(ls);build(rs);</span><br><span class=\"line\">    pushup(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    sumv[o&lt;&lt;<span class=\"number\">1</span>]=(sumv[o&lt;&lt;<span class=\"number\">1</span>]*mul[o]+addv[o]*(len-(len&gt;&gt;<span class=\"number\">1</span>)))%p;</span><br><span class=\"line\">    sumv[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]=(sumv[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]*mul[o]+addv[o]*(len&gt;&gt;<span class=\"number\">1</span>))%p;</span><br><span class=\"line\">    mul[o&lt;&lt;<span class=\"number\">1</span>]=mul[o&lt;&lt;<span class=\"number\">1</span>]*mul[o]%p;</span><br><span class=\"line\">    mul[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]=mul[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]*mul[o]%p;</span><br><span class=\"line\">    addv[o&lt;&lt;<span class=\"number\">1</span>]=(addv[o&lt;&lt;<span class=\"number\">1</span>]*mul[o]+addv[o])%p;</span><br><span class=\"line\">    addv[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]=(addv[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]*mul[o]+addv[o])%p;</span><br><span class=\"line\">    addv[o]=<span class=\"number\">0</span>;mul[o]=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">multiplicate</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> c,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mul[o]=mul[o]*c%p;</span><br><span class=\"line\">        addv[o]=addv[o]*c%p;</span><br><span class=\"line\">        sumv[o]=sumv[o]*c%p;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pushdown(o,r-l+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) multiplicate(L,R,c,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt;m)  multiplicate(L,R,c,rs);</span><br><span class=\"line\">    pushup(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> c,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        addv[o]=(addv[o]+c)%p;</span><br><span class=\"line\">        sumv[o]=(sumv[o]+c*(r-l+<span class=\"number\">1</span>))%p;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pushdown(o,r-l+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) add(L,R,c,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt;m)  add(L,R,c,rs);</span><br><span class=\"line\">    pushup(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">Querysum</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r) <span class=\"keyword\">return</span> sumv[o]%p;</span><br><span class=\"line\">    pushdown(o,r-l+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) tot=(tot+Querysum(L,R,ls))%p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt;m)  tot=(tot+Querysum(L,R,rs))%p;</span><br><span class=\"line\">    pushup(o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"左偏树\"><a href=\"#左偏树\" class=\"headerlink\" title=\"左偏树\"></a>左偏树</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!x || !y) <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val[x]&gt;val[y] || (val[x]==val[y] &amp;&amp; x&gt;y))</span><br><span class=\"line\">        swap(x,y);</span><br><span class=\"line\">    rs(x)=merge(rs(x),y);</span><br><span class=\"line\">    fa[rs(x)]=x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dis[rs(x)]&gt;dis[ls(x)]) swap(ls(x),rs(x));</span><br><span class=\"line\">    dis[x]=dis[rs(x)]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">findroot</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fa[x]) x=fa[x];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret=val[x];</span><br><span class=\"line\">    fa[ls(x)]=fa[rs(x)]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    val[x]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    merge(ls(x),rs(x));</span><br><span class=\"line\">    ls(x)=rs(x)=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"主席树\"><a href=\"#主席树\" class=\"headerlink\" title=\"主席树\"></a>主席树</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> &amp;rt,<span class=\"keyword\">int</span> oldrt,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    rt=++num;</span><br><span class=\"line\">    tree[rt]=tree[oldrt];</span><br><span class=\"line\">    ++tree[rt].sumv;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=m) insert(x,tree[rt].ls,tree[oldrt].ls,l,m);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> insert(x,tree[rt].rs,tree[oldrt].rs,m+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> lrt,<span class=\"keyword\">int</span> rrt,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k=tree[tree[rrt].ls].sumv-tree[tree[lrt].ls].sumv;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=k) <span class=\"keyword\">return</span> query(x,tree[lrt].ls,tree[rrt].ls,l,m);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> query(x-k,tree[lrt].rs,tree[rrt].rs,m+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CDQ分治（三维偏序）\"><a href=\"#CDQ分治（三维偏序）\" class=\"headerlink\" title=\"CDQ分治（三维偏序）\"></a>CDQ分治（三维偏序）</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e5</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tuple</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b,c,cnt,ans;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"keyword\">const</span> Tuple&amp; Tp) <span class=\"keyword\">const</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a!=Tp.a) <span class=\"keyword\">return</span> a&lt;Tp.a;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b!=Tp.b) <span class=\"keyword\">return</span> b&lt;Tp.b;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c&lt;Tp.c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!= (<span class=\"keyword\">const</span> Tuple&amp; Tp)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a!=Tp.a || b!=Tp.b || c!=Tp.c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;tmp[maxn],a[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">const</span> Tuple&amp; a,<span class=\"keyword\">const</span> Tuple&amp; b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a.b!=b.b) <span class=\"keyword\">return</span> a.b&lt;b.b;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.c&lt;b.c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> c[maxn*<span class=\"number\">2</span>],n,k;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=x;i&lt;=k;i+=i&amp;-i) c[i]+=y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=x;i;i-=i&amp;-i) ans+=c[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    solve(l,mid);solve(mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">    sort(a+l,a+mid+<span class=\"number\">1</span>,cmp());sort(a+mid+<span class=\"number\">1</span>,a+r+<span class=\"number\">1</span>,cmp());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t1=l,t2=mid+<span class=\"number\">1</span>;t2&lt;=r;++t2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a[t1].b&lt;=a[t2].b &amp;&amp; t1&lt;=mid) update(a[t1].c,a[t1].cnt),++t1;</span><br><span class=\"line\">        a[t2].ans+=query(a[t2].c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=l;i&lt;=mid;++i) </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i].b&lt;=a[r].b) update(a[i].c,-a[i].cnt);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"comment\">// memset(c,0,sizeof(c));</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;tmp[i].a,&amp;tmp[i].b,&amp;tmp[i].c);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::sort(tmp+<span class=\"number\">1</span>,tmp+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot;a[tot=<span class=\"number\">1</span>]=tmp[<span class=\"number\">1</span>];a[<span class=\"number\">1</span>].cnt=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp[i]!=tmp[i<span class=\"number\">-1</span>]) a[++tot]=tmp[i],a[tot].cnt=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> ++a[tot].cnt;</span><br><span class=\"line\">    solve(<span class=\"number\">1</span>,tot);</span><br><span class=\"line\">    <span class=\"comment\">// for (int i=1;i&lt;=tot;++i) printf(\"%d \",a[i].ans);</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ans[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=tot;++i) ans[a[i].ans+a[i].cnt<span class=\"number\">-1</span>]+=a[i].cnt;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"点分治\"><a href=\"#点分治\" class=\"headerlink\" title=\"点分治\"></a>点分治</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getroot</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> fa)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    mxsiz[u]=<span class=\"number\">0</span>;siz[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[v] || v==fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        getroot(v,u);</span><br><span class=\"line\">        siz[u]+=siz[v];</span><br><span class=\"line\">        mxsiz[u]=max(mxsiz[u],siz[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mxsiz[u]=max(mxsiz[u],S-siz[u]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mxsiz[u]&lt;mxsiz[root]) root=u;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getdis</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> fa,<span class=\"keyword\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tmp[++cnt]=d;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[v] || v==fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        getdis(v,u,d+edge[i].w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getans</span><span class=\"params\">(<span class=\"keyword\">int</span> opt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    sort(tmp+<span class=\"number\">1</span>,tmp+cnt+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u=<span class=\"number\">1</span>;u&lt;=cnt;++u)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t=<span class=\"number\">1</span>;t&lt;=m;++t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            pair&lt;<span class=\"keyword\">int</span>*,<span class=\"keyword\">int</span>*&gt; p=equal_range(tmp+<span class=\"number\">1</span>,tmp+cnt+<span class=\"number\">1</span>,query[t]-tmp[u]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p.second!=p.first) count[t]+=opt*(p.second-p.first);</span><br><span class=\"line\">            <span class=\"comment\">// assert(p.second==p.first);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vis[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    getdis(u,cnt=<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    getans(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[v]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        getdis(v,cnt=<span class=\"number\">0</span>,edge[i].w);</span><br><span class=\"line\">        getans(<span class=\"number\">-1</span>);</span><br><span class=\"line\">        mxsiz[root=<span class=\"number\">0</span>]=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\">        S=siz[v];</span><br><span class=\"line\">        getroot(v,<span class=\"number\">0</span>);</span><br><span class=\"line\">        solve(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"笛卡尔树-Luogu-P3793\"><a href=\"#笛卡尔树-Luogu-P3793\" class=\"headerlink\" title=\"笛卡尔树(Luogu P3793)\"></a>笛卡尔树(Luogu P3793)</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"keyword\">uint64_t</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> GenHelper</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> z1,z2,z3,z4,b;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">rand_</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        b=((z1&lt;&lt;<span class=\"number\">6</span>)^z1)&gt;&gt;<span class=\"number\">13</span>;</span><br><span class=\"line\">        z1=((z1&amp;<span class=\"number\">4294967294U</span>)&lt;&lt;<span class=\"number\">18</span>)^b;</span><br><span class=\"line\">        b=((z2&lt;&lt;<span class=\"number\">2</span>)^z2)&gt;&gt;<span class=\"number\">27</span>;</span><br><span class=\"line\">        z2=((z2&amp;<span class=\"number\">4294967288U</span>)&lt;&lt;<span class=\"number\">2</span>)^b;</span><br><span class=\"line\">        b=((z3&lt;&lt;<span class=\"number\">13</span>)^z3)&gt;&gt;<span class=\"number\">21</span>;</span><br><span class=\"line\">        z3=((z3&amp;<span class=\"number\">4294967280U</span>)&lt;&lt;<span class=\"number\">7</span>)^b;</span><br><span class=\"line\">        b=((z4&lt;&lt;<span class=\"number\">3</span>)^z4)&gt;&gt;<span class=\"number\">12</span>;</span><br><span class=\"line\">        z4=((z4&amp;<span class=\"number\">4294967168U</span>)&lt;&lt;<span class=\"number\">13</span>)^b;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (z1^z2^z3^z4);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">srand</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> GenHelper;</span><br><span class=\"line\">    z1=x; </span><br><span class=\"line\">    z2=(~x)^<span class=\"number\">0x233333333</span>U; </span><br><span class=\"line\">    z3=x^<span class=\"number\">0x1234598766</span>U; </span><br><span class=\"line\">    z4=(~x)+<span class=\"number\">51</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> GenHelper;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a=rand_()&amp;<span class=\"number\">32767</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b=rand_()&amp;<span class=\"number\">32767</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a*<span class=\"number\">32768</span>+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">2e7</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn],ls[maxn],rs[maxn],root;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"built_in\">stack</span>[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> top=<span class=\"number\">0</span>;</span><br><span class=\"line\">    a[<span class=\"number\">0</span>]=-INF;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (top &amp;&amp; a[<span class=\"built_in\">stack</span>[top]]&lt;=a[i]) ls[i]=<span class=\"built_in\">stack</span>[top--];</span><br><span class=\"line\">        rs[<span class=\"built_in\">stack</span>[top]]=i;</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>[++top]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root=<span class=\"built_in\">stack</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> uint64_t <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x=root;;x=x&lt;l?rs[x]:ls[x])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x&gt;=l &amp;&amp; x&lt;=r) <span class=\"keyword\">return</span> a[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m,s;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;n,&amp;m,&amp;s);</span><br><span class=\"line\">    srand(s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) a[i]=read();</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> ans=<span class=\"number\">0</span>;<span class=\"keyword\">int</span> l,r;</span><br><span class=\"line\">    init(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        l=read()%n+<span class=\"number\">1</span>;</span><br><span class=\"line\">        r=read()%n+<span class=\"number\">1</span>;</span><br><span class=\"line\">        ans+=l&gt;r?query(r,l):query(l,r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%llu\"</span>,ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"树链剖分-LOJ模板题，带换根\"><a href=\"#树链剖分-LOJ模板题，带换根\" class=\"headerlink\" title=\"树链剖分(LOJ模板题，带换根)\"></a>树链剖分(LOJ模板题，带换根)</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ls l,m,o&lt;&lt;1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rs m+1,r,o&lt;&lt;1|1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e5</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> val[maxn],top[maxn],fa[maxn],siz[maxn],son[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[maxn][<span class=\"number\">30</span>],depth[maxn],head[maxn],cnt,root,id[maxn],w[maxn];</span><br><span class=\"line\">ll sumv[maxn&lt;&lt;<span class=\"number\">2</span>],addv[maxn&lt;&lt;<span class=\"number\">2</span>],tot,n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,next;</span><br><span class=\"line\">&#125;edge[maxn&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _add(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    edge[++cnt].next=head[u];</span><br><span class=\"line\">    edge[cnt].to=v;</span><br><span class=\"line\">    head[u]=cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    _add(u,v);_add(v,u);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> fa,<span class=\"keyword\">int</span> dep)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    depth[u]=dep;</span><br><span class=\"line\">    ::fa[u]=fa;</span><br><span class=\"line\">    siz[u]=<span class=\"number\">1</span>;<span class=\"keyword\">int</span> maxs=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=fa)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dfs(v,u,dep+<span class=\"number\">1</span>);</span><br><span class=\"line\">            siz[u]+=siz[v];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (siz[v]&gt;maxs) son[u]=v,maxs=siz[v];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> topf)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    id[u]=++tot;</span><br><span class=\"line\">    w[tot]=val[u];</span><br><span class=\"line\">    top[u]=topf;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!son[u]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    dfs(son[u],topf);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=fa[u] &amp;&amp; v!=son[u]) dfs(v,v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span>&#123;sumv[o]=sumv[o&lt;&lt;<span class=\"number\">1</span>]+sumv[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>];&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    addv[o&lt;&lt;<span class=\"number\">1</span>]+=addv[o];</span><br><span class=\"line\">    addv[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]+=addv[o];</span><br><span class=\"line\">    sumv[o&lt;&lt;<span class=\"number\">1</span>]+=addv[o]*(len-(len&gt;&gt;<span class=\"number\">1</span>));</span><br><span class=\"line\">    sumv[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]+=addv[o]*(len&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    addv[o]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) &#123;sumv[o]=w[l];<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    build(ls);build(rs);</span><br><span class=\"line\">    pushup(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> c,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        addv[o]+=c;</span><br><span class=\"line\">        sumv[o]+=c*(r-l+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pushdown(o,r-l+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) update(L,R,c,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt; m) update(L,R,c,rs);</span><br><span class=\"line\">    pushup(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r) <span class=\"keyword\">return</span> sumv[o];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    pushdown(o,r-l+<span class=\"number\">1</span>);</span><br><span class=\"line\">    ll tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) tot+=query(L,R,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt; m) tot+=query(L,R,rs);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">AddRoute</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (top[u]!=top[v])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth[top[u]]&lt;depth[top[v]]) u^=v^=u^=v;</span><br><span class=\"line\">        update(id[top[u]],id[u],k,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">        u=fa[top[u]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (depth[u]&gt;depth[v]) u^=v^=u^=v;</span><br><span class=\"line\">    update(id[u],id[v],k,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">QueryRoute</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (top[u]!=top[v])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth[top[u]]&lt;depth[top[v]]) u^=v^=u^=v;</span><br><span class=\"line\">        ans+=query(id[top[u]],id[u],<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">        u=fa[top[u]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (depth[u]&gt;depth[v]) u^=v^=u^=v;</span><br><span class=\"line\">    ans+=query(id[u],id[v],<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (top[u]!=top[v])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth[top[u]]&lt;depth[top[v]]) u^=v^=u^=v;</span><br><span class=\"line\">        u=fa[top[u]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> depth[u]&gt;depth[v]?v:u;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">get_son</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> prec)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">20</span>;~i;--i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth[f[u][i]]&gt;depth[prec]) u=f[u][i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">AddSubTree</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u==root) update(<span class=\"number\">1</span>,n,k,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lca(u,root)!=u)</span><br><span class=\"line\">        update(id[u],id[u]+siz[u]<span class=\"number\">-1</span>,k,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        update(<span class=\"number\">1</span>,n,k,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=get_son(root,u);</span><br><span class=\"line\">        update(id[v],id[v]+siz[v]<span class=\"number\">-1</span>,-k,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">QuerySubTree</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u==root) <span class=\"keyword\">return</span> query(<span class=\"number\">1</span>,n,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lca(u,root)!=u)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(id[u],id[u]+siz[u]<span class=\"number\">-1</span>,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=get_son(root,u);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(<span class=\"number\">1</span>,n,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>)-query(id[v],id[v]+siz[v]<span class=\"number\">-1</span>,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        <span class=\"comment\">// return query(1,n,1,n,1)-query(id[u]+1,id[u]+siz[u]-1,1,n,1);</span></span><br><span class=\"line\">        <span class=\"comment\">// // else return query(1,n,1,n,1);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">get_anc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) f[i][<span class=\"number\">0</span>]=fa[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">20</span>;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u=<span class=\"number\">1</span>;u&lt;=n;++u)</span><br><span class=\"line\">            f[u][i]=f[f[u][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// freopen(\"tree2.in\",\"r\",stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">// freopen(\"tree20.out\",\"w\",stdout);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);root=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,val+i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,tmp;i&lt;n;++i) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;tmp),add(tmp,i+<span class=\"number\">1</span>);</span><br><span class=\"line\">    dfs(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>);dfs(<span class=\"number\">1</span>,<span class=\"number\">1</span>);build(<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);get_anc();</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,opt,u,v,k;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;opt);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (opt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;root);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;u,&amp;v,&amp;k);AddRoute(u,v,k);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;u,&amp;k);AddSubTree(u,k);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>:<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;u,&amp;v);<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,QueryRoute(u,v));<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">5</span>:<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;u);<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,QuerySubTree(u));<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"LCT\"><a href=\"#LCT\" class=\"headerlink\" title=\"LCT\"></a>LCT</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ls(x) (ch[x][0])</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rs(x) (ch[x][1])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">3e5</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> val[maxn],ch[maxn][<span class=\"number\">2</span>],fa[maxn],rev[maxn],s[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a,<span class=\"keyword\">int</span> &amp;b)</span></span>&#123;a^=b^=a^=b;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">nroot</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> ls(fa[x])==x || rs(fa[x])==x;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;s[x]=s[ls(x)]^s[rs(x)]^val[x];&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushr</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    swap(ls(x),rs(x));rev[x]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rev[x]) pushr(ls(x)),pushr(rs(x)),rev[x]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y=fa[x],z=fa[y],k=ch[y][<span class=\"number\">1</span>]==x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nroot(y)) ch[z][ch[z][<span class=\"number\">1</span>]==y]=x;</span><br><span class=\"line\">    fa[x]=z;</span><br><span class=\"line\">    ch[y][k]=ch[x][k^<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch[x][k^<span class=\"number\">1</span>]) fa[ch[x][k^<span class=\"number\">1</span>]]=y;</span><br><span class=\"line\">    ch[x][k^<span class=\"number\">1</span>]=y;</span><br><span class=\"line\">    fa[y]=x;</span><br><span class=\"line\">    pushup(y);pushup(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"built_in\">stack</span>[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y=x,z=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nroot(y)) <span class=\"built_in\">stack</span>[++z]=y,y=fa[y];</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>[++z]=y;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (z) pushdown(<span class=\"built_in\">stack</span>[z--]);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nroot(x))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        y=fa[x],z=fa[y];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nroot(y)) rotate(((ls(z)==y)^(ls(y)==x))?x:y);</span><br><span class=\"line\">        rotate(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">access</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> y=<span class=\"number\">0</span>;x;y=x,x=fa[x])</span><br><span class=\"line\">        splay(x),ch[x][<span class=\"number\">1</span>]=y,pushup(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">makeroot</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    access(x);splay(x);pushr(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">findroot</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    access(x);</span><br><span class=\"line\">    splay(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ls(x)) pushdown(x),x=ls(x);<span class=\"comment\">// 这里一定记得pushdown!</span></span><br><span class=\"line\">    splay(x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">link</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    makeroot(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (findroot(y)!=x) fa[x]=y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">cut</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    makeroot(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (findroot(y)==x &amp;&amp; fa[y]==x &amp;&amp; !ch[y][<span class=\"number\">0</span>]) ch[x][<span class=\"number\">1</span>]=fa[y]=<span class=\"number\">0</span>,pushup(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    splay(x);</span><br><span class=\"line\">    s[x]^=val[x];</span><br><span class=\"line\">    val[x]=y;</span><br><span class=\"line\">    s[x]^=val[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    makeroot(x);access(y);splay(y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;split(x,y);<span class=\"keyword\">return</span> s[y];&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,val+i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,opt,x,y;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;opt,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (opt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">0</span>:<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,query(x,y));<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:link(x,y);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:cut(x,y);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:modify(x,y);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"K-D-Tree\"><a href=\"#K-D-Tree\" class=\"headerlink\" title=\"K-D Tree\"></a>K-D Tree</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::nth_element;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::min;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::max;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e6</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    Point()&#123;&#125;</span><br><span class=\"line\">    Point(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y):x(x),y(y)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">KDTree</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">constexpr</span> <span class=\"keyword\">double</span> alpha=<span class=\"number\">0.75</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> root;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> val,siz,sum;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ch[<span class=\"number\">2</span>];</span><br><span class=\"line\">        Point mn,mx,now;</span><br><span class=\"line\">    &#125;t[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> top,has_rebuild,fa_rebuild,k_rebuild;</span><br><span class=\"line\">    KDTree()&#123;t[<span class=\"number\">0</span>].mn=Point(INF,INF);t[<span class=\"number\">0</span>].mx=Point(-INF,-INF);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> trash[maxn],Trash;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">isbad</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span>&#123;<span class=\"keyword\">return</span> t[t[o].ch[<span class=\"number\">0</span>]].siz&gt;t[o].siz*alpha || t[t[o].ch[<span class=\"number\">1</span>]].siz&gt;t[o].siz*alpha;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        t[o].siz=t[t[o].ch[<span class=\"number\">0</span>]].siz+t[t[o].ch[<span class=\"number\">1</span>]].siz+<span class=\"number\">1</span>;</span><br><span class=\"line\">        t[o].sum=t[t[o].ch[<span class=\"number\">0</span>]].sum+t[t[o].ch[<span class=\"number\">1</span>]].sum+t[o].val;</span><br><span class=\"line\">        t[o].mn.x=min(&#123;t[o].now.x,t[t[o].ch[<span class=\"number\">0</span>]].mn.x,t[t[o].ch[<span class=\"number\">1</span>]].mn.x&#125;);</span><br><span class=\"line\">        t[o].mn.y=min(&#123;t[o].now.y,t[t[o].ch[<span class=\"number\">0</span>]].mn.y,t[t[o].ch[<span class=\"number\">1</span>]].mn.y&#125;);</span><br><span class=\"line\">        t[o].mx.y=max(&#123;t[o].now.y,t[t[o].ch[<span class=\"number\">0</span>]].mx.y,t[t[o].ch[<span class=\"number\">1</span>]].mx.y&#125;);</span><br><span class=\"line\">        t[o].mx.x=max(&#123;t[o].now.x,t[t[o].ch[<span class=\"number\">0</span>]].mx.x,t[t[o].ch[<span class=\"number\">1</span>]].mx.x&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[o].ch[<span class=\"number\">0</span>]) dfs(t[o].ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        trash[++Trash]=o;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[o].ch[<span class=\"number\">1</span>]) dfs(t[o].ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> _rebuild(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l&gt;r) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=trash[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l==r) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t[x].ch[<span class=\"number\">0</span>]=t[x].ch[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            t[x].mn=t[x].mx=t[x].now;</span><br><span class=\"line\">            t[x].siz=<span class=\"number\">1</span>;</span><br><span class=\"line\">            t[x].sum=t[x].val;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k==<span class=\"number\">1</span>) nth_element(trash+l,trash+mid+<span class=\"number\">1</span>,trash+r+<span class=\"number\">1</span>,[<span class=\"keyword\">this</span>](<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> x,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> y) -&gt;<span class=\"keyword\">bool</span> &#123;<span class=\"keyword\">return</span> t[x].now.x&lt;t[y].now.x;&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> nth_element(trash+l,trash+mid+<span class=\"number\">1</span>,trash+r+<span class=\"number\">1</span>,[<span class=\"keyword\">this</span>](<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> x,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> y) -&gt;<span class=\"keyword\">bool</span> &#123;<span class=\"keyword\">return</span> t[x].now.y&lt;t[y].now.y;&#125;);</span><br><span class=\"line\">        x=trash[mid];</span><br><span class=\"line\">        t[x].ch[<span class=\"number\">0</span>]=_rebuild(l,mid<span class=\"number\">-1</span>,k^<span class=\"number\">1</span>);</span><br><span class=\"line\">        t[x].ch[<span class=\"number\">1</span>]=_rebuild(mid+<span class=\"number\">1</span>,r,k^<span class=\"number\">1</span>);</span><br><span class=\"line\">        pushup(x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rebuild</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Trash=<span class=\"number\">0</span>;</span><br><span class=\"line\">        dfs(o);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Trash) <span class=\"keyword\">return</span> _rebuild(<span class=\"number\">1</span>,Trash,k);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> _insert(<span class=\"keyword\">const</span> Point&amp; p,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span>&amp; o,<span class=\"keyword\">int</span> k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!o)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o=++top;</span><br><span class=\"line\">            t[o].sum=t[o].val=x;</span><br><span class=\"line\">            t[o].mn=t[o].mx=t[o].now=p;</span><br><span class=\"line\">            t[o].siz=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k&amp;<span class=\"number\">1</span>) _insert(p,x,t[o].ch[t[o].now.x&lt;=p.x],<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> _insert(p,x,t[o].ch[t[o].now.y&lt;=p.y],<span class=\"number\">1</span>);</span><br><span class=\"line\">        pushup(o);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isbad(t[o].ch[<span class=\"number\">0</span>])) has_rebuild=t[o].ch[<span class=\"number\">0</span>],fa_rebuild=o,k_rebuild=k^<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isbad(t[o].ch[<span class=\"number\">1</span>])) has_rebuild=t[o].ch[<span class=\"number\">1</span>],fa_rebuild=o,k_rebuild=k^<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">const</span> Point&amp; p,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _insert(p,x,root,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isbad(root)) root=rebuild(root,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (has_rebuild) t[fa_rebuild].ch[t[fa_rebuild].ch[<span class=\"number\">1</span>]==has_rebuild]=rebuild(has_rebuild,k_rebuild);</span><br><span class=\"line\">        has_rebuild=fa_rebuild=k_rebuild=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">check_range</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">const</span> Point&amp; l,<span class=\"keyword\">const</span> Point&amp; r)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t[o].mn.x&gt;=l.x &amp;&amp; t[o].mn.y&gt;=l.y &amp;&amp; t[o].mx.x&lt;=r.x &amp;&amp; t[o].mx.y&lt;=r.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">check_point</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">const</span> Point&amp; l,<span class=\"keyword\">const</span> Point&amp; r)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (t[o].now.x&gt;=l.x &amp;&amp; t[o].now.x&lt;=r.x) &amp;&amp; (t[o].now.y&gt;=l.y &amp;&amp; t[o].now.y&lt;=r.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">check_have</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">const</span> Point&amp; l,<span class=\"keyword\">const</span> Point&amp; r)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !((t[o].mx.x&lt;l.x) || (t[o].mx.y&lt;l.y) || (t[o].mn.x&gt;r.x) || (t[o].mn.y&gt;r.y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">const</span> Point&amp; l,<span class=\"keyword\">const</span> Point&amp; r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check_range(o,l,r)) <span class=\"keyword\">return</span> t[o].sum;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check_point(o,l,r)) ans+=t[o].val;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check_have(t[o].ch[<span class=\"number\">0</span>],l,r)) ans+=query(l,r,t[o].ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check_have(t[o].ch[<span class=\"number\">1</span>],l,r)) ans+=query(l,r,t[o].ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> opt,x,lastans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    Point a,b;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;opt) &amp;&amp; opt!=<span class=\"number\">3</span> &amp;&amp; <span class=\"string\">\"STO LCH OTZ\"</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (opt==<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;a.x,&amp;a.y,&amp;x);</span><br><span class=\"line\">            a.x^=lastans;a.y^=lastans;x^=lastans;</span><br><span class=\"line\">            T.insert(a,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>,&amp;a.x,&amp;a.y,&amp;b.x,&amp;b.y);</span><br><span class=\"line\">            a.x^=lastans;a.y^=lastans;b.x^=lastans;b.y^=lastans;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,lastans=T.query(a,b,T.root));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"平衡树\"><a href=\"#平衡树\" class=\"headerlink\" title=\"平衡树\"></a>平衡树</h2><h3 id=\"Treap\"><a href=\"#Treap\" class=\"headerlink\" title=\"Treap\"></a>Treap</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Treap</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> v,s,r,cnt;</span><br><span class=\"line\">    \tNode* ch[<span class=\"number\">2</span>];</span><br><span class=\"line\">    \tNode(<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> s=<span class=\"number\">1</span>):s(s),cnt(s),r(rand()*rand()),v(v)&#123;ch[<span class=\"number\">0</span>]=ch[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    \t</span>&#123;</span><br><span class=\"line\">    \t\ts=cnt;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span> (ch[<span class=\"number\">0</span>]) s+=ch[<span class=\"number\">0</span>]-&gt;s;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span> (ch[<span class=\"number\">1</span>]) s+=ch[<span class=\"number\">1</span>]-&gt;s;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    \t</span>&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> v==x?<span class=\"number\">-1</span>:v&lt;x;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"keyword\">int</span> __prec,__succ;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        Treap():__prec(<span class=\"number\">0</span>),__succ(<span class=\"number\">0</span>),root(<span class=\"number\">0</span>)&#123;&#125;</span><br><span class=\"line\">        Node *root;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(Node* &amp;o,<span class=\"keyword\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">            Node *k=o-&gt;ch[d^<span class=\"number\">1</span>];</span><br><span class=\"line\">            o-&gt;ch[d^<span class=\"number\">1</span>]=k-&gt;ch[d];</span><br><span class=\"line\">            k-&gt;ch[d]=o;</span><br><span class=\"line\">            o-&gt;pushup();</span><br><span class=\"line\">            k-&gt;pushup();</span><br><span class=\"line\">            o=k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _insert(Node* &amp;o,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> t=<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o)&#123;o=<span class=\"keyword\">new</span> Node(x,t);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d=o-&gt;cmp(x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d==<span class=\"number\">-1</span>) &#123;o-&gt;cnt+=t;o-&gt;s+=t;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">            _insert(o-&gt;ch[d],x,t);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;ch[d]-&gt;r &gt; o-&gt;r) rotate(o,d^<span class=\"number\">1</span>);</span><br><span class=\"line\">            o-&gt;pushup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>)</span></span>&#123;_insert(root,x,k);&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _remove(Node* &amp;o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d=o-&gt;cmp(x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d==<span class=\"number\">-1</span>) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (o-&gt;cnt&gt;<span class=\"number\">1</span>) &#123;--o-&gt;cnt;--o-&gt;s;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!(o-&gt;ch[<span class=\"number\">0</span>]))&#123;Node* k=o;o=o-&gt;ch[<span class=\"number\">1</span>];<span class=\"keyword\">delete</span> k;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!(o-&gt;ch[<span class=\"number\">1</span>]))&#123;Node* k=o;o=o-&gt;ch[<span class=\"number\">0</span>];<span class=\"keyword\">delete</span> k;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> d2=(o-&gt;ch[<span class=\"number\">0</span>]-&gt;r &gt; o-&gt;ch[<span class=\"number\">1</span>]-&gt;r);</span><br><span class=\"line\">                    rotate(o,d2);</span><br><span class=\"line\">                    _remove(o-&gt;ch[d2],x);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> _remove(o-&gt;ch[d],x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o) o-&gt;pushup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;_remove(root,x);&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> _kth(Node* o,<span class=\"keyword\">int</span> k)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o || k&lt;=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> INT_MIN;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> s=o-&gt;ch[<span class=\"number\">0</span>]?o-&gt;ch[<span class=\"number\">0</span>]-&gt;s:<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k&gt;=s+<span class=\"number\">1</span> &amp;&amp; k&lt;=s+o-&gt;cnt) <span class=\"keyword\">return</span> o-&gt;v;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k&lt;=s) <span class=\"keyword\">return</span> _kth(o-&gt;ch[<span class=\"number\">0</span>],k);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _kth(o-&gt;ch[<span class=\"number\">1</span>],k-s-o-&gt;cnt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;<span class=\"keyword\">return</span> _kth(root,k);&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> _rank(Node* o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> s=o-&gt;ch[<span class=\"number\">0</span>]?o-&gt;ch[<span class=\"number\">0</span>]-&gt;s:<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v==x) <span class=\"keyword\">return</span> s+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&lt;x) <span class=\"keyword\">return</span> s+o-&gt;cnt+_rank(o-&gt;ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _rank(o-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> _rank(root,x);&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> _count(Node* o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d=o-&gt;cmp(x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (~d) <span class=\"keyword\">return</span> _count(o-&gt;ch[d],x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o-&gt;cnt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> _count(root,x);&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _prec(Node* o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&lt;x) __prec=max(__prec,o-&gt;v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&gt;=x) _prec(o-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> _prec(o-&gt;ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _succ(Node* o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&gt;x) __succ=min(__succ,o-&gt;v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&lt;=x) _succ(o-&gt;ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> _succ(o-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">prec</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;__prec=INT_MIN+<span class=\"number\">1</span>;_prec(root,x);<span class=\"keyword\">return</span> __prec;&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">succ</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;__succ=INT_MAX  ;_succ(root,x);<span class=\"keyword\">return</span> __succ;&#125;</span><br><span class=\"line\">&#125;T;</span><br></pre></td></tr></table></figure>\n<h3 id=\"替罪羊树\"><a href=\"#替罪羊树\" class=\"headerlink\" title=\"替罪羊树\"></a>替罪羊树</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e5</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Scapegoat_Tree</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> root,has_rebuild,fa;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> __cplusplus &gt;= 201103L</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">constexpr</span> <span class=\"keyword\">double</span> alpha=<span class=\"number\">0.75</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span> </span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">double</span> alpha=<span class=\"number\">0.75</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> siz,cnt,val;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> deleted;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ch[<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;t[maxn];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">isbad</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> t[t[x].ch[<span class=\"number\">0</span>]].cnt&gt;t[x].cnt*alpha || t[t[x].ch[<span class=\"number\">1</span>]].cnt&gt;t[x].cnt*alpha;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">maintain</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;t[x].siz=t[t[x].ch[<span class=\"number\">0</span>]].siz+t[t[x].ch[<span class=\"number\">1</span>]].siz+!t[x].deleted;t[x].cnt=t[t[x].ch[<span class=\"number\">0</span>]].cnt+t[t[x].ch[<span class=\"number\">1</span>]].cnt+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pool[maxn],top;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; tmp;</span><br><span class=\"line\">    Scapegoat_Tree()&#123;<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;maxn;++i) pool[++top]=i;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[o].ch[<span class=\"number\">0</span>]) dfs(t[o].ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!t[o].deleted) tmp.push_back(o);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> pool[++top]=o;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[o].ch[<span class=\"number\">1</span>]) dfs(t[o].ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> _rebuild(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l&gt;r) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>,o=tmp[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l==r) t[o].siz=t[o].cnt=<span class=\"number\">1</span>;</span><br><span class=\"line\">        t[o].ch[<span class=\"number\">0</span>]=_rebuild(l,mid<span class=\"number\">-1</span>);</span><br><span class=\"line\">        t[o].ch[<span class=\"number\">1</span>]=_rebuild(mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">        maintain(o);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rebuild</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        tmp.clear();</span><br><span class=\"line\">        dfs(o);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _rebuild(<span class=\"number\">0</span>,tmp.size()<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> _insert(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> &amp;o)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!o)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o=pool[top--];</span><br><span class=\"line\">            t[o].siz=t[o].cnt=<span class=\"number\">1</span>;</span><br><span class=\"line\">            t[o].val=x;</span><br><span class=\"line\">            t[o].deleted=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            t[o].ch[<span class=\"number\">0</span>]=t[o].ch[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ++t[o].siz;++t[o].cnt;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> d=(t[o].val&lt;=x);</span><br><span class=\"line\">        _insert(x,t[o].ch[d]);</span><br><span class=\"line\">        <span class=\"comment\">// if (isbad(o)) o=rebuild(o);//need repair?</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isbad(t[o].ch[<span class=\"number\">0</span>])) has_rebuild=t[o].ch[<span class=\"number\">0</span>],fa=o;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isbad(t[o].ch[<span class=\"number\">1</span>])) has_rebuild=t[o].ch[<span class=\"number\">1</span>],fa=o;</span><br><span class=\"line\">        <span class=\"comment\">// maintain(o);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _insert(x,root);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (has_rebuild) t[fa].ch[t[fa].ch[<span class=\"number\">1</span>]==has_rebuild]=rebuild(has_rebuild);</span><br><span class=\"line\">        fa=has_rebuild=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> _remove_kth(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> o)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[t[o].ch[<span class=\"number\">0</span>]].siz+<span class=\"number\">1</span>==x &amp;&amp; !t[o].deleted)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t[o].deleted=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            t[o].siz--;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        --t[o].siz;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[t[o].ch[<span class=\"number\">0</span>]].siz&gt;=x) _remove_kth(x,t[o].ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> _remove_kth(x-t[t[o].ch[<span class=\"number\">0</span>]].siz-!t[o].deleted,t[o].ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"comment\">// maintain(o);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove_kth</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _remove_kth(x,root);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[root].cnt*alpha&gt;t[root].siz) root=rebuild(root);</span><br><span class=\"line\">        fa=has_rebuild=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> o=root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (o)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t[o].val&gt;=x) o=t[o].ch[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> ans+=t[t[o].ch[<span class=\"number\">0</span>]].siz+!t[o].deleted,o=t[o].ch[<span class=\"number\">1</span>]; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> o=root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> s=t[t[o].ch[<span class=\"number\">0</span>]].siz;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!t[o].deleted &amp;&amp; s+<span class=\"number\">1</span>==k) <span class=\"keyword\">return</span> t[o].val;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s&gt;=k) o=t[o].ch[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> k-=s+!t[o].deleted,o=t[o].ch[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        print(t[o].ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"comment\">// printf(\"sizls=%d sizrs=%d ,siz=%d\\n\",t[t[o].ch[0]].siz,t[t[o].ch[1]].siz,t[o].siz);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!t[o].deleted) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,t[o].val);</span><br><span class=\"line\">        print(t[o].ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* data */</span></span><br><span class=\"line\">&#125;T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,opt,x;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;opt,&amp;x);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (opt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                T.insert(x);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                T.remove_kth(T.rank(x));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,T.rank(x));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,T.kth(x));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,T.kth(T.rank(x)<span class=\"number\">-1</span>));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,T.kth(T.rank(x+<span class=\"number\">1</span>)));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// T.print(T.root);putchar('\\n');</span></span><br><span class=\"line\">        <span class=\"comment\">// T.root=T.rebuild(T.root);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Splay\"><a href=\"#Splay\" class=\"headerlink\" title=\"Splay\"></a>Splay</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Splay</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> root,cnt;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> val,size,ff,ch[<span class=\"number\">2</span>],cnt;</span><br><span class=\"line\">    &#125;t[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        t[x].size=t[x].cnt+t[t[x].ch[<span class=\"number\">0</span>]].size+t[t[x].ch[<span class=\"number\">1</span>]].size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y=t[x].ff,z=t[y].ff;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k=(t[y].ch[<span class=\"number\">1</span>]==x);</span><br><span class=\"line\">        t[z].ch[t[z].ch[<span class=\"number\">1</span>]==y]=x;</span><br><span class=\"line\">        t[x].ff=z;</span><br><span class=\"line\">        t[y].ch[k]=t[x].ch[k^<span class=\"number\">1</span>];</span><br><span class=\"line\">        t[t[x].ch[k^<span class=\"number\">1</span>]].ff=y;</span><br><span class=\"line\">        t[y].ff=x;</span><br><span class=\"line\">        t[x].ch[k^<span class=\"number\">1</span>]=y;</span><br><span class=\"line\">        pushup(y);pushup(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> goal)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t[x].ff!=goal)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y=t[x].ff,z=t[y].ff;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (z!=goal) rotate((t[z].ch[<span class=\"number\">1</span>]==y)^(t[y].ch[<span class=\"number\">1</span>]==x)?x:y);</span><br><span class=\"line\">            rotate(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!goal) root=x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=root,ff=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t[u].val!=x &amp;&amp; u)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ff=u;</span><br><span class=\"line\">            u=t[u].ch[t[u].val&lt;x];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (u) &#123;++t[u].cnt;splay(u,<span class=\"number\">0</span>);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">        u=++cnt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ff) t[ff].ch[x&gt;t[ff].val]=u;</span><br><span class=\"line\">        t[u].ff=ff;</span><br><span class=\"line\">        t[u].ch[<span class=\"number\">0</span>]=t[u].ch[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        t[u].size=<span class=\"number\">1</span>;</span><br><span class=\"line\">        t[u].cnt=<span class=\"number\">1</span>;</span><br><span class=\"line\">        t[u].val=x;</span><br><span class=\"line\">        splay(u,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=root;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!u) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t[u].ch[t[u].val&lt;x] &amp;&amp; t[u].val!=x) u=t[u].ch[t[u].val&lt;x];</span><br><span class=\"line\">        splay(u,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Next</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> type)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        find(x);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=root;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[u].val&gt;x &amp;&amp; type) <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[u].val&lt;x &amp;&amp; !type) <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">        u=t[u].ch[type];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t[u].ch[type^<span class=\"number\">1</span>])u=t[u].ch[type^<span class=\"number\">1</span>];</span><br><span class=\"line\">        splay(u,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Delete</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> prev=Next(x,<span class=\"number\">0</span>),succ=Next(x,<span class=\"number\">1</span>);</span><br><span class=\"line\">        splay(prev,<span class=\"number\">0</span>);splay(succ,prev);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=t[succ].ch[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[u].cnt&gt;<span class=\"number\">1</span>)&#123;--t[u].cnt;splay(u,<span class=\"number\">0</span>);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> t[succ].ch[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=root;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[u].size&lt;k) <span class=\"keyword\">return</span> inf;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">19260817</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> s=t[t[u].ch[<span class=\"number\">0</span>]].size;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s+t[u].cnt&lt;k)</span><br><span class=\"line\">                k-=s+t[u].cnt,u=t[u].ch[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k&lt;=s)</span><br><span class=\"line\">                u=t[u].ch[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;splay(u,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> t[u].val;&#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;T;</span><br></pre></td></tr></table></figure>\n<h3 id=\"权值线段树\"><a href=\"#权值线段树\" class=\"headerlink\" title=\"权值线段树\"></a>权值线段树</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> l=<span class=\"number\">1</span>,<span class=\"keyword\">int</span> r=n,<span class=\"keyword\">int</span> o=<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ++sumv[o];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=m) insert(x,ls);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> insert(x,rs);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> l=<span class=\"number\">1</span>,<span class=\"keyword\">int</span> r=n,<span class=\"keyword\">int</span> o=<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    --sumv[o];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=m) remove(x,ls);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> remove(x,rs);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> l=<span class=\"number\">1</span>,<span class=\"keyword\">int</span> r=n,<span class=\"keyword\">int</span> o=<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span> sumv[o];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=m) <span class=\"keyword\">return</span> count(x,ls);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> count(x,rs);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> l=<span class=\"number\">1</span>,<span class=\"keyword\">int</span> r=n,<span class=\"keyword\">int</span> o=<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=m) <span class=\"keyword\">return</span> rank(x,ls);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> rank(x,rs)+sumv[o&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> l=<span class=\"number\">1</span>,<span class=\"keyword\">int</span> r=n,<span class=\"keyword\">int</span> o=<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k&lt;=sumv[o&lt;&lt;<span class=\"number\">1</span>]) <span class=\"keyword\">return</span> kth(k,ls);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> kth(k-sumv[o&lt;&lt;<span class=\"number\">1</span>],rs);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">prec</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kth(rank(x)<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">succ</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kth(rank(x)+count(x));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">get_rnk</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lower_bound(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>,i)-b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"树套树\"><a href=\"#树套树\" class=\"headerlink\" title=\"树套树\"></a>树套树</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v,s,r,cnt;</span><br><span class=\"line\">    Node* ch[<span class=\"number\">2</span>];</span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> s=<span class=\"number\">1</span>):s(s),cnt(s),r(rand()*rand()),v(v)&#123;ch[<span class=\"number\">0</span>]=ch[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">        s=cnt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[<span class=\"number\">0</span>]) s+=ch[<span class=\"number\">0</span>]-&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[<span class=\"number\">1</span>]) s+=ch[<span class=\"number\">1</span>]-&gt;s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v==x?<span class=\"number\">-1</span>:v&lt;x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Treap</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"keyword\">int</span> __prec,__succ;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        Treap():__prec(<span class=\"number\">0</span>),__succ(<span class=\"number\">0</span>),root(<span class=\"number\">0</span>)&#123;&#125;</span><br><span class=\"line\">        Node *root;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(Node* &amp;o,<span class=\"keyword\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">            Node *k=o-&gt;ch[d^<span class=\"number\">1</span>];</span><br><span class=\"line\">            o-&gt;ch[d^<span class=\"number\">1</span>]=k-&gt;ch[d];</span><br><span class=\"line\">            k-&gt;ch[d]=o;</span><br><span class=\"line\">            o-&gt;pushup();</span><br><span class=\"line\">            k-&gt;pushup();</span><br><span class=\"line\">            o=k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _insert(Node* &amp;o,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> t=<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o)&#123;o=<span class=\"keyword\">new</span> Node(x,t);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d=o-&gt;cmp(x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d==<span class=\"number\">-1</span>) &#123;o-&gt;cnt+=t;o-&gt;s+=t;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">            _insert(o-&gt;ch[d],x,t);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;ch[d]-&gt;r &gt; o-&gt;r) rotate(o,d^<span class=\"number\">1</span>);</span><br><span class=\"line\">            o-&gt;pushup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>)</span></span>&#123;_insert(root,x,k);&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _remove(Node* &amp;o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d=o-&gt;cmp(x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d==<span class=\"number\">-1</span>) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (o-&gt;cnt&gt;<span class=\"number\">1</span>) &#123;--o-&gt;cnt;--o-&gt;s;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!(o-&gt;ch[<span class=\"number\">0</span>]))&#123;Node* k=o;o=o-&gt;ch[<span class=\"number\">1</span>];<span class=\"keyword\">delete</span> k;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!(o-&gt;ch[<span class=\"number\">1</span>]))&#123;Node* k=o;o=o-&gt;ch[<span class=\"number\">0</span>];<span class=\"keyword\">delete</span> k;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> d2=(o-&gt;ch[<span class=\"number\">0</span>]-&gt;r &gt; o-&gt;ch[<span class=\"number\">1</span>]-&gt;r);</span><br><span class=\"line\">                    rotate(o,d2);</span><br><span class=\"line\">                    _remove(o-&gt;ch[d2],x);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> _remove(o-&gt;ch[d],x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o) o-&gt;pushup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;_remove(root,x);&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> _kth(Node* o,<span class=\"keyword\">int</span> k)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o || k&lt;=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> INT_MIN;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> s=o-&gt;ch[<span class=\"number\">0</span>]?o-&gt;ch[<span class=\"number\">0</span>]-&gt;s:<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k&gt;=s+<span class=\"number\">1</span> &amp;&amp; k&lt;=s+o-&gt;cnt) <span class=\"keyword\">return</span> o-&gt;v;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k&lt;=s) <span class=\"keyword\">return</span> _kth(o-&gt;ch[<span class=\"number\">0</span>],k);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _kth(o-&gt;ch[<span class=\"number\">1</span>],k-s-o-&gt;cnt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;<span class=\"keyword\">return</span> _kth(root,k);&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> _rank(Node* o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> s=o-&gt;ch[<span class=\"number\">0</span>]?o-&gt;ch[<span class=\"number\">0</span>]-&gt;s:<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v==x) <span class=\"keyword\">return</span> s+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&lt;x) <span class=\"keyword\">return</span> s+o-&gt;cnt+_rank(o-&gt;ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _rank(o-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> _rank(root,x);&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> _count(Node* o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d=o-&gt;cmp(x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (~d) <span class=\"keyword\">return</span> _count(o-&gt;ch[d],x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o-&gt;cnt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> _count(root,x);&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _prec(Node* o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&lt;x) __prec=max(__prec,o-&gt;v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&gt;=x) _prec(o-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> _prec(o-&gt;ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _succ(Node* o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&gt;x) __succ=min(__succ,o-&gt;v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&lt;=x) _succ(o-&gt;ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> _succ(o-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">prec</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;__prec=INT_MIN+<span class=\"number\">1</span>;_prec(root,x);<span class=\"keyword\">return</span> __prec;&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">succ</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;__succ=INT_MAX  ;_succ(root,x);<span class=\"keyword\">return</span> __succ;&#125;</span><br><span class=\"line\">&#125;tree[maxn&lt;&lt;<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert_tree</span><span class=\"params\">(Treap&amp; t,Node* rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    t.insert(rt-&gt;v,rt-&gt;cnt);</span><br><span class=\"line\">    insert_tree(t,rt-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    insert_tree(t,rt-&gt;ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    insert_tree(tree[o],tree[o&lt;&lt;<span class=\"number\">1</span>].root);</span><br><span class=\"line\">    insert_tree(tree[o],tree[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) &#123;tree[o].insert(a[l]);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    build(ls);</span><br><span class=\"line\">    build(rs);</span><br><span class=\"line\">    pushup(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r) <span class=\"keyword\">return</span> tree[o].rank(k);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) tot+=rank(L,R,k,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt; m) tot+=rank(L,R,k,rs);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m &amp;&amp; R&gt;m) --tot;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r) <span class=\"keyword\">return</span> tree[o].count(x);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) tot+=count(L,R,x,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt; m) tot+=count(L,R,x,rs);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> p,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tree[o].remove(a[p]);</span><br><span class=\"line\">    tree[o].insert(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p&lt;=m) update(p,x,ls);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> update(p,x,rs);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">prec</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r) <span class=\"keyword\">return</span> tree[o].prec(x);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>,ans=INT_MIN+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) ans=prec(L,R,x,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt;m)  ans=max(ans,prec(L,R,x,rs));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">succ</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r) <span class=\"keyword\">return</span> tree[o].succ(x);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>,ans=INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) ans=succ(L,R,x,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt; m) ans=min(ans,succ(L,R,x,rs));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">1</span>,r=tree[<span class=\"number\">1</span>].root-&gt;s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l&lt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t=tree[<span class=\"number\">1</span>].kth(m);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> K=rank(L,R,t,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt=count(L,R,t,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (K==k &amp;&amp; !cnt) <span class=\"keyword\">return</span> succ(L,R,t,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (K+cnt<span class=\"number\">-1</span>&gt;=k &amp;&amp; K&lt;=k &amp;&amp; cnt) <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cnt)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (K+cnt<span class=\"number\">-1</span>&lt;k) l=m+<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> r=m<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (K&lt;k) l=m+<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> r=m<span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> INT_MAX;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"DSU-ON-TREE（CF600E）\"><a href=\"#DSU-ON-TREE（CF600E）\" class=\"headerlink\" title=\"DSU ON TREE（CF600E）\"></a>DSU ON TREE（CF600E）</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e5</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\">ll ans[maxn],tot;</span><br><span class=\"line\"><span class=\"keyword\">int</span> head[maxn],_cnt,n,mx;</span><br><span class=\"line\"><span class=\"keyword\">int</span> fa[maxn],siz[maxn],son[maxn],cnt[maxn],col[maxn],isson[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,next;</span><br><span class=\"line\">&#125;edge[maxn&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;<span class=\"keyword\">return</span> a&lt;b?b:a;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++_cnt].next=head[u];</span><br><span class=\"line\">    edge[_cnt].to=v;</span><br><span class=\"line\">    head[u]=_cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> f)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fa[u]=f;</span><br><span class=\"line\">    siz[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxs=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=f)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dfs(v,u);siz[u]+=siz[v];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (siz[v]&gt;maxs) maxs=siz[v],son[u]=v;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (son[u]) isson[son[u]]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AddAns</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> Son)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((cnt[col[u]]+=x)&gt;mx) mx=cnt[col[u]],tot=col[u];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cnt[col[u]]==mx) tot+=(ll)col[u];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=fa[u] &amp;&amp; v!=Son) AddAns(v,x,Son);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> f,<span class=\"keyword\">int</span> keep)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=f &amp;&amp; v!=son[u]) solve(v,u,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (son[u]) solve(son[u],u,<span class=\"number\">1</span>);</span><br><span class=\"line\">    AddAns(u,<span class=\"number\">1</span>,son[u]);</span><br><span class=\"line\">    ans[u]=tot;</span><br><span class=\"line\">    <span class=\"comment\">// int t=0;</span></span><br><span class=\"line\">    <span class=\"comment\">// for (int i=1;i&lt;=n;++i) t=max(t,cnt[i]);</span></span><br><span class=\"line\">    <span class=\"comment\">// for (int i=1;i&lt;=n;++i) if (cnt[i]==t) ans[u]=ans[u]+(ll)i;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!keep) AddAns(u,<span class=\"number\">-1</span>,<span class=\"number\">0</span>),mx=tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,col+i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,u,v;i&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;u,&amp;v);</span><br><span class=\"line\">        add(u,v);add(v,u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs(<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    solve(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld \"</span>,ans[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"珂朵莉树\"><a href=\"#珂朵莉树\" class=\"headerlink\" title=\"珂朵莉树\"></a>珂朵莉树</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l,r;</span><br><span class=\"line\">    <span class=\"keyword\">mutable</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r=<span class=\"number\">-1</span>,<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>):l(l),r(r),x(x)&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"keyword\">const</span> Node &amp;nd) <span class=\"keyword\">const</span> &#123;<span class=\"keyword\">return</span> l&lt;nd.l;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">set</span>&lt;Node&gt;::iterator It;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cmp</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">const</span> It&amp; a,<span class=\"keyword\">const</span> It&amp; b)</span> <span class=\"keyword\">const</span> </span>&#123;<span class=\"keyword\">return</span> a-&gt;x&lt;b-&gt;x;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> seed,n,m,vmax;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;Node&gt; s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; a,<span class=\"keyword\">int</span>&amp; b)</span></span>&#123;a^=b^=a^=b;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Rand</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret=seed;</span><br><span class=\"line\">    seed=((ll)seed*<span class=\"number\">7</span>+<span class=\"number\">13</span>)%<span class=\"number\">1000000007</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        s.insert(Node(i,i,a[i]));</span><br><span class=\"line\">    s.insert(Node(n+<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">pow_mod</span><span class=\"params\">(ll a,ll b,ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">1</span>%p;a%=p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=ans*a%p;</span><br><span class=\"line\">        a=a*a%p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> It <span class=\"title\">split</span><span class=\"params\">(<span class=\"keyword\">int</span> pos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    It it=s.lower_bound(Node(pos)); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it!=s.end() &amp;&amp; it-&gt;l==pos) <span class=\"keyword\">return</span> it;</span><br><span class=\"line\">    --it;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=it-&gt;l,r=it-&gt;r,v=it-&gt;x;</span><br><span class=\"line\">    s.erase(it);</span><br><span class=\"line\">    s.insert(Node(l,pos<span class=\"number\">-1</span>,v));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.insert(Node(pos,r,v)).first;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">assign</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    It it2=split(r+<span class=\"number\">1</span>),it1=split(l);</span><br><span class=\"line\">    s.erase(it1,it2);</span><br><span class=\"line\">    s.insert(Node(l,r,x));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    It it2=split(r+<span class=\"number\">1</span>),it1=split(l);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (It i=it1;i!=it2;++i) i-&gt;x+=x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;It&gt; v;</span><br><span class=\"line\">    It it2=split(r+<span class=\"number\">1</span>),it1=split(l);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (It i=it1;i!=it2;++i) v.push_back(i);</span><br><span class=\"line\">    sort(v.begin(),v.end(),Cmp());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;v.size();++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// assert(v[i]-&gt;r&gt;=v[i]-&gt;l);//Assertion Failed...Fixed....</span></span><br><span class=\"line\">        x-=v[i]-&gt;r-v[i]-&gt;l+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x&lt;=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> v[i]-&gt;x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    It it2=split(r+<span class=\"number\">1</span>),it1=split(l);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (It it=it1;it!=it2;++it) ans=((ll)ans+(ll)pow_mod(it-&gt;x,x,p)*(it-&gt;r-it-&gt;l+<span class=\"number\">1</span>)%p)%p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h1><p>2019.2.16</p>\n<ul>\n<li>修复珂朵莉树代码中的错误</li>\n<li>FFT板子更新为预处理单位复根的版本(多项式基本操作请移步多项式算法总结qwq)</li>\n</ul>\n<p>2019.2.17</p>\n<ul>\n<li>新增NTT板子</li>\n</ul>","more":"<p>2019.2.25</p>\n<ul>\n<li>新增替罪羊树板子</li>\n</ul>\n<p>2019.3.6</p>\n<ul>\n<li>新增K-D Tree(2-D Tree) -&gt; [简单题AC代码]</li>\n<li>更新高消板子</li>\n<li>更新LCT板子</li>\n</ul>\n<p>2019.3.31</p>\n<ul>\n<li>新增Miller-Rabin素数判断</li>\n<li>新增Pollard-Rho大数分解</li>\n</ul>\n<p>2019.4.4</p>\n<ul>\n<li>新增SAM板子</li>\n</ul>\n<p>2019.4.22</p>\n<ul>\n<li>新增二维凸包</li>\n<li>新增笛卡尔树</li>\n<li>新增Manacher</li>\n</ul>\n<p>2019.4.26</p>\n<ul>\n<li>新增毒瘤圆方树</li>\n</ul>\n<p>2019.4.27</p>\n<ul>\n<li>新增广义圆方树</li>\n</ul>\n<h1 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h1><h2 id=\"线性筛\"><a href=\"#线性筛\" class=\"headerlink\" title=\"线性筛\"></a>线性筛</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">sieve</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!v[i]) &#123;v[i]=i;prime[++cnt]=i;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=cnt;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (prime[j]&gt;v[i] || i*prime[j]&gt;n) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            v[i*prime[j]]=prime[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=cnt;++i)</span><br><span class=\"line\">        isprime[prime[i]]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"高斯消元\"><a href=\"#高斯消元\" class=\"headerlink\" title=\"高斯消元\"></a>高斯消元</h2><blockquote>\n<p>模板题【SDOI2006】异或方程组<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">fabs</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::swap;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e3</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> eps=<span class=\"number\">1e-6</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Gauss_Elimination</span><span class=\"params\">(<span class=\"keyword\">double</span> (*A)[maxn],<span class=\"keyword\">double</span>* f,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,c=<span class=\"number\">1</span>,j;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=c;j&lt;=n &amp;&amp; <span class=\"built_in\">fabs</span>(A[j][i])&lt;eps;++j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j==n+<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>;k&lt;=n+<span class=\"number\">1</span>;++k) swap(A[c][k],A[j][k]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=c+<span class=\"number\">1</span>;j&lt;=n;++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[j][i])&gt;eps) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">double</span> t=A[j][i]/A[c][i];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=i;k&lt;=n+<span class=\"number\">1</span>;++k)</span><br><span class=\"line\">                    A[j][k]-=t*A[c][k];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ++c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> NoAnswer=<span class=\"literal\">false</span>,InfAnswer=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n;i;--i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> NoVariables=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=i;j&lt;=n;++j)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[i][j])&gt;eps) NoVariables=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (NoVariables)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fabs</span>(A[i][n+<span class=\"number\">1</span>])&gt;eps) NoAnswer=<span class=\"literal\">true</span>; <span class=\"comment\">// 0=C,C!=0,无解</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> InfAnswer=<span class=\"literal\">true</span>; <span class=\"comment\">// 0=0,无穷多组解</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>;j&lt;=n;++j) A[i][n+<span class=\"number\">1</span>]-=A[i][j]*f[j];</span><br><span class=\"line\">            f[i]=A[i][n+<span class=\"number\">1</span>]/A[i][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (NoAnswer) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; <span class=\"comment\">// 无解返回-1.. </span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !InfAnswer; <span class=\"comment\">//无穷多解返回0，有唯一解返回1.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> A[maxn][maxn],f[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;j&lt;=n+<span class=\"number\">1</span>;++j)</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;A[i][j]);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result=Gauss_Elimination(A,f,n);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result^<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,result)&amp;<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) <span class=\"built_in\">printf</span>(<span class=\"string\">\"x%d=%.2lf\\n\"</span>,i,f[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"三分\"><a href=\"#三分\" class=\"headerlink\" title=\"三分\"></a>三分</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">F</span><span class=\"params\">(<span class=\"keyword\">double</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> f=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n;~i;--i)</span><br><span class=\"line\">        f=f*x+a[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> l,r;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%lf%lf\"</span>,&amp;n,&amp;l,&amp;r);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n;~i;--i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,a+i);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l+eps&lt;r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> m1=l+(r-l)/<span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> m2=r-(r-l)/<span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (F(m1)&gt;F(m2)) r=m2;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> l=m1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.5lf\"</span>,l);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"矩阵快速幂\"><a href=\"#矩阵快速幂\" class=\"headerlink\" title=\"矩阵快速幂\"></a>矩阵快速幂</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Matrix <span class=\"keyword\">operator</span>^ (ll k)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">Matrix <span class=\"title\">ans</span><span class=\"params\">(n,m)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        ans.a[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    Matrix t=*<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;k;k&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k&amp;<span class=\"number\">1</span>) ans=ans*t;</span><br><span class=\"line\">        t=t*t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"乘法逆元\"><a href=\"#乘法逆元\" class=\"headerlink\" title=\"乘法逆元\"></a>乘法逆元</h2><h3 id=\"线性递推\"><a href=\"#线性递推\" class=\"headerlink\" title=\"线性递推\"></a>线性递推</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inv[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">inv[i]=(p-p/i)*inv[p%i]%p;</span><br></pre></td></tr></table></figure>\n<h3 id=\"阶乘逆元\"><a href=\"#阶乘逆元\" class=\"headerlink\" title=\"阶乘逆元\"></a>阶乘逆元</h3><p>$\\text{inv}(i)=\\text{inv}(i+1) \\times(i+1)$</p>\n<h2 id=\"有理数取模\"><a href=\"#有理数取模\" class=\"headerlink\" title=\"有理数取模\"></a>有理数取模</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">pow</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> mod)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">1l</span>l;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=ans*a%mod;</span><br><span class=\"line\">        a=(ll)a*a%mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!<span class=\"built_in\">isdigit</span>(ch=getchar()));</span><br><span class=\"line\">    ll x=ch<span class=\"number\">-48</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">isdigit</span>(ch=getchar()))</span><br><span class=\"line\">        x=(x*<span class=\"number\">10</span>+ch<span class=\"number\">-48</span>)%mod;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll a,b;</span><br><span class=\"line\">    a=read();b=read();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!b) <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">\"Angry!\"</span>),<span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\"</span>,(ll)a*<span class=\"built_in\">pow</span>(b,mod<span class=\"number\">-2</span>,mod)%mod);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Miller-Rabin\"><a href=\"#Miller-Rabin\" class=\"headerlink\" title=\"Miller-Rabin\"></a>Miller-Rabin</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> pr[]=&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">11</span>,<span class=\"number\">13</span>,<span class=\"number\">17</span>,<span class=\"number\">19</span>,<span class=\"number\">23</span>,<span class=\"number\">29</span>,<span class=\"number\">31</span>,<span class=\"number\">37</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">qpow</span><span class=\"params\">(ll a,ll b,ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">1</span>%p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=ans*a%p;</span><br><span class=\"line\">        a=a*a%p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">miller_rabin</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">12</span>;++i) <span class=\"keyword\">if</span> (n==pr[i]) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(n<span class=\"number\">-1</span>),k=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!(m&amp;<span class=\"number\">1</span>)) m&gt;&gt;=<span class=\"number\">1</span>,++k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">12</span> &amp;&amp; pr[i]&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ll x=qpow(pr[i],m,n),y=x;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t=<span class=\"number\">0</span>;t&lt;k;++t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x=x*x%n;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x==<span class=\"number\">1</span> &amp;&amp; y!=<span class=\"number\">1</span> &amp;&amp; y!=n<span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            y=x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x!=<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Pollard-Rho\"><a href=\"#Pollard-Rho\" class=\"headerlink\" title=\"Pollard-Rho\"></a>Pollard-Rho</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;random&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;chrono&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">abs</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"function\">mt19937_64 <span class=\"title\">Rnd</span><span class=\"params\">(<span class=\"built_in\">std</span>::chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ull;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> pr[]=&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">11</span>,<span class=\"number\">13</span>,<span class=\"number\">17</span>,<span class=\"number\">19</span>,<span class=\"number\">23</span>,<span class=\"number\">29</span>,<span class=\"number\">31</span>,<span class=\"number\">37</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">gcd</span><span class=\"params\">(ll a,ll b)</span></span>&#123;<span class=\"keyword\">return</span> b==<span class=\"number\">0</span>?a:gcd(b,a%b);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">rnd</span><span class=\"params\">(ll x)</span></span>&#123;<span class=\"keyword\">return</span> (ll)(Rnd()%x+<span class=\"number\">1</span>);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">quick_pow</span><span class=\"params\">(ll a,ll b,ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">1</span>%p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=ans*a%p;</span><br><span class=\"line\">        a=a*a%p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">slow_mul</span><span class=\"params\">(ull a,ll b,ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ull ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=(ull)(ans+a);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans&gt;=p) ans-=p;</span><br><span class=\"line\">        a=(ull)(a+a)%p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a&gt;=p) a-=p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">miller_rabin</span><span class=\"params\">(ll n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">12</span>;++i) <span class=\"keyword\">if</span> (n==pr[i]) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n%<span class=\"number\">2</span>==<span class=\"number\">0</span> || n%<span class=\"number\">3</span>==<span class=\"number\">0</span> || n%<span class=\"number\">5</span>==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    ll m=(n<span class=\"number\">-1</span>),k=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!(m&amp;<span class=\"number\">1</span>)) m&gt;&gt;=<span class=\"number\">1</span>,++k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">12</span> &amp;&amp; pr[i]&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ll x=quick_pow(pr[i],m,n),y=x;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t=<span class=\"number\">0</span>;t&lt;k;++t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x=slow_mul(x,x,n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x==<span class=\"number\">1</span> &amp;&amp; y!=<span class=\"number\">1</span> &amp;&amp; y!=n<span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            y=x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x!=<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> f(x) ((slow_mul(x,x,n)+c)%n)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">rho</span><span class=\"params\">(ll n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(n&amp;<span class=\"number\">1</span>)) <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n%<span class=\"number\">3</span>==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    ll x=<span class=\"number\">0</span>,y=<span class=\"number\">0</span>,t=<span class=\"number\">1</span>,c=rnd(n<span class=\"number\">-1</span>),q=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">2</span>;;k&lt;&lt;=<span class=\"number\">1</span>,y=x,q=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;k;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            x=f(x);</span><br><span class=\"line\">            q=slow_mul(q,<span class=\"built_in\">abs</span>(x-y),n);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(i&amp;<span class=\"number\">0x7f</span>))</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((t=gcd(q,n))&gt;<span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t&gt;<span class=\"number\">1</span> || (t=gcd(q,n))&gt;<span class=\"number\">1</span>) <span class=\"keyword\">break</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ll max_p;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">solve</span><span class=\"params\">(ll n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (miller_rabin(n)) <span class=\"keyword\">return</span> max_p=n&gt;max_p?n:max_p; </span><br><span class=\"line\">    ll t=n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t==n) t=rho(n);</span><br><span class=\"line\">    solve(n/t);solve(t);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    freopen(<span class=\"string\">\"pol.in\"</span>,<span class=\"string\">\"r\"</span>,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">    freopen(<span class=\"string\">\"pol.out\"</span>,<span class=\"string\">\"w\"</span>,<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ll x;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,&amp;x);max_p=<span class=\"number\">0</span>;</span><br><span class=\"line\">        ll ret=solve(x);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ret==x) <span class=\"built_in\">puts</span>(<span class=\"string\">\"Prime\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,ret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">\"%d\"</span>,clock());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"FFT\"><a href=\"#FFT\" class=\"headerlink\" title=\"FFT\"></a>FFT</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">double</span> Pi=<span class=\"built_in\">acos</span>(<span class=\"number\">-1.0</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">2e6</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> q[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> limit=<span class=\"number\">1</span>,rev[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Complex</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> real,imag;</span><br><span class=\"line\">    Complex(<span class=\"keyword\">double</span> real,<span class=\"keyword\">double</span> imag):real(real),imag(imag)&#123;&#125;</span><br><span class=\"line\">    Complex()&#123;&#125;</span><br><span class=\"line\">    <span class=\"function\">Complex <span class=\"title\">conj</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;w[maxn],winv[maxn],A[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> Complex Complex::conj()&#123;<span class=\"keyword\">return</span> Complex(real,-imag);&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Complex <span class=\"keyword\">operator</span>+(<span class=\"keyword\">const</span> Complex&amp; a,<span class=\"keyword\">const</span> Complex&amp; b)&#123;<span class=\"keyword\">return</span> Complex(a.real+b.real,a.imag+b.imag);&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Complex <span class=\"keyword\">operator</span>-(<span class=\"keyword\">const</span> Complex&amp; a,<span class=\"keyword\">const</span> Complex&amp; b)&#123;<span class=\"keyword\">return</span> Complex(a.real-b.real,a.imag-b.imag);&#125;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> Complex <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> Complex&amp; a,<span class=\"keyword\">const</span> Complex&amp; b)&#123;<span class=\"keyword\">return</span> Complex(a.real*b.real-a.imag*b.imag,a.real*b.imag+a.imag*b.real);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(T&amp; a,T&amp; b)</span></span>&#123;T t=a;a=b;b=t;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(Complex* A,Complex* w,<span class=\"keyword\">int</span> limit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;rev[i]) swap(A[i],A[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> mid=<span class=\"number\">1</span>;mid&lt;limit;mid&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> R=mid&lt;&lt;<span class=\"number\">1</span>,j=<span class=\"number\">0</span>;j&lt;limit;j+=R)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;mid;++k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Complex x=A[j+k],y=w[limit/mid/<span class=\"number\">2</span>*k]*A[j+mid+k];</span><br><span class=\"line\">                A[j+k]=x+y;</span><br><span class=\"line\">                A[j+mid+k]=x-y;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">prework</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (limit&lt;=(n&lt;&lt;<span class=\"number\">1</span>)+<span class=\"number\">1</span>) limit&lt;&lt;=<span class=\"number\">1</span>,++l;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        rev[i]=(rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i) </span><br><span class=\"line\">        w[i]=Complex(<span class=\"built_in\">cos</span>(Pi*<span class=\"number\">2</span>/limit*i),<span class=\"built_in\">sin</span>(Pi*<span class=\"number\">2</span>/limit*i)),winv[i]=w[i].conj();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;A[i].real);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=m;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;A[i].imag);</span><br><span class=\"line\">    prework(n&gt;=m?n:m);</span><br><span class=\"line\">    DFT(A,w,limit);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        A[i]=A[i]*A[i];</span><br><span class=\"line\">    DFT(A,winv,limit);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=n+m;++i)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,(<span class=\"keyword\">int</span>)(A[i].imag/<span class=\"number\">2</span>/limit+<span class=\"number\">0.1</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"NTT\"><a href=\"#NTT\" class=\"headerlink\" title=\"NTT\"></a>NTT</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">qpow</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">1</span>%p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>,a=(ll)a*a%p)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=(ll)ans*a%p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">prework</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (limit&lt;=(n+m+<span class=\"number\">1</span>)) limit&lt;&lt;=<span class=\"number\">1</span>,++l;</span><br><span class=\"line\">    w[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;w[<span class=\"number\">1</span>]=qpow(g,(P<span class=\"number\">-1</span>)/limit,P),winv[<span class=\"number\">0</span>]=<span class=\"number\">1</span>,winv[<span class=\"number\">1</span>]=qpow(w[<span class=\"number\">1</span>],P<span class=\"number\">-2</span>,P);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;limit;++i)</span><br><span class=\"line\">        w[i]=(ll)w[i<span class=\"number\">-1</span>]*w[<span class=\"number\">1</span>]%P,winv[i]=<span class=\"number\">1l</span>l*winv[i<span class=\"number\">-1</span>]*winv[<span class=\"number\">1</span>]%P;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;limit;++i)</span><br><span class=\"line\">        rev[i]=(rev[i&gt;&gt;<span class=\"number\">1</span>]&gt;&gt;<span class=\"number\">1</span>)|((i&amp;<span class=\"number\">1</span>)&lt;&lt;(l<span class=\"number\">-1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">NTT</span><span class=\"params\">(<span class=\"keyword\">int</span> *A,<span class=\"keyword\">int</span> *w,<span class=\"keyword\">int</span> limit)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;limit;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;rev[i]) swap(A[i],A[rev[i]]);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> mid=<span class=\"number\">1</span>;mid&lt;limit;mid&lt;&lt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> R=mid&lt;&lt;<span class=\"number\">1</span>,j=<span class=\"number\">0</span>;j&lt;limit;j+=R)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;mid;++k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x=A[j+k],y=(ll)A[j+k+mid]*w[limit/<span class=\"number\">2</span>/mid*k]%P;</span><br><span class=\"line\">                A[j+k]=(x+y)%P;A[j+mid+k]=(x-y+P)%P;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">DFT</span><span class=\"params\">(<span class=\"keyword\">int</span> *A)</span></span>&#123; NTT(A,w,limit); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">IDFT</span><span class=\"params\">(<span class=\"keyword\">int</span> *A)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    NTT(A,winv,limit);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> inv=qpow(limit,P<span class=\"number\">-2</span>,P);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=limit;++i)</span><br><span class=\"line\">        A[i]=((ll)A[i]*inv)%P;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"计算几何\"><a href=\"#计算几何\" class=\"headerlink\" title=\"计算几何\"></a>计算几何</h1><h2 id=\"二维凸包\"><a href=\"#二维凸包\" class=\"headerlink\" title=\"二维凸包\"></a>二维凸包</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::sort;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">sqrt</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e5</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> x,y;</span><br><span class=\"line\">    Point(<span class=\"keyword\">double</span> x,<span class=\"keyword\">double</span> y):x(x),y(y)&#123;&#125;</span><br><span class=\"line\">    Point()&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"keyword\">const</span> Point&amp; p) <span class=\"keyword\">const</span>&#123;<span class=\"keyword\">return</span> x==p.x?y&lt;p.y:x&lt;p.x;&#125;</span><br><span class=\"line\">    Point <span class=\"keyword\">operator</span>- (<span class=\"keyword\">const</span> Point&amp; p)&#123;<span class=\"keyword\">return</span> Point(x-p.x,y-p.y);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> <span class=\"keyword\">operator</span>* (<span class=\"keyword\">const</span> Point&amp; p)&#123;<span class=\"keyword\">return</span> x*p.x+y*p.y;&#125;</span><br><span class=\"line\">&#125;p[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> Point Vector;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">dis</span><span class=\"params\">(<span class=\"keyword\">const</span> Point&amp; a,<span class=\"keyword\">const</span> Point&amp; b)</span></span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">double</span> <span class=\"title\">cross</span><span class=\"params\">(<span class=\"keyword\">const</span> Vector&amp; a,<span class=\"keyword\">const</span> Vector&amp; b)</span></span>&#123;<span class=\"keyword\">return</span> a.x*b.y-b.x*a.y;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf%lf\"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class=\"line\">    sort(p+<span class=\"number\">1</span>,p+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"built_in\">stack</span>[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> top=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>[++top]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> used[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (top&gt;<span class=\"number\">1</span> &amp;&amp; cross(p[<span class=\"built_in\">stack</span>[top]]-p[<span class=\"built_in\">stack</span>[top<span class=\"number\">-1</span>]],p[i]-p[<span class=\"built_in\">stack</span>[top]])&lt;=<span class=\"number\">0</span>) used[<span class=\"built_in\">stack</span>[top--]]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>[++top]=i;</span><br><span class=\"line\">        used[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> prec=top;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n;i;--i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!used[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (top&gt;prec &amp;&amp; cross(p[<span class=\"built_in\">stack</span>[top]]-p[<span class=\"built_in\">stack</span>[top<span class=\"number\">-1</span>]],p[i]-p[<span class=\"built_in\">stack</span>[top]])&lt;=<span class=\"number\">0</span>) used[<span class=\"built_in\">stack</span>[top--]]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"built_in\">stack</span>[++top]=i;</span><br><span class=\"line\">            used[i]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=top;++i)</span><br><span class=\"line\">        ans+=dis(p[<span class=\"built_in\">stack</span>[i]],p[<span class=\"built_in\">stack</span>[i<span class=\"number\">-1</span>]]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%.2lf\"</span>,ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h1><h2 id=\"Manacher\"><a href=\"#Manacher\" class=\"headerlink\" title=\"Manacher\"></a>Manacher</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">3e7</span>+<span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> buf[maxn],s[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">min</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?a:b;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">max</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?b:a;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">manacher</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxright=<span class=\"number\">0</span>,mid=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;maxright) f[i]=min(f[(mid&lt;&lt;<span class=\"number\">1</span>)-i],f[mid]+mid-i);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> f[i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (s[i+f[i]]==s[i-f[i]]) ++f[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i+f[i]&gt;maxright) maxright=i+f[i],mid=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,buf);</span><br><span class=\"line\">    n=<span class=\"built_in\">strlen</span>(buf);</span><br><span class=\"line\">    s[<span class=\"number\">0</span>]=s[<span class=\"number\">1</span>]=<span class=\"string\">'@'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">        s[(i&lt;&lt;<span class=\"number\">1</span>)+<span class=\"number\">2</span>]=buf[i],s[(i&lt;&lt;<span class=\"number\">1</span>)+<span class=\"number\">3</span>]=<span class=\"string\">'@'</span>;</span><br><span class=\"line\">    n=n*<span class=\"number\">2</span>+<span class=\"number\">2</span>;s[n]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    manacher(n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">        ans=max(ans,f[i]);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>,ans<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"制胡窜哈希\"><a href=\"#制胡窜哈希\" class=\"headerlink\" title=\"制胡窜哈希\"></a>制胡窜哈希</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">hs1</span><span class=\"params\">(<span class=\"keyword\">char</span>* s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    pw1[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;hsh1[<span class=\"number\">0</span>]=s[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pw1[i]=(ll)pw1[i<span class=\"number\">-1</span>]*seed%mod1;</span><br><span class=\"line\">        hsh1[i]=((ll)hsh1[i<span class=\"number\">-1</span>]*seed+s[i])%mod1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">hs2</span><span class=\"params\">(<span class=\"keyword\">char</span>* s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    pw2[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;hsh2[<span class=\"number\">0</span>]=s[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pw2[i]=(ll)pw2[i<span class=\"number\">-1</span>]*seed%mod2;</span><br><span class=\"line\">        hsh2[i]=((ll)hsh2[i<span class=\"number\">-1</span>]*seed+s[i])%mod2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt; gethash(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t1=((hsh1[r]-(ll)hsh1[l<span class=\"number\">-1</span>]*pw1[r-l+<span class=\"number\">1</span>]%mod1)+mod1)%mod1;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t2=((hsh2[r]-(ll)hsh2[l<span class=\"number\">-1</span>]*pw2[r-l+<span class=\"number\">1</span>]%mod2)+mod2)%mod2;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> make_pair(t1,t2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">getfail</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,j;i&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        j=f[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &amp;&amp; P[j]!=P[i]) j=f[j];</span><br><span class=\"line\">        f[i+<span class=\"number\">1</span>]=P[i]==P[j]?j+<span class=\"number\">1</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">kmp</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &amp;&amp; T[i]!=P[j]) j=f[j];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (T[i]==P[j]) ++j;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j==m) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,i-m+<span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"AC自动机\"><a href=\"#AC自动机\" class=\"headerlink\" title=\"AC自动机\"></a>AC自动机</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=<span class=\"built_in\">strlen</span>(s),u=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c=idx(s[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ch[u][c]) ch[u][c]=++cnt;</span><br><span class=\"line\">        u=ch[u][c];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++tag[u];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getfail</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[<span class=\"number\">0</span>][i]) q.push(ch[<span class=\"number\">0</span>][i]);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=q.front();q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">26</span>;++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> c=ch[u][i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!c) &#123;ch[u][i]=ch[f[u]][i];<span class=\"keyword\">continue</span>;&#125;</span><br><span class=\"line\">            q.push(c);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v=f[u];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (v &amp;&amp; !ch[v][i]) v=f[v];</span><br><span class=\"line\">            f[c]=ch[v][i];</span><br><span class=\"line\">            last[c]=tag[f[c]]?f[c]:last[f[c]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=<span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=<span class=\"number\">0</span>,ret=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        x=ch[x][idx(s[i])];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=x;j;j=last[j])</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(!vis[j])vis[j]=<span class=\"number\">1</span>,ret+=tag[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"SA\"><a href=\"#SA\" class=\"headerlink\" title=\"SA\"></a>SA</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">build_sa</span><span class=\"params\">(<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *x=t1,*y=t2;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;++i) c[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) c[x[i]=s[i]]++;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;m;++i) c[i]+=c[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n<span class=\"number\">-1</span>;~i;--i) sa[--c[x[i]]]=i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>,p=<span class=\"number\">1</span>;k&lt;=n &amp;&amp; p&lt;n;k&lt;&lt;=<span class=\"number\">1</span>,m=p)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n-k;i&lt;n;++i) y[p++]=i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) <span class=\"keyword\">if</span> (sa[i]&gt;=k) y[p++]=sa[i]-k;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;m;++i) c[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) c[t3[i]=x[y[i]]]++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;m;++i) c[i]+=c[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=n<span class=\"number\">-1</span>;~i;--i) sa[--c[t3[i]]]=y[i];</span><br><span class=\"line\">        p=<span class=\"number\">1</span>;swap(x,y);x[sa[<span class=\"number\">0</span>]]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;n;++i)</span><br><span class=\"line\">            x[sa[i]]=(y[sa[i]+k]==y[sa[i<span class=\"number\">-1</span>]+k] &amp;&amp; y[sa[i]]==y[sa[i<span class=\"number\">-1</span>]])?p<span class=\"number\">-1</span>:p++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">get_height</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;=n;++i) rank[sa[i]]=i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;height[rank[i++]]=k)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (k?--k:<span class=\"number\">0</span>,j=sa[rank[i]<span class=\"number\">-1</span>];s[j+k]==s[i+k];++k);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"SAM\"><a href=\"#SAM\" class=\"headerlink\" title=\"SAM\"></a>SAM</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">2e6</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> tr[maxn][<span class=\"number\">26</span>],parent[maxn],mx[maxn],right[maxn],cnt=<span class=\"number\">1</span>,last=<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">radixsort</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> c[maxn],id[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=cnt;++i) ++c[mx[i]];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) c[i]+=c[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=cnt;i;--i) id[--c[mx[i]]]=i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=cnt<span class=\"number\">-1</span>;~i;--i) right[parent[id[i]]]+=right[id[i]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p=last,np=last=++cnt;</span><br><span class=\"line\">    right[np]=<span class=\"number\">1</span>;mx[np]=mx[p]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p &amp;&amp; !tr[p][x]) tr[p][x]=np,p=parent[p];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!p) parent[np]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> q=tr[p][x];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mx[q]==mx[p]+<span class=\"number\">1</span>) parent[np]=q;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nq=++cnt;</span><br><span class=\"line\">            mx[nq]=mx[p]+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">memcpy</span>(tr[nq],tr[q],<span class=\"keyword\">sizeof</span>(tr[q]));</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p &amp;&amp; tr[p][x]==q) tr[p][x]=nq,p=parent[p];</span><br><span class=\"line\">            parent[nq]=parent[q];parent[q]=parent[np]=nq;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> s[maxn];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,s);</span><br><span class=\"line\">    n=<span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) insert(s[i]-<span class=\"string\">'a'</span>);</span><br><span class=\"line\">    radixsort(n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=cnt;++i) <span class=\"keyword\">if</span> (right[i]&gt;<span class=\"number\">1</span> &amp;&amp; right[i]*mx[i]&gt;ans) ans=right[i]*mx[i]; </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"图论\"><a href=\"#图论\" class=\"headerlink\" title=\"图论\"></a>图论</h1><h2 id=\"广义圆方树-APIO2018-铁人两项\"><a href=\"#广义圆方树-APIO2018-铁人两项\" class=\"headerlink\" title=\"广义圆方树(APIO2018 铁人两项)\"></a>广义圆方树(APIO2018 铁人两项)</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">2e6</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; G[maxn],T[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dfn[maxn],low[maxn],dfc,tot,cnt,val[maxn],siz[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">max</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?b:a;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">min</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?a:b;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">void</span> <span class=\"title\">swap</span>(<span class=\"title\">T</span>&amp; <span class=\"title\">a</span>,<span class=\"title\">T</span>&amp; <span class=\"title\">b</span>)&#123;</span>a^=b^=a^=b;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> ff)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"built_in\">stack</span>[maxn],top=<span class=\"number\">0</span>;</span><br><span class=\"line\">    dfn[u]=low[u]=++dfc;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>[++top]=u;</span><br><span class=\"line\">    ++cnt;val[u]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> v:G[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v==ff) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tarjan(v,u);</span><br><span class=\"line\">            low[u]=min(low[u],low[v]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (low[v]&gt;=dfn[u])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ++tot;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">                <span class=\"keyword\">do</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    x=<span class=\"built_in\">stack</span>[top--];</span><br><span class=\"line\">                    ++val[tot];</span><br><span class=\"line\">                    T[x].push_back(tot);</span><br><span class=\"line\">                    T[tot].push_back(x);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">while</span> (x!=v);</span><br><span class=\"line\">                T[u].push_back(tot);</span><br><span class=\"line\">                T[tot].push_back(u);</span><br><span class=\"line\">                ++val[tot];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> int64_t <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> ff,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int64_t</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    siz[u]=(u&lt;=N);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> v:T[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v==ff) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        ans+=calc(v,u,n,N);</span><br><span class=\"line\">        ans+=(<span class=\"keyword\">int64_t</span>)siz[u]*siz[v]*val[u];</span><br><span class=\"line\">        siz[u]+=siz[v];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans+=(<span class=\"keyword\">int64_t</span>)siz[u]*(n-siz[u])*val[u];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    tot=n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,u,v;i&lt;=m;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;u,&amp;v),G[u].push_back(v),G[v].push_back(u);</span><br><span class=\"line\">    <span class=\"keyword\">int64_t</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cnt=<span class=\"number\">0</span>;</span><br><span class=\"line\">            tarjan(i,<span class=\"number\">0</span>);</span><br><span class=\"line\">            ans+=calc(i,<span class=\"number\">0</span>,cnt,n);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,ans*<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"静态仙人掌（圆方树）\"><a href=\"#静态仙人掌（圆方树）\" class=\"headerlink\" title=\"静态仙人掌（圆方树）\"></a>静态仙人掌（圆方树）</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">3e4</span>+<span class=\"number\">1200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> to,next,w;</span><br><span class=\"line\">    &#125;edge[maxn&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> head[maxn],cnt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _add(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> w)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        edge[++cnt].next=head[u];</span><br><span class=\"line\">        edge[cnt].to=v;</span><br><span class=\"line\">        edge[cnt].w=w;</span><br><span class=\"line\">        head[u]=cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> w)</span></span>&#123;_add(u,v,w);_add(v,u,w);&#125;</span><br><span class=\"line\">&#125;G,T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> dfn[maxn],low[maxn],tot,dfc;</span><br><span class=\"line\"><span class=\"keyword\">int</span> fa[maxn],val[maxn],sum[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">min</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?a:b;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">T</span> <span class=\"title\">max</span>(<span class=\"title\">T</span> <span class=\"title\">a</span>,<span class=\"title\">T</span> <span class=\"title\">b</span>)&#123;</span><span class=\"keyword\">return</span> a&lt;b?b:a;&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;<span class=\"title\">inline</span> <span class=\"title\">void</span> <span class=\"title\">swap</span>(<span class=\"title\">T</span> &amp;<span class=\"title\">a</span>,<span class=\"title\">T</span> &amp;<span class=\"title\">b</span>)&#123;</span>a^=b^=a^=b;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ++tot;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> s=w;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x=v;x!=fa[u];x=fa[x])</span><br><span class=\"line\">        sum[x]=s,s+=val[x];</span><br><span class=\"line\">    sum[tot]=sum[u];</span><br><span class=\"line\">    sum[u]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x=v;x!=fa[u];x=fa[x])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sp=min(sum[x],sum[tot]-sum[x]);</span><br><span class=\"line\">        T.add(x,tot,sp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> ff)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dfn[u]=low[u]=++dfc;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=G.head[u];i;i=G.edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=G.edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v==ff) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fa[v]=u;</span><br><span class=\"line\">            val[v]=G.edge[i].w;</span><br><span class=\"line\">            tarjan(v,u);</span><br><span class=\"line\">            low[u]=min(low[u],low[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (low[v]&lt;=dfn[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        T.add(u,v,G.edge[i].w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=G.head[u];i;i=G.edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=G.edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fa[v]!=u &amp;&amp; dfn[v]&gt;dfn[u])</span><br><span class=\"line\">            build(u,v,G.edge[i].w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> depth[maxn],siz[maxn],top[maxn],son[maxn],dis[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> ff,<span class=\"keyword\">int</span> dep,<span class=\"keyword\">int</span> di)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    depth[u]=dep;</span><br><span class=\"line\">    dis[u]=di;</span><br><span class=\"line\">    fa[u]=ff;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxs=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    siz[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=T.head[u];i;i=T.edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=T.edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=ff)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dfs(v,u,dep+<span class=\"number\">1</span>,di+T.edge[i].w);</span><br><span class=\"line\">            siz[u]+=siz[v];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (siz[v]&gt;maxs) maxs=siz[v],son[u]=v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> topf)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    top[u]=topf;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!son[u]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    dfs(son[u],topf);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=T.head[u];i;i=T.edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=T.edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=fa[u] &amp;&amp; v!=son[u])</span><br><span class=\"line\">            dfs(v,v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (top[u]!=top[v])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth[top[u]]&lt;depth[top[v]]) swap(u,v);</span><br><span class=\"line\">        u=fa[top[u]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> depth[u]&gt;depth[v]?v:u;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> lca)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res=son[lca];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (top[u]!=top[lca])</span><br><span class=\"line\">        res=top[u],u=fa[top[u]];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u==lca?res:son[lca];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lca=LCA(u,v);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lca&lt;=n) <span class=\"keyword\">return</span> dis[u]+dis[v]<span class=\"number\">-2</span>*dis[lca];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x=find(u,lca),y=find(v,lca);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=dis[u]+dis[v]-dis[x]-dis[y];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum[x]&lt;sum[y]) swap(x,y);</span><br><span class=\"line\">    ans+=min(sum[x]-sum[y],sum[lca]-sum[x]+sum[y]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m,q;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;n,&amp;m,&amp;q);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,u,v,w;i&lt;=m;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;u,&amp;v,&amp;w),G.add(u,v,w);</span><br><span class=\"line\">    tot=n;</span><br><span class=\"line\">    tarjan(<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    dfs(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    dfs(<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,u,v;i&lt;=q;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;u,&amp;v);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,query(u,v,n));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Kruskal\"><a href=\"#Kruskal\" class=\"headerlink\" title=\"Kruskal\"></a>Kruskal</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u,v,w;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"keyword\">const</span> Edge&amp; e) <span class=\"keyword\">const</span> &#123;<span class=\"keyword\">return</span> w&lt;e.w;&#125;</span><br><span class=\"line\">&#125;edge[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> fa[maxn],cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> x==fa[x]?x:fa[x]=find(fa[x]);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">kruskal</span><span class=\"params\">(<span class=\"keyword\">int</span> m)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::sort(edge+<span class=\"number\">1</span>,edge+m+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=edge[i].u,v=edge[i].v,w=edge[i].w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (find(u)!=find(v))</span><br><span class=\"line\">            ++cnt,fa[find(u)]=find(v),ans+=w;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"LCA\"><a href=\"#LCA\" class=\"headerlink\" title=\"LCA\"></a>LCA</h2><h3 id=\"树剖\"><a href=\"#树剖\" class=\"headerlink\" title=\"树剖\"></a>树剖</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> f,<span class=\"keyword\">int</span> dep)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    depth[u]=dep;</span><br><span class=\"line\">    fa[u]=f;</span><br><span class=\"line\">    siz[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxs=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=f) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dfs(v,u,dep+<span class=\"number\">1</span>);</span><br><span class=\"line\">            siz[u]+=siz[v];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (siz[v]&gt;=maxs) maxs=siz[v],son[u]=v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> topf)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    top[u]=topf;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!son[u]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    dfs(son[u],topf);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=fa[u] &amp;&amp; v!=son[u]) dfs(v,v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (top[u]!=top[v])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth[top[u]]&lt;depth[top[v]]) swap(u,v);</span><br><span class=\"line\">        u=fa[top[u]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (depth[u]&gt;depth[v]) swap(u,v);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"倍增\"><a href=\"#倍增\" class=\"headerlink\" title=\"倍增\"></a>倍增</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> fa,<span class=\"keyword\">int</span> dep)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    f[u][<span class=\"number\">0</span>]=fa;</span><br><span class=\"line\">    depth[u]=dep;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;(<span class=\"number\">1</span>&lt;&lt;i)&lt;=n;++i)</span><br><span class=\"line\">        f[u][i]=f[f[u][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=fa) dfs(v,u,dep+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (depth[u]&lt;depth[v]) swap(u,v);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=depth[u]-depth[v];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;(<span class=\"number\">1</span>&lt;&lt;i)&lt;=l;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l&amp;(<span class=\"number\">1</span>&lt;&lt;i)) u=f[u][i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u==v) <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">22</span>;i&gt;=<span class=\"number\">0</span>;--i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f[u][i]!=f[v][i]) </span><br><span class=\"line\">            u=f[u][i],v=f[v][i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f[u][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"DFS序转RMQ\"><a href=\"#DFS序转RMQ\" class=\"headerlink\" title=\"DFS序转RMQ\"></a>DFS序转RMQ</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Min</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;<span class=\"keyword\">return</span> depth[x]&lt;depth[y]?x:y;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> f,<span class=\"keyword\">int</span> dep)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fa[u]=f;</span><br><span class=\"line\">    dfn[++tot]=u;</span><br><span class=\"line\">    pre[u]=tot;</span><br><span class=\"line\">    depth[tot]=dep;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=f)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dfs(v,u,dep+<span class=\"number\">1</span>);</span><br><span class=\"line\">            dfn[++tot]=u;</span><br><span class=\"line\">            depth[tot]=dep;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rmq_init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=tot;++i) st[i][<span class=\"number\">0</span>]=i; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;(<span class=\"number\">1</span>&lt;&lt;j)&lt;=tot;++j)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i+(<span class=\"number\">1</span>&lt;&lt;j)<span class=\"number\">-1</span>&lt;=tot;++i)</span><br><span class=\"line\">            st[i][j]=Min(st[i][j<span class=\"number\">-1</span>],st[i+(<span class=\"number\">1</span>&lt;&lt;(j<span class=\"number\">-1</span>))][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rmq</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((<span class=\"number\">1</span>&lt;&lt;(k+<span class=\"number\">1</span>))&lt;=R-L+<span class=\"number\">1</span>) ++k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Min(st[L][k],st[R-(<span class=\"number\">1</span>&lt;&lt;k)+<span class=\"number\">1</span>][k]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    x=pre[x];y=pre[y];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&gt;y) swap(x,y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dfn[rmq(x,y)];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Tarjan\"><a href=\"#Tarjan\" class=\"headerlink\" title=\"Tarjan\"></a>Tarjan</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123; <span class=\"keyword\">return</span> x==fa[x]?x:fa[x]=find(fa[x]);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> f)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fa[u]=u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=f) dfs(v,u),fa[v]=u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=query_head[u];~i;i=query[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=query[i].v;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[v]) query[i].ans=query[i^<span class=\"number\">1</span>].ans=find(v);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    vis[u]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"单源最短路径\"><a href=\"#单源最短路径\" class=\"headerlink\" title=\"单源最短路径\"></a>单源最短路径</h2><blockquote>\n<p>Dijkstra</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> s)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(d,<span class=\"number\">0x3f</span>,<span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::priority_queue&lt;Node&gt; q;</span><br><span class=\"line\">    d[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    q.push(Node(s,<span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=q.top().u,di=q.top().dis;q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (di!=d[u]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d[v]&gt;d[u]+edge[i].w)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                d[v]=d[u]+edge[i].w;</span><br><span class=\"line\">                q.push(Node(v,d[v]));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>SPFA</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">spfa</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    d[s]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    vis[s]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=q.front(); q.pop();vis[u]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edges[i].next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Edge&amp; e=edges[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d[e.to]&gt;d[u]+e.w)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                d[e.to]=d[u]+e.w;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[e.to]) q.push(e.to),vis[e.to]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"网络流\"><a href=\"#网络流\" class=\"headerlink\" title=\"网络流\"></a>网络流</h2><blockquote>\n<p>Dinic最大流</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(depth,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(depth));</span><br><span class=\"line\">    depth[s]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=q.front();q.pop();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];~i;i=edge[i].next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!depth[v] &amp;&amp; edge[i].w&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">                depth[v]=depth[u]+<span class=\"number\">1</span>,q.push(v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> depth[t]&gt;<span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> flow)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u==t) <span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> &amp;i=cur[u];~i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth[v]==depth[u]+<span class=\"number\">1</span> &amp;&amp; edge[i].w&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d=dfs(v,min(flow,edge[i].w));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                edge[i].w-=d;</span><br><span class=\"line\">                edge[i^<span class=\"number\">1</span>].w+=d;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dinic</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (bfs())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(cur,head,<span class=\"keyword\">sizeof</span>(cur));</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">int</span> d=dfs(s,INF)) ans+=d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Edmonds-Karp费用流</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">spfa</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> vis[maxn];</span><br><span class=\"line\">    <span class=\"built_in\">queue</span>&lt;<span class=\"keyword\">int</span>&gt; q;</span><br><span class=\"line\">    q.push(s);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(vis,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(vis));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(d,<span class=\"number\">0x3f</span>,<span class=\"keyword\">sizeof</span>(d));</span><br><span class=\"line\">    d[s]=<span class=\"number\">0</span>;vis[s]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.empty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=q.front();q.pop();</span><br><span class=\"line\">        vis[u]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];~i;i=edge[i].next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (edge[i].flow&gt;<span class=\"number\">0</span> &amp;&amp; d[v]&gt;d[u]+edge[i].cost)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                d[v]=d[u]+edge[i].cost;</span><br><span class=\"line\">                incf[v]=edge[i].flow;</span><br><span class=\"line\">                inedge[v]=i;</span><br><span class=\"line\">                pre[v]=u;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!vis[v]) vis[v]=<span class=\"literal\">true</span>,q.push(v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d[t]&lt;inf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">mcmf</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flow=<span class=\"number\">0</span>,cost=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (spfa())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=t,mn=inf;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=t;i!=s;i=pre[i])</span><br><span class=\"line\">            mn=min(mn,incf[i]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=t;i!=s;i=pre[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            edge[inedge[i]].flow-=mn;</span><br><span class=\"line\">            edge[inedge[i]^<span class=\"number\">1</span>].flow+=mn;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cost+=d[t]*mn;</span><br><span class=\"line\">        flow+=mn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\"</span>,flow,cost);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"割点\"><a href=\"#割点\" class=\"headerlink\" title=\"割点\"></a>割点</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> chd=<span class=\"number\">0</span>;</span><br><span class=\"line\">    dfn[u]=low[u]=++idx;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tarjan(v,rt);</span><br><span class=\"line\">            low[u]=min(low[u],low[v]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (low[v]&gt;=dfn[u])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ++chd;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (chd&gt;<span class=\"number\">1</span> || u!=rt)</span><br><span class=\"line\">                    iscut[u]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> low[u]=min(low[u],dfn[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tarjan缩点\"><a href=\"#Tarjan缩点\" class=\"headerlink\" title=\"Tarjan缩点\"></a>Tarjan缩点</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> head[maxn],cnt;</span><br><span class=\"line\">    Edge edge[maxm];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">        edge[++cnt].next=head[u];</span><br><span class=\"line\">        edge[cnt].to=v;</span><br><span class=\"line\">        head[u]=cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;old,dag;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dfn[u]=low[u]=++idx;</span><br><span class=\"line\">    stk[++top]=u;</span><br><span class=\"line\">    instack[u]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=old.head[u];i;i=old.edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=old.edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tarjan(v);</span><br><span class=\"line\">            low[u]=min(low[u],low[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (instack[v]) low[u]=min(low[u],dfn[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dfn[u]==low[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v;</span><br><span class=\"line\">        ++scc_cnt;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            v=stk[top--];</span><br><span class=\"line\">            belong[v]=scc_cnt;</span><br><span class=\"line\">            w[scc_cnt]+=val[v];</span><br><span class=\"line\">            instack[v]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span> (v!=u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rebuild</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u=<span class=\"number\">1</span>;u&lt;=n;++u)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=old.head[u];i;i=old.edge[i].next)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (belong[u]!=belong[old.edge[i].to])</span><br><span class=\"line\">                dag.add(belong[u],belong[old.edge[i].to]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">work</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[i]) tarjan(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-SAT\"><a href=\"#2-SAT\" class=\"headerlink\" title=\"2-SAT\"></a>2-SAT</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dfn[u]=low[u]=++idx;</span><br><span class=\"line\">    instack[u]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">    stk[++top]=u;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (instack[v]) low[u]=min(low[u],dfn[v]);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!dfn[v])</span><br><span class=\"line\">                tarjan(v),low[u]=min(low[u],low[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dfn[u]==low[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v;++scc_cnt;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            v=stk[top--];</span><br><span class=\"line\">            belong[v]=scc_cnt;</span><br><span class=\"line\">            instack[v]=<span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">while</span> (v!=u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">twosat</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n&lt;&lt;<span class=\"number\">1</span>;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[i]) tarjan(i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (belong[i]==belong[i+n]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h2 id=\"ST表\"><a href=\"#ST表\" class=\"headerlink\" title=\"ST表\"></a>ST表</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">prework</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (rint j=<span class=\"number\">1</span>;(<span class=\"number\">1</span>&lt;&lt;j)&lt;=n;++j)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (rint i=<span class=\"number\">1</span>;(i+(<span class=\"number\">1</span>&lt;&lt;j)<span class=\"number\">-1</span>)&lt;=n;++i)</span><br><span class=\"line\">            d[i][j]=max(d[i][j<span class=\"number\">-1</span>],d[i+(<span class=\"number\">1</span>&lt;&lt;(j<span class=\"number\">-1</span>))][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> j)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k=<span class=\"number\">0</span>,len=j-i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>&lt;&lt;(k+<span class=\"number\">1</span>)&lt;=len)++k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(d[i][k],d[j-(<span class=\"number\">1</span>&lt;&lt;k)+<span class=\"number\">1</span>][k]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"线段树2\"><a href=\"#线段树2\" class=\"headerlink\" title=\"线段树2\"></a>线段树2</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    mul[o]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lld\"</span>,sumv+o);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    build(ls);build(rs);</span><br><span class=\"line\">    pushup(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    sumv[o&lt;&lt;<span class=\"number\">1</span>]=(sumv[o&lt;&lt;<span class=\"number\">1</span>]*mul[o]+addv[o]*(len-(len&gt;&gt;<span class=\"number\">1</span>)))%p;</span><br><span class=\"line\">    sumv[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]=(sumv[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]*mul[o]+addv[o]*(len&gt;&gt;<span class=\"number\">1</span>))%p;</span><br><span class=\"line\">    mul[o&lt;&lt;<span class=\"number\">1</span>]=mul[o&lt;&lt;<span class=\"number\">1</span>]*mul[o]%p;</span><br><span class=\"line\">    mul[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]=mul[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]*mul[o]%p;</span><br><span class=\"line\">    addv[o&lt;&lt;<span class=\"number\">1</span>]=(addv[o&lt;&lt;<span class=\"number\">1</span>]*mul[o]+addv[o])%p;</span><br><span class=\"line\">    addv[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]=(addv[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]*mul[o]+addv[o])%p;</span><br><span class=\"line\">    addv[o]=<span class=\"number\">0</span>;mul[o]=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">multiplicate</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> c,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mul[o]=mul[o]*c%p;</span><br><span class=\"line\">        addv[o]=addv[o]*c%p;</span><br><span class=\"line\">        sumv[o]=sumv[o]*c%p;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pushdown(o,r-l+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) multiplicate(L,R,c,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt;m)  multiplicate(L,R,c,rs);</span><br><span class=\"line\">    pushup(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> c,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        addv[o]=(addv[o]+c)%p;</span><br><span class=\"line\">        sumv[o]=(sumv[o]+c*(r-l+<span class=\"number\">1</span>))%p;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pushdown(o,r-l+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) add(L,R,c,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt;m)  add(L,R,c,rs);</span><br><span class=\"line\">    pushup(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">Querysum</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r) <span class=\"keyword\">return</span> sumv[o]%p;</span><br><span class=\"line\">    pushdown(o,r-l+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) tot=(tot+Querysum(L,R,ls))%p;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt;m)  tot=(tot+Querysum(L,R,rs))%p;</span><br><span class=\"line\">    pushup(o);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"左偏树\"><a href=\"#左偏树\" class=\"headerlink\" title=\"左偏树\"></a>左偏树</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!x || !y) <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val[x]&gt;val[y] || (val[x]==val[y] &amp;&amp; x&gt;y))</span><br><span class=\"line\">        swap(x,y);</span><br><span class=\"line\">    rs(x)=merge(rs(x),y);</span><br><span class=\"line\">    fa[rs(x)]=x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dis[rs(x)]&gt;dis[ls(x)]) swap(ls(x),rs(x));</span><br><span class=\"line\">    dis[x]=dis[rs(x)]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">findroot</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fa[x]) x=fa[x];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret=val[x];</span><br><span class=\"line\">    fa[ls(x)]=fa[rs(x)]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    val[x]=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    merge(ls(x),rs(x));</span><br><span class=\"line\">    ls(x)=rs(x)=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"主席树\"><a href=\"#主席树\" class=\"headerlink\" title=\"主席树\"></a>主席树</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> &amp;rt,<span class=\"keyword\">int</span> oldrt,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    rt=++num;</span><br><span class=\"line\">    tree[rt]=tree[oldrt];</span><br><span class=\"line\">    ++tree[rt].sumv;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=m) insert(x,tree[rt].ls,tree[oldrt].ls,l,m);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> insert(x,tree[rt].rs,tree[oldrt].rs,m+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> lrt,<span class=\"keyword\">int</span> rrt,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> k=tree[tree[rrt].ls].sumv-tree[tree[lrt].ls].sumv;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=k) <span class=\"keyword\">return</span> query(x,tree[lrt].ls,tree[rrt].ls,l,m);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> query(x-k,tree[lrt].rs,tree[rrt].rs,m+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"CDQ分治（三维偏序）\"><a href=\"#CDQ分治（三维偏序）\" class=\"headerlink\" title=\"CDQ分治（三维偏序）\"></a>CDQ分治（三维偏序）</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::sort;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e5</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Tuple</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a,b,c,cnt,ans;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"keyword\">const</span> Tuple&amp; Tp) <span class=\"keyword\">const</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a!=Tp.a) <span class=\"keyword\">return</span> a&lt;Tp.a;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b!=Tp.b) <span class=\"keyword\">return</span> b&lt;Tp.b;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c&lt;Tp.c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>!= (<span class=\"keyword\">const</span> Tuple&amp; Tp)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a!=Tp.a || b!=Tp.b || c!=Tp.c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;tmp[maxn],a[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">cmp</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">const</span> Tuple&amp; a,<span class=\"keyword\">const</span> Tuple&amp; b)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a.b!=b.b) <span class=\"keyword\">return</span> a.b&lt;b.b;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.c&lt;b.c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> c[maxn*<span class=\"number\">2</span>],n,k;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=x;i&lt;=k;i+=i&amp;-i) c[i]+=y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=x;i;i-=i&amp;-i) ans+=c[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    solve(l,mid);solve(mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">    sort(a+l,a+mid+<span class=\"number\">1</span>,cmp());sort(a+mid+<span class=\"number\">1</span>,a+r+<span class=\"number\">1</span>,cmp());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t1=l,t2=mid+<span class=\"number\">1</span>;t2&lt;=r;++t2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a[t1].b&lt;=a[t2].b &amp;&amp; t1&lt;=mid) update(a[t1].c,a[t1].cnt),++t1;</span><br><span class=\"line\">        a[t2].ans+=query(a[t2].c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=l;i&lt;=mid;++i) </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[i].b&lt;=a[r].b) update(a[i].c,-a[i].cnt);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"comment\">// memset(c,0,sizeof(c));</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) </span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;tmp[i].a,&amp;tmp[i].b,&amp;tmp[i].c);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::sort(tmp+<span class=\"number\">1</span>,tmp+n+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot;a[tot=<span class=\"number\">1</span>]=tmp[<span class=\"number\">1</span>];a[<span class=\"number\">1</span>].cnt=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">2</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp[i]!=tmp[i<span class=\"number\">-1</span>]) a[++tot]=tmp[i],a[tot].cnt=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> ++a[tot].cnt;</span><br><span class=\"line\">    solve(<span class=\"number\">1</span>,tot);</span><br><span class=\"line\">    <span class=\"comment\">// for (int i=1;i&lt;=tot;++i) printf(\"%d \",a[i].ans);</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ans[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=tot;++i) ans[a[i].ans+a[i].cnt<span class=\"number\">-1</span>]+=a[i].cnt;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;n;++i) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,ans[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"点分治\"><a href=\"#点分治\" class=\"headerlink\" title=\"点分治\"></a>点分治</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getroot</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> fa)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    mxsiz[u]=<span class=\"number\">0</span>;siz[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[v] || v==fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        getroot(v,u);</span><br><span class=\"line\">        siz[u]+=siz[v];</span><br><span class=\"line\">        mxsiz[u]=max(mxsiz[u],siz[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mxsiz[u]=max(mxsiz[u],S-siz[u]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mxsiz[u]&lt;mxsiz[root]) root=u;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getdis</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> fa,<span class=\"keyword\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tmp[++cnt]=d;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[v] || v==fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        getdis(v,u,d+edge[i].w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getans</span><span class=\"params\">(<span class=\"keyword\">int</span> opt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    sort(tmp+<span class=\"number\">1</span>,tmp+cnt+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u=<span class=\"number\">1</span>;u&lt;=cnt;++u)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t=<span class=\"number\">1</span>;t&lt;=m;++t)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            pair&lt;<span class=\"keyword\">int</span>*,<span class=\"keyword\">int</span>*&gt; p=equal_range(tmp+<span class=\"number\">1</span>,tmp+cnt+<span class=\"number\">1</span>,query[t]-tmp[u]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p.second!=p.first) count[t]+=opt*(p.second-p.first);</span><br><span class=\"line\">            <span class=\"comment\">// assert(p.second==p.first);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vis[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    getdis(u,cnt=<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    getans(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[v]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        getdis(v,cnt=<span class=\"number\">0</span>,edge[i].w);</span><br><span class=\"line\">        getans(<span class=\"number\">-1</span>);</span><br><span class=\"line\">        mxsiz[root=<span class=\"number\">0</span>]=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\">        S=siz[v];</span><br><span class=\"line\">        getroot(v,<span class=\"number\">0</span>);</span><br><span class=\"line\">        solve(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"笛卡尔树-Luogu-P3793\"><a href=\"#笛卡尔树-Luogu-P3793\" class=\"headerlink\" title=\"笛卡尔树(Luogu P3793)\"></a>笛卡尔树(Luogu P3793)</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"keyword\">uint64_t</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> GenHelper</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> z1,z2,z3,z4,b;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">rand_</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        b=((z1&lt;&lt;<span class=\"number\">6</span>)^z1)&gt;&gt;<span class=\"number\">13</span>;</span><br><span class=\"line\">        z1=((z1&amp;<span class=\"number\">4294967294U</span>)&lt;&lt;<span class=\"number\">18</span>)^b;</span><br><span class=\"line\">        b=((z2&lt;&lt;<span class=\"number\">2</span>)^z2)&gt;&gt;<span class=\"number\">27</span>;</span><br><span class=\"line\">        z2=((z2&amp;<span class=\"number\">4294967288U</span>)&lt;&lt;<span class=\"number\">2</span>)^b;</span><br><span class=\"line\">        b=((z3&lt;&lt;<span class=\"number\">13</span>)^z3)&gt;&gt;<span class=\"number\">21</span>;</span><br><span class=\"line\">        z3=((z3&amp;<span class=\"number\">4294967280U</span>)&lt;&lt;<span class=\"number\">7</span>)^b;</span><br><span class=\"line\">        b=((z4&lt;&lt;<span class=\"number\">3</span>)^z4)&gt;&gt;<span class=\"number\">12</span>;</span><br><span class=\"line\">        z4=((z4&amp;<span class=\"number\">4294967168U</span>)&lt;&lt;<span class=\"number\">13</span>)^b;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (z1^z2^z3^z4);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">srand</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> GenHelper;</span><br><span class=\"line\">    z1=x; </span><br><span class=\"line\">    z2=(~x)^<span class=\"number\">0x233333333</span>U; </span><br><span class=\"line\">    z3=x^<span class=\"number\">0x1234598766</span>U; </span><br><span class=\"line\">    z4=(~x)+<span class=\"number\">51</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> GenHelper;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a=rand_()&amp;<span class=\"number\">32767</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b=rand_()&amp;<span class=\"number\">32767</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a*<span class=\"number\">32768</span>+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">2e7</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF=<span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn],ls[maxn],rs[maxn],root;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"built_in\">stack</span>[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> top=<span class=\"number\">0</span>;</span><br><span class=\"line\">    a[<span class=\"number\">0</span>]=-INF;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (top &amp;&amp; a[<span class=\"built_in\">stack</span>[top]]&lt;=a[i]) ls[i]=<span class=\"built_in\">stack</span>[top--];</span><br><span class=\"line\">        rs[<span class=\"built_in\">stack</span>[top]]=i;</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>[++top]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root=<span class=\"built_in\">stack</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> uint64_t <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x=root;;x=x&lt;l?rs[x]:ls[x])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x&gt;=l &amp;&amp; x&lt;=r) <span class=\"keyword\">return</span> a[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m,s;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;n,&amp;m,&amp;s);</span><br><span class=\"line\">    srand(s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) a[i]=read();</span><br><span class=\"line\">    <span class=\"keyword\">uint64_t</span> ans=<span class=\"number\">0</span>;<span class=\"keyword\">int</span> l,r;</span><br><span class=\"line\">    init(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        l=read()%n+<span class=\"number\">1</span>;</span><br><span class=\"line\">        r=read()%n+<span class=\"number\">1</span>;</span><br><span class=\"line\">        ans+=l&gt;r?query(r,l):query(l,r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%llu\"</span>,ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"树链剖分-LOJ模板题，带换根\"><a href=\"#树链剖分-LOJ模板题，带换根\" class=\"headerlink\" title=\"树链剖分(LOJ模板题，带换根)\"></a>树链剖分(LOJ模板题，带换根)</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ls l,m,o&lt;&lt;1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rs m+1,r,o&lt;&lt;1|1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e5</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> val[maxn],top[maxn],fa[maxn],siz[maxn],son[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> f[maxn][<span class=\"number\">30</span>],depth[maxn],head[maxn],cnt,root,id[maxn],w[maxn];</span><br><span class=\"line\">ll sumv[maxn&lt;&lt;<span class=\"number\">2</span>],addv[maxn&lt;&lt;<span class=\"number\">2</span>],tot,n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,next;</span><br><span class=\"line\">&#125;edge[maxn&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _add(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    edge[++cnt].next=head[u];</span><br><span class=\"line\">    edge[cnt].to=v;</span><br><span class=\"line\">    head[u]=cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    _add(u,v);_add(v,u);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> fa,<span class=\"keyword\">int</span> dep)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    depth[u]=dep;</span><br><span class=\"line\">    ::fa[u]=fa;</span><br><span class=\"line\">    siz[u]=<span class=\"number\">1</span>;<span class=\"keyword\">int</span> maxs=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=fa)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dfs(v,u,dep+<span class=\"number\">1</span>);</span><br><span class=\"line\">            siz[u]+=siz[v];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (siz[v]&gt;maxs) son[u]=v,maxs=siz[v];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> topf)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    id[u]=++tot;</span><br><span class=\"line\">    w[tot]=val[u];</span><br><span class=\"line\">    top[u]=topf;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!son[u]) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    dfs(son[u],topf);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=fa[u] &amp;&amp; v!=son[u]) dfs(v,v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span>&#123;sumv[o]=sumv[o&lt;&lt;<span class=\"number\">1</span>]+sumv[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>];&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    addv[o&lt;&lt;<span class=\"number\">1</span>]+=addv[o];</span><br><span class=\"line\">    addv[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]+=addv[o];</span><br><span class=\"line\">    sumv[o&lt;&lt;<span class=\"number\">1</span>]+=addv[o]*(len-(len&gt;&gt;<span class=\"number\">1</span>));</span><br><span class=\"line\">    sumv[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>]+=addv[o]*(len&gt;&gt;<span class=\"number\">1</span>);</span><br><span class=\"line\">    addv[o]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) &#123;sumv[o]=w[l];<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    build(ls);build(rs);</span><br><span class=\"line\">    pushup(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> c,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        addv[o]+=c;</span><br><span class=\"line\">        sumv[o]+=c*(r-l+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pushdown(o,r-l+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) update(L,R,c,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt; m) update(L,R,c,rs);</span><br><span class=\"line\">    pushup(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r) <span class=\"keyword\">return</span> sumv[o];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    pushdown(o,r-l+<span class=\"number\">1</span>);</span><br><span class=\"line\">    ll tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) tot+=query(L,R,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt; m) tot+=query(L,R,rs);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">AddRoute</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (top[u]!=top[v])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth[top[u]]&lt;depth[top[v]]) u^=v^=u^=v;</span><br><span class=\"line\">        update(id[top[u]],id[u],k,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">        u=fa[top[u]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (depth[u]&gt;depth[v]) u^=v^=u^=v;</span><br><span class=\"line\">    update(id[u],id[v],k,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">QueryRoute</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (top[u]!=top[v])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth[top[u]]&lt;depth[top[v]]) u^=v^=u^=v;</span><br><span class=\"line\">        ans+=query(id[top[u]],id[u],<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">        u=fa[top[u]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (depth[u]&gt;depth[v]) u^=v^=u^=v;</span><br><span class=\"line\">    ans+=query(id[u],id[v],<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">lca</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (top[u]!=top[v])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth[top[u]]&lt;depth[top[v]]) u^=v^=u^=v;</span><br><span class=\"line\">        u=fa[top[u]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> depth[u]&gt;depth[v]?v:u;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">get_son</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> prec)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">20</span>;~i;--i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (depth[f[u][i]]&gt;depth[prec]) u=f[u][i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">AddSubTree</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u==root) update(<span class=\"number\">1</span>,n,k,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lca(u,root)!=u)</span><br><span class=\"line\">        update(id[u],id[u]+siz[u]<span class=\"number\">-1</span>,k,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        update(<span class=\"number\">1</span>,n,k,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=get_son(root,u);</span><br><span class=\"line\">        update(id[v],id[v]+siz[v]<span class=\"number\">-1</span>,-k,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">QuerySubTree</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u==root) <span class=\"keyword\">return</span> query(<span class=\"number\">1</span>,n,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lca(u,root)!=u)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(id[u],id[u]+siz[u]<span class=\"number\">-1</span>,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=get_son(root,u);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> query(<span class=\"number\">1</span>,n,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>)-query(id[v],id[v]+siz[v]<span class=\"number\">-1</span>,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">        <span class=\"comment\">// return query(1,n,1,n,1)-query(id[u]+1,id[u]+siz[u]-1,1,n,1);</span></span><br><span class=\"line\">        <span class=\"comment\">// // else return query(1,n,1,n,1);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">get_anc</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) f[i][<span class=\"number\">0</span>]=fa[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=<span class=\"number\">20</span>;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> u=<span class=\"number\">1</span>;u&lt;=n;++u)</span><br><span class=\"line\">            f[u][i]=f[f[u][i<span class=\"number\">-1</span>]][i<span class=\"number\">-1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// freopen(\"tree2.in\",\"r\",stdin);</span></span><br><span class=\"line\">    <span class=\"comment\">// freopen(\"tree20.out\",\"w\",stdout);</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);root=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,val+i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,tmp;i&lt;n;++i) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;tmp),add(tmp,i+<span class=\"number\">1</span>);</span><br><span class=\"line\">    dfs(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>);dfs(<span class=\"number\">1</span>,<span class=\"number\">1</span>);build(<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);get_anc();</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,opt,u,v,k;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;opt);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (opt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;root);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;u,&amp;v,&amp;k);AddRoute(u,v,k);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;u,&amp;k);AddSubTree(u,k);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>:<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;u,&amp;v);<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,QueryRoute(u,v));<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">5</span>:<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;u);<span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld\\n\"</span>,QuerySubTree(u));<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"LCT\"><a href=\"#LCT\" class=\"headerlink\" title=\"LCT\"></a>LCT</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ls(x) (ch[x][0])</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> rs(x) (ch[x][1])</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">3e5</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> val[maxn],ch[maxn][<span class=\"number\">2</span>],fa[maxn],rev[maxn],s[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a,<span class=\"keyword\">int</span> &amp;b)</span></span>&#123;a^=b^=a^=b;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">nroot</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> ls(fa[x])==x || rs(fa[x])==x;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;s[x]=s[ls(x)]^s[rs(x)]^val[x];&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushr</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    swap(ls(x),rs(x));rev[x]^=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rev[x]) pushr(ls(x)),pushr(rs(x)),rev[x]=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y=fa[x],z=fa[y],k=ch[y][<span class=\"number\">1</span>]==x;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nroot(y)) ch[z][ch[z][<span class=\"number\">1</span>]==y]=x;</span><br><span class=\"line\">    fa[x]=z;</span><br><span class=\"line\">    ch[y][k]=ch[x][k^<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch[x][k^<span class=\"number\">1</span>]) fa[ch[x][k^<span class=\"number\">1</span>]]=y;</span><br><span class=\"line\">    ch[x][k^<span class=\"number\">1</span>]=y;</span><br><span class=\"line\">    fa[y]=x;</span><br><span class=\"line\">    pushup(y);pushup(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"built_in\">stack</span>[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y=x,z=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nroot(y)) <span class=\"built_in\">stack</span>[++z]=y,y=fa[y];</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>[++z]=y;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (z) pushdown(<span class=\"built_in\">stack</span>[z--]);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nroot(x))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        y=fa[x],z=fa[y];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nroot(y)) rotate(((ls(z)==y)^(ls(y)==x))?x:y);</span><br><span class=\"line\">        rotate(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">access</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> y=<span class=\"number\">0</span>;x;y=x,x=fa[x])</span><br><span class=\"line\">        splay(x),ch[x][<span class=\"number\">1</span>]=y,pushup(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">makeroot</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    access(x);splay(x);pushr(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">findroot</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    access(x);</span><br><span class=\"line\">    splay(x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ls(x)) pushdown(x),x=ls(x);<span class=\"comment\">// 这里一定记得pushdown!</span></span><br><span class=\"line\">    splay(x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">link</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    makeroot(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (findroot(y)!=x) fa[x]=y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">cut</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    makeroot(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (findroot(y)==x &amp;&amp; fa[y]==x &amp;&amp; !ch[y][<span class=\"number\">0</span>]) ch[x][<span class=\"number\">1</span>]=fa[y]=<span class=\"number\">0</span>,pushup(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    splay(x);</span><br><span class=\"line\">    s[x]^=val[x];</span><br><span class=\"line\">    val[x]=y;</span><br><span class=\"line\">    s[x]^=val[x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">split</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    makeroot(x);access(y);splay(y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y)</span></span>&#123;split(x,y);<span class=\"keyword\">return</span> s[y];&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,m;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;n,&amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,val+i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,opt,x,y;i&lt;=m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;opt,&amp;x,&amp;y);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (opt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">0</span>:<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,query(x,y));<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:link(x,y);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:cut(x,y);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:modify(x,y);<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"K-D-Tree\"><a href=\"#K-D-Tree\" class=\"headerlink\" title=\"K-D Tree\"></a>K-D Tree</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::nth_element;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::min;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::max;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e6</span>+<span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF=<span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> x,y;</span><br><span class=\"line\">    Point()&#123;&#125;</span><br><span class=\"line\">    Point(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> y):x(x),y(y)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">KDTree</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">constexpr</span> <span class=\"keyword\">double</span> alpha=<span class=\"number\">0.75</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> root;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> val,siz,sum;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ch[<span class=\"number\">2</span>];</span><br><span class=\"line\">        Point mn,mx,now;</span><br><span class=\"line\">    &#125;t[maxn];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> top,has_rebuild,fa_rebuild,k_rebuild;</span><br><span class=\"line\">    KDTree()&#123;t[<span class=\"number\">0</span>].mn=Point(INF,INF);t[<span class=\"number\">0</span>].mx=Point(-INF,-INF);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> trash[maxn],Trash;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">isbad</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span>&#123;<span class=\"keyword\">return</span> t[t[o].ch[<span class=\"number\">0</span>]].siz&gt;t[o].siz*alpha || t[t[o].ch[<span class=\"number\">1</span>]].siz&gt;t[o].siz*alpha;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        t[o].siz=t[t[o].ch[<span class=\"number\">0</span>]].siz+t[t[o].ch[<span class=\"number\">1</span>]].siz+<span class=\"number\">1</span>;</span><br><span class=\"line\">        t[o].sum=t[t[o].ch[<span class=\"number\">0</span>]].sum+t[t[o].ch[<span class=\"number\">1</span>]].sum+t[o].val;</span><br><span class=\"line\">        t[o].mn.x=min(&#123;t[o].now.x,t[t[o].ch[<span class=\"number\">0</span>]].mn.x,t[t[o].ch[<span class=\"number\">1</span>]].mn.x&#125;);</span><br><span class=\"line\">        t[o].mn.y=min(&#123;t[o].now.y,t[t[o].ch[<span class=\"number\">0</span>]].mn.y,t[t[o].ch[<span class=\"number\">1</span>]].mn.y&#125;);</span><br><span class=\"line\">        t[o].mx.y=max(&#123;t[o].now.y,t[t[o].ch[<span class=\"number\">0</span>]].mx.y,t[t[o].ch[<span class=\"number\">1</span>]].mx.y&#125;);</span><br><span class=\"line\">        t[o].mx.x=max(&#123;t[o].now.x,t[t[o].ch[<span class=\"number\">0</span>]].mx.x,t[t[o].ch[<span class=\"number\">1</span>]].mx.x&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[o].ch[<span class=\"number\">0</span>]) dfs(t[o].ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        trash[++Trash]=o;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[o].ch[<span class=\"number\">1</span>]) dfs(t[o].ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> _rebuild(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l&gt;r) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x=trash[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l==r) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t[x].ch[<span class=\"number\">0</span>]=t[x].ch[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            t[x].mn=t[x].mx=t[x].now;</span><br><span class=\"line\">            t[x].siz=<span class=\"number\">1</span>;</span><br><span class=\"line\">            t[x].sum=t[x].val;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k==<span class=\"number\">1</span>) nth_element(trash+l,trash+mid+<span class=\"number\">1</span>,trash+r+<span class=\"number\">1</span>,[<span class=\"keyword\">this</span>](<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> x,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> y) -&gt;<span class=\"keyword\">bool</span> &#123;<span class=\"keyword\">return</span> t[x].now.x&lt;t[y].now.x;&#125;);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> nth_element(trash+l,trash+mid+<span class=\"number\">1</span>,trash+r+<span class=\"number\">1</span>,[<span class=\"keyword\">this</span>](<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> x,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> y) -&gt;<span class=\"keyword\">bool</span> &#123;<span class=\"keyword\">return</span> t[x].now.y&lt;t[y].now.y;&#125;);</span><br><span class=\"line\">        x=trash[mid];</span><br><span class=\"line\">        t[x].ch[<span class=\"number\">0</span>]=_rebuild(l,mid<span class=\"number\">-1</span>,k^<span class=\"number\">1</span>);</span><br><span class=\"line\">        t[x].ch[<span class=\"number\">1</span>]=_rebuild(mid+<span class=\"number\">1</span>,r,k^<span class=\"number\">1</span>);</span><br><span class=\"line\">        pushup(x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rebuild</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Trash=<span class=\"number\">0</span>;</span><br><span class=\"line\">        dfs(o);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Trash) <span class=\"keyword\">return</span> _rebuild(<span class=\"number\">1</span>,Trash,k);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> _insert(<span class=\"keyword\">const</span> Point&amp; p,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span>&amp; o,<span class=\"keyword\">int</span> k)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!o)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o=++top;</span><br><span class=\"line\">            t[o].sum=t[o].val=x;</span><br><span class=\"line\">            t[o].mn=t[o].mx=t[o].now=p;</span><br><span class=\"line\">            t[o].siz=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k&amp;<span class=\"number\">1</span>) _insert(p,x,t[o].ch[t[o].now.x&lt;=p.x],<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> _insert(p,x,t[o].ch[t[o].now.y&lt;=p.y],<span class=\"number\">1</span>);</span><br><span class=\"line\">        pushup(o);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isbad(t[o].ch[<span class=\"number\">0</span>])) has_rebuild=t[o].ch[<span class=\"number\">0</span>],fa_rebuild=o,k_rebuild=k^<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isbad(t[o].ch[<span class=\"number\">1</span>])) has_rebuild=t[o].ch[<span class=\"number\">1</span>],fa_rebuild=o,k_rebuild=k^<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">const</span> Point&amp; p,<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _insert(p,x,root,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isbad(root)) root=rebuild(root,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (has_rebuild) t[fa_rebuild].ch[t[fa_rebuild].ch[<span class=\"number\">1</span>]==has_rebuild]=rebuild(has_rebuild,k_rebuild);</span><br><span class=\"line\">        has_rebuild=fa_rebuild=k_rebuild=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">check_range</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">const</span> Point&amp; l,<span class=\"keyword\">const</span> Point&amp; r)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t[o].mn.x&gt;=l.x &amp;&amp; t[o].mn.y&gt;=l.y &amp;&amp; t[o].mx.x&lt;=r.x &amp;&amp; t[o].mx.y&lt;=r.y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">check_point</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">const</span> Point&amp; l,<span class=\"keyword\">const</span> Point&amp; r)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (t[o].now.x&gt;=l.x &amp;&amp; t[o].now.x&lt;=r.x) &amp;&amp; (t[o].now.y&gt;=l.y &amp;&amp; t[o].now.y&lt;=r.y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">check_have</span><span class=\"params\">(<span class=\"keyword\">int</span> o,<span class=\"keyword\">const</span> Point&amp; l,<span class=\"keyword\">const</span> Point&amp; r)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !((t[o].mx.x&lt;l.x) || (t[o].mx.y&lt;l.y) || (t[o].mn.x&gt;r.x) || (t[o].mn.y&gt;r.y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">const</span> Point&amp; l,<span class=\"keyword\">const</span> Point&amp; r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check_range(o,l,r)) <span class=\"keyword\">return</span> t[o].sum;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check_point(o,l,r)) ans+=t[o].val;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check_have(t[o].ch[<span class=\"number\">0</span>],l,r)) ans+=query(l,r,t[o].ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (check_have(t[o].ch[<span class=\"number\">1</span>],l,r)) ans+=query(l,r,t[o].ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> opt,x,lastans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    Point a,b;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;opt) &amp;&amp; opt!=<span class=\"number\">3</span> &amp;&amp; <span class=\"string\">\"STO LCH OTZ\"</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (opt==<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>,&amp;a.x,&amp;a.y,&amp;x);</span><br><span class=\"line\">            a.x^=lastans;a.y^=lastans;x^=lastans;</span><br><span class=\"line\">            T.insert(a,x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>,&amp;a.x,&amp;a.y,&amp;b.x,&amp;b.y);</span><br><span class=\"line\">            a.x^=lastans;a.y^=lastans;b.x^=lastans;b.y^=lastans;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,lastans=T.query(a,b,T.root));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"平衡树\"><a href=\"#平衡树\" class=\"headerlink\" title=\"平衡树\"></a>平衡树</h2><h3 id=\"Treap\"><a href=\"#Treap\" class=\"headerlink\" title=\"Treap\"></a>Treap</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Treap</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> v,s,r,cnt;</span><br><span class=\"line\">    \tNode* ch[<span class=\"number\">2</span>];</span><br><span class=\"line\">    \tNode(<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> s=<span class=\"number\">1</span>):s(s),cnt(s),r(rand()*rand()),v(v)&#123;ch[<span class=\"number\">0</span>]=ch[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    \t</span>&#123;</span><br><span class=\"line\">    \t\ts=cnt;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span> (ch[<span class=\"number\">0</span>]) s+=ch[<span class=\"number\">0</span>]-&gt;s;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span> (ch[<span class=\"number\">1</span>]) s+=ch[<span class=\"number\">1</span>]-&gt;s;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    \t</span>&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> v==x?<span class=\"number\">-1</span>:v&lt;x;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"keyword\">int</span> __prec,__succ;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        Treap():__prec(<span class=\"number\">0</span>),__succ(<span class=\"number\">0</span>),root(<span class=\"number\">0</span>)&#123;&#125;</span><br><span class=\"line\">        Node *root;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(Node* &amp;o,<span class=\"keyword\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">            Node *k=o-&gt;ch[d^<span class=\"number\">1</span>];</span><br><span class=\"line\">            o-&gt;ch[d^<span class=\"number\">1</span>]=k-&gt;ch[d];</span><br><span class=\"line\">            k-&gt;ch[d]=o;</span><br><span class=\"line\">            o-&gt;pushup();</span><br><span class=\"line\">            k-&gt;pushup();</span><br><span class=\"line\">            o=k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _insert(Node* &amp;o,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> t=<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o)&#123;o=<span class=\"keyword\">new</span> Node(x,t);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d=o-&gt;cmp(x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d==<span class=\"number\">-1</span>) &#123;o-&gt;cnt+=t;o-&gt;s+=t;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">            _insert(o-&gt;ch[d],x,t);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;ch[d]-&gt;r &gt; o-&gt;r) rotate(o,d^<span class=\"number\">1</span>);</span><br><span class=\"line\">            o-&gt;pushup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>)</span></span>&#123;_insert(root,x,k);&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _remove(Node* &amp;o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d=o-&gt;cmp(x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d==<span class=\"number\">-1</span>) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (o-&gt;cnt&gt;<span class=\"number\">1</span>) &#123;--o-&gt;cnt;--o-&gt;s;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!(o-&gt;ch[<span class=\"number\">0</span>]))&#123;Node* k=o;o=o-&gt;ch[<span class=\"number\">1</span>];<span class=\"keyword\">delete</span> k;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!(o-&gt;ch[<span class=\"number\">1</span>]))&#123;Node* k=o;o=o-&gt;ch[<span class=\"number\">0</span>];<span class=\"keyword\">delete</span> k;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> d2=(o-&gt;ch[<span class=\"number\">0</span>]-&gt;r &gt; o-&gt;ch[<span class=\"number\">1</span>]-&gt;r);</span><br><span class=\"line\">                    rotate(o,d2);</span><br><span class=\"line\">                    _remove(o-&gt;ch[d2],x);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> _remove(o-&gt;ch[d],x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o) o-&gt;pushup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;_remove(root,x);&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> _kth(Node* o,<span class=\"keyword\">int</span> k)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o || k&lt;=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> INT_MIN;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> s=o-&gt;ch[<span class=\"number\">0</span>]?o-&gt;ch[<span class=\"number\">0</span>]-&gt;s:<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k&gt;=s+<span class=\"number\">1</span> &amp;&amp; k&lt;=s+o-&gt;cnt) <span class=\"keyword\">return</span> o-&gt;v;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k&lt;=s) <span class=\"keyword\">return</span> _kth(o-&gt;ch[<span class=\"number\">0</span>],k);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _kth(o-&gt;ch[<span class=\"number\">1</span>],k-s-o-&gt;cnt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;<span class=\"keyword\">return</span> _kth(root,k);&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> _rank(Node* o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> s=o-&gt;ch[<span class=\"number\">0</span>]?o-&gt;ch[<span class=\"number\">0</span>]-&gt;s:<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v==x) <span class=\"keyword\">return</span> s+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&lt;x) <span class=\"keyword\">return</span> s+o-&gt;cnt+_rank(o-&gt;ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _rank(o-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> _rank(root,x);&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> _count(Node* o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d=o-&gt;cmp(x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (~d) <span class=\"keyword\">return</span> _count(o-&gt;ch[d],x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o-&gt;cnt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> _count(root,x);&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _prec(Node* o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&lt;x) __prec=max(__prec,o-&gt;v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&gt;=x) _prec(o-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> _prec(o-&gt;ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _succ(Node* o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&gt;x) __succ=min(__succ,o-&gt;v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&lt;=x) _succ(o-&gt;ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> _succ(o-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">prec</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;__prec=INT_MIN+<span class=\"number\">1</span>;_prec(root,x);<span class=\"keyword\">return</span> __prec;&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">succ</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;__succ=INT_MAX  ;_succ(root,x);<span class=\"keyword\">return</span> __succ;&#125;</span><br><span class=\"line\">&#125;T;</span><br></pre></td></tr></table></figure>\n<h3 id=\"替罪羊树\"><a href=\"#替罪羊树\" class=\"headerlink\" title=\"替罪羊树\"></a>替罪羊树</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cassert&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e5</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Scapegoat_Tree</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> root,has_rebuild,fa;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> __cplusplus &gt;= 201103L</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">constexpr</span> <span class=\"keyword\">double</span> alpha=<span class=\"number\">0.75</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span> </span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">double</span> alpha=<span class=\"number\">0.75</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> siz,cnt,val;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> deleted;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ch[<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;t[maxn];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">isbad</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> t[t[x].ch[<span class=\"number\">0</span>]].cnt&gt;t[x].cnt*alpha || t[t[x].ch[<span class=\"number\">1</span>]].cnt&gt;t[x].cnt*alpha;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">maintain</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;t[x].siz=t[t[x].ch[<span class=\"number\">0</span>]].siz+t[t[x].ch[<span class=\"number\">1</span>]].siz+!t[x].deleted;t[x].cnt=t[t[x].ch[<span class=\"number\">0</span>]].cnt+t[t[x].ch[<span class=\"number\">1</span>]].cnt+<span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pool[maxn],top;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; tmp;</span><br><span class=\"line\">    Scapegoat_Tree()&#123;<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;maxn;++i) pool[++top]=i;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[o].ch[<span class=\"number\">0</span>]) dfs(t[o].ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!t[o].deleted) tmp.push_back(o);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> pool[++top]=o;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[o].ch[<span class=\"number\">1</span>]) dfs(t[o].ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> _rebuild(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l&gt;r) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid=(l+r)&gt;&gt;<span class=\"number\">1</span>,o=tmp[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l==r) t[o].siz=t[o].cnt=<span class=\"number\">1</span>;</span><br><span class=\"line\">        t[o].ch[<span class=\"number\">0</span>]=_rebuild(l,mid<span class=\"number\">-1</span>);</span><br><span class=\"line\">        t[o].ch[<span class=\"number\">1</span>]=_rebuild(mid+<span class=\"number\">1</span>,r);</span><br><span class=\"line\">        maintain(o);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rebuild</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        tmp.clear();</span><br><span class=\"line\">        dfs(o);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> _rebuild(<span class=\"number\">0</span>,tmp.size()<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> _insert(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> &amp;o)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!o)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o=pool[top--];</span><br><span class=\"line\">            t[o].siz=t[o].cnt=<span class=\"number\">1</span>;</span><br><span class=\"line\">            t[o].val=x;</span><br><span class=\"line\">            t[o].deleted=<span class=\"literal\">false</span>;</span><br><span class=\"line\">            t[o].ch[<span class=\"number\">0</span>]=t[o].ch[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ++t[o].siz;++t[o].cnt;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> d=(t[o].val&lt;=x);</span><br><span class=\"line\">        _insert(x,t[o].ch[d]);</span><br><span class=\"line\">        <span class=\"comment\">// if (isbad(o)) o=rebuild(o);//need repair?</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isbad(t[o].ch[<span class=\"number\">0</span>])) has_rebuild=t[o].ch[<span class=\"number\">0</span>],fa=o;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isbad(t[o].ch[<span class=\"number\">1</span>])) has_rebuild=t[o].ch[<span class=\"number\">1</span>],fa=o;</span><br><span class=\"line\">        <span class=\"comment\">// maintain(o);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _insert(x,root);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (has_rebuild) t[fa].ch[t[fa].ch[<span class=\"number\">1</span>]==has_rebuild]=rebuild(has_rebuild);</span><br><span class=\"line\">        fa=has_rebuild=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> _remove_kth(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> o)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[t[o].ch[<span class=\"number\">0</span>]].siz+<span class=\"number\">1</span>==x &amp;&amp; !t[o].deleted)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            t[o].deleted=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            t[o].siz--;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        --t[o].siz;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[t[o].ch[<span class=\"number\">0</span>]].siz&gt;=x) _remove_kth(x,t[o].ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> _remove_kth(x-t[t[o].ch[<span class=\"number\">0</span>]].siz-!t[o].deleted,t[o].ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        <span class=\"comment\">// maintain(o);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">remove_kth</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        _remove_kth(x,root);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[root].cnt*alpha&gt;t[root].siz) root=rebuild(root);</span><br><span class=\"line\">        fa=has_rebuild=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> o=root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (o)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t[o].val&gt;=x) o=t[o].ch[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> ans+=t[t[o].ch[<span class=\"number\">0</span>]].siz+!t[o].deleted,o=t[o].ch[<span class=\"number\">1</span>]; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> o=root;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> s=t[t[o].ch[<span class=\"number\">0</span>]].siz;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!t[o].deleted &amp;&amp; s+<span class=\"number\">1</span>==k) <span class=\"keyword\">return</span> t[o].val;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s&gt;=k) o=t[o].ch[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> k-=s+!t[o].deleted,o=t[o].ch[<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        print(t[o].ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"comment\">// printf(\"sizls=%d sizrs=%d ,siz=%d\\n\",t[t[o].ch[0]].siz,t[t[o].ch[1]].siz,t[o].siz);</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!t[o].deleted) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,t[o].val);</span><br><span class=\"line\">        print(t[o].ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* data */</span></span><br><span class=\"line\">&#125;T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,opt,x;i&lt;=n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;opt,&amp;x);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (opt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">                T.insert(x);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">                T.remove_kth(T.rank(x));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,T.rank(x));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,T.kth(x));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,T.kth(T.rank(x)<span class=\"number\">-1</span>));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>,T.kth(T.rank(x+<span class=\"number\">1</span>)));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// T.print(T.root);putchar('\\n');</span></span><br><span class=\"line\">        <span class=\"comment\">// T.root=T.rebuild(T.root);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Splay\"><a href=\"#Splay\" class=\"headerlink\" title=\"Splay\"></a>Splay</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Splay</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> root,cnt;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">    &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> val,size,ff,ch[<span class=\"number\">2</span>],cnt;</span><br><span class=\"line\">    &#125;t[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        t[x].size=t[x].cnt+t[t[x].ch[<span class=\"number\">0</span>]].size+t[t[x].ch[<span class=\"number\">1</span>]].size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y=t[x].ff,z=t[y].ff;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k=(t[y].ch[<span class=\"number\">1</span>]==x);</span><br><span class=\"line\">        t[z].ch[t[z].ch[<span class=\"number\">1</span>]==y]=x;</span><br><span class=\"line\">        t[x].ff=z;</span><br><span class=\"line\">        t[y].ch[k]=t[x].ch[k^<span class=\"number\">1</span>];</span><br><span class=\"line\">        t[t[x].ch[k^<span class=\"number\">1</span>]].ff=y;</span><br><span class=\"line\">        t[y].ff=x;</span><br><span class=\"line\">        t[x].ch[k^<span class=\"number\">1</span>]=y;</span><br><span class=\"line\">        pushup(y);pushup(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">splay</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> goal)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t[x].ff!=goal)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> y=t[x].ff,z=t[y].ff;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (z!=goal) rotate((t[z].ch[<span class=\"number\">1</span>]==y)^(t[y].ch[<span class=\"number\">1</span>]==x)?x:y);</span><br><span class=\"line\">            rotate(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!goal) root=x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=root,ff=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t[u].val!=x &amp;&amp; u)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ff=u;</span><br><span class=\"line\">            u=t[u].ch[t[u].val&lt;x];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (u) &#123;++t[u].cnt;splay(u,<span class=\"number\">0</span>);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">        u=++cnt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ff) t[ff].ch[x&gt;t[ff].val]=u;</span><br><span class=\"line\">        t[u].ff=ff;</span><br><span class=\"line\">        t[u].ch[<span class=\"number\">0</span>]=t[u].ch[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        t[u].size=<span class=\"number\">1</span>;</span><br><span class=\"line\">        t[u].cnt=<span class=\"number\">1</span>;</span><br><span class=\"line\">        t[u].val=x;</span><br><span class=\"line\">        splay(u,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=root;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!u) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t[u].ch[t[u].val&lt;x] &amp;&amp; t[u].val!=x) u=t[u].ch[t[u].val&lt;x];</span><br><span class=\"line\">        splay(u,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Next</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> type)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        find(x);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=root;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[u].val&gt;x &amp;&amp; type) <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[u].val&lt;x &amp;&amp; !type) <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">        u=t[u].ch[type];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (t[u].ch[type^<span class=\"number\">1</span>])u=t[u].ch[type^<span class=\"number\">1</span>];</span><br><span class=\"line\">        splay(u,<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">Delete</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> prev=Next(x,<span class=\"number\">0</span>),succ=Next(x,<span class=\"number\">1</span>);</span><br><span class=\"line\">        splay(prev,<span class=\"number\">0</span>);splay(succ,prev);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=t[succ].ch[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[u].cnt&gt;<span class=\"number\">1</span>)&#123;--t[u].cnt;splay(u,<span class=\"number\">0</span>);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> t[succ].ch[<span class=\"number\">0</span>]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u=root;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t[u].size&lt;k) <span class=\"keyword\">return</span> inf;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">19260817</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> s=t[t[u].ch[<span class=\"number\">0</span>]].size;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s+t[u].cnt&lt;k)</span><br><span class=\"line\">                k-=s+t[u].cnt,u=t[u].ch[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k&lt;=s)</span><br><span class=\"line\">                u=t[u].ch[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;splay(u,<span class=\"number\">0</span>);<span class=\"keyword\">return</span> t[u].val;&#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;T;</span><br></pre></td></tr></table></figure>\n<h3 id=\"权值线段树\"><a href=\"#权值线段树\" class=\"headerlink\" title=\"权值线段树\"></a>权值线段树</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> l=<span class=\"number\">1</span>,<span class=\"keyword\">int</span> r=n,<span class=\"keyword\">int</span> o=<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ++sumv[o];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=m) insert(x,ls);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> insert(x,rs);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> l=<span class=\"number\">1</span>,<span class=\"keyword\">int</span> r=n,<span class=\"keyword\">int</span> o=<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    --sumv[o];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=m) remove(x,ls);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> remove(x,rs);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> l=<span class=\"number\">1</span>,<span class=\"keyword\">int</span> r=n,<span class=\"keyword\">int</span> o=<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span> sumv[o];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=m) <span class=\"keyword\">return</span> count(x,ls);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> count(x,rs);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> l=<span class=\"number\">1</span>,<span class=\"keyword\">int</span> r=n,<span class=\"keyword\">int</span> o=<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x&lt;=m) <span class=\"keyword\">return</span> rank(x,ls);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> rank(x,rs)+sumv[o&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> l=<span class=\"number\">1</span>,<span class=\"keyword\">int</span> r=n,<span class=\"keyword\">int</span> o=<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k&lt;=sumv[o&lt;&lt;<span class=\"number\">1</span>]) <span class=\"keyword\">return</span> kth(k,ls);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> kth(k-sumv[o&lt;&lt;<span class=\"number\">1</span>],rs);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">prec</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kth(rank(x)<span class=\"number\">-1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">succ</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> kth(rank(x)+count(x));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">get_rnk</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lower_bound(b+<span class=\"number\">1</span>,b+n+<span class=\"number\">1</span>,i)-b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"树套树\"><a href=\"#树套树\" class=\"headerlink\" title=\"树套树\"></a>树套树</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> v,s,r,cnt;</span><br><span class=\"line\">    Node* ch[<span class=\"number\">2</span>];</span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> v,<span class=\"keyword\">int</span> s=<span class=\"number\">1</span>):s(s),cnt(s),r(rand()*rand()),v(v)&#123;ch[<span class=\"number\">0</span>]=ch[<span class=\"number\">1</span>]=<span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">        s=cnt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[<span class=\"number\">0</span>]) s+=ch[<span class=\"number\">0</span>]-&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch[<span class=\"number\">1</span>]) s+=ch[<span class=\"number\">1</span>]-&gt;s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v==x?<span class=\"number\">-1</span>:v&lt;x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Treap</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        <span class=\"keyword\">int</span> __prec,__succ;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        Treap():__prec(<span class=\"number\">0</span>),__succ(<span class=\"number\">0</span>),root(<span class=\"number\">0</span>)&#123;&#125;</span><br><span class=\"line\">        Node *root;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">rotate</span><span class=\"params\">(Node* &amp;o,<span class=\"keyword\">int</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">            Node *k=o-&gt;ch[d^<span class=\"number\">1</span>];</span><br><span class=\"line\">            o-&gt;ch[d^<span class=\"number\">1</span>]=k-&gt;ch[d];</span><br><span class=\"line\">            k-&gt;ch[d]=o;</span><br><span class=\"line\">            o-&gt;pushup();</span><br><span class=\"line\">            k-&gt;pushup();</span><br><span class=\"line\">            o=k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _insert(Node* &amp;o,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> t=<span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o)&#123;o=<span class=\"keyword\">new</span> Node(x,t);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d=o-&gt;cmp(x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d==<span class=\"number\">-1</span>) &#123;o-&gt;cnt+=t;o-&gt;s+=t;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">            _insert(o-&gt;ch[d],x,t);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;ch[d]-&gt;r &gt; o-&gt;r) rotate(o,d^<span class=\"number\">1</span>);</span><br><span class=\"line\">            o-&gt;pushup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> k=<span class=\"number\">1</span>)</span></span>&#123;_insert(root,x,k);&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _remove(Node* &amp;o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d=o-&gt;cmp(x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d==<span class=\"number\">-1</span>) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (o-&gt;cnt&gt;<span class=\"number\">1</span>) &#123;--o-&gt;cnt;--o-&gt;s;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!(o-&gt;ch[<span class=\"number\">0</span>]))&#123;Node* k=o;o=o-&gt;ch[<span class=\"number\">1</span>];<span class=\"keyword\">delete</span> k;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!(o-&gt;ch[<span class=\"number\">1</span>]))&#123;Node* k=o;o=o-&gt;ch[<span class=\"number\">0</span>];<span class=\"keyword\">delete</span> k;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> d2=(o-&gt;ch[<span class=\"number\">0</span>]-&gt;r &gt; o-&gt;ch[<span class=\"number\">1</span>]-&gt;r);</span><br><span class=\"line\">                    rotate(o,d2);</span><br><span class=\"line\">                    _remove(o-&gt;ch[d2],x);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> _remove(o-&gt;ch[d],x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o) o-&gt;pushup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;_remove(root,x);&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> _kth(Node* o,<span class=\"keyword\">int</span> k)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o || k&lt;=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> INT_MIN;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> s=o-&gt;ch[<span class=\"number\">0</span>]?o-&gt;ch[<span class=\"number\">0</span>]-&gt;s:<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k&gt;=s+<span class=\"number\">1</span> &amp;&amp; k&lt;=s+o-&gt;cnt) <span class=\"keyword\">return</span> o-&gt;v;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k&lt;=s) <span class=\"keyword\">return</span> _kth(o-&gt;ch[<span class=\"number\">0</span>],k);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _kth(o-&gt;ch[<span class=\"number\">1</span>],k-s-o-&gt;cnt);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> k)</span></span>&#123;<span class=\"keyword\">return</span> _kth(root,k);&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> _rank(Node* o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> s=o-&gt;ch[<span class=\"number\">0</span>]?o-&gt;ch[<span class=\"number\">0</span>]-&gt;s:<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v==x) <span class=\"keyword\">return</span> s+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&lt;x) <span class=\"keyword\">return</span> s+o-&gt;cnt+_rank(o-&gt;ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _rank(o-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> _rank(root,x);&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> _count(Node* o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> d=o-&gt;cmp(x);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (~d) <span class=\"keyword\">return</span> _count(o-&gt;ch[d],x);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> o-&gt;cnt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;<span class=\"keyword\">return</span> _count(root,x);&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _prec(Node* o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&lt;x) __prec=max(__prec,o-&gt;v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&gt;=x) _prec(o-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> _prec(o-&gt;ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> _succ(Node* o,<span class=\"keyword\">int</span> x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!o) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&gt;x) __succ=min(__succ,o-&gt;v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o-&gt;v&lt;=x) _succ(o-&gt;ch[<span class=\"number\">1</span>],x);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> _succ(o-&gt;ch[<span class=\"number\">0</span>],x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">prec</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;__prec=INT_MIN+<span class=\"number\">1</span>;_prec(root,x);<span class=\"keyword\">return</span> __prec;&#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">succ</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;__succ=INT_MAX  ;_succ(root,x);<span class=\"keyword\">return</span> __succ;&#125;</span><br><span class=\"line\">&#125;tree[maxn&lt;&lt;<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">insert_tree</span><span class=\"params\">(Treap&amp; t,Node* rt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!rt) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    t.insert(rt-&gt;v,rt-&gt;cnt);</span><br><span class=\"line\">    insert_tree(t,rt-&gt;ch[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    insert_tree(t,rt-&gt;ch[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    insert_tree(tree[o],tree[o&lt;&lt;<span class=\"number\">1</span>].root);</span><br><span class=\"line\">    insert_tree(tree[o],tree[o&lt;&lt;<span class=\"number\">1</span>|<span class=\"number\">1</span>].root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) &#123;tree[o].insert(a[l]);<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    build(ls);</span><br><span class=\"line\">    build(rs);</span><br><span class=\"line\">    pushup(o);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">rank</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r) <span class=\"keyword\">return</span> tree[o].rank(k);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) tot+=rank(L,R,k,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt; m) tot+=rank(L,R,k,rs);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m &amp;&amp; R&gt;m) --tot;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r) <span class=\"keyword\">return</span> tree[o].count(x);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) tot+=count(L,R,x,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt; m) tot+=count(L,R,x,rs);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> p,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    tree[o].remove(a[p]);</span><br><span class=\"line\">    tree[o].insert(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l==r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p&lt;=m) update(p,x,ls);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> update(p,x,rs);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">prec</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r) <span class=\"keyword\">return</span> tree[o].prec(x);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>,ans=INT_MIN+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) ans=prec(L,R,x,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt;m)  ans=max(ans,prec(L,R,x,rs));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">succ</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> o)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=l &amp;&amp; R&gt;=r) <span class=\"keyword\">return</span> tree[o].succ(x);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>,ans=INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L&lt;=m) ans=succ(L,R,x,ls);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (R&gt; m) ans=min(ans,succ(L,R,x,rs));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> L,<span class=\"keyword\">int</span> R,<span class=\"keyword\">int</span> k,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=<span class=\"number\">1</span>,r=tree[<span class=\"number\">1</span>].root-&gt;s;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (l&lt;=r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m=(l+r)&gt;&gt;<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> t=tree[<span class=\"number\">1</span>].kth(m);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> K=rank(L,R,t,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt=count(L,R,t,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (K==k &amp;&amp; !cnt) <span class=\"keyword\">return</span> succ(L,R,t,<span class=\"number\">1</span>,n,<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (K+cnt<span class=\"number\">-1</span>&gt;=k &amp;&amp; K&lt;=k &amp;&amp; cnt) <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cnt)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (K+cnt<span class=\"number\">-1</span>&lt;k) l=m+<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> r=m<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (K&lt;k) l=m+<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> r=m<span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> INT_MAX;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"DSU-ON-TREE（CF600E）\"><a href=\"#DSU-ON-TREE（CF600E）\" class=\"headerlink\" title=\"DSU ON TREE（CF600E）\"></a>DSU ON TREE（CF600E）</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e5</span>+<span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"></span><br><span class=\"line\">ll ans[maxn],tot;</span><br><span class=\"line\"><span class=\"keyword\">int</span> head[maxn],_cnt,n,mx;</span><br><span class=\"line\"><span class=\"keyword\">int</span> fa[maxn],siz[maxn],son[maxn],cnt[maxn],col[maxn],isson[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> to,next;</span><br><span class=\"line\">&#125;edge[maxn&lt;&lt;<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;<span class=\"keyword\">return</span> a&lt;b?b:a;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++_cnt].next=head[u];</span><br><span class=\"line\">    edge[_cnt].to=v;</span><br><span class=\"line\">    head[u]=_cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> f)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fa[u]=f;</span><br><span class=\"line\">    siz[u]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxs=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=f)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dfs(v,u);siz[u]+=siz[v];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (siz[v]&gt;maxs) maxs=siz[v],son[u]=v;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (son[u]) isson[son[u]]=<span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">AddAns</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> Son)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((cnt[col[u]]+=x)&gt;mx) mx=cnt[col[u]],tot=col[u];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cnt[col[u]]==mx) tot+=(ll)col[u];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=fa[u] &amp;&amp; v!=Son) AddAns(v,x,Son);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> u,<span class=\"keyword\">int</span> f,<span class=\"keyword\">int</span> keep)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=head[u];i;i=edge[i].next)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> v=edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v!=f &amp;&amp; v!=son[u]) solve(v,u,<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (son[u]) solve(son[u],u,<span class=\"number\">1</span>);</span><br><span class=\"line\">    AddAns(u,<span class=\"number\">1</span>,son[u]);</span><br><span class=\"line\">    ans[u]=tot;</span><br><span class=\"line\">    <span class=\"comment\">// int t=0;</span></span><br><span class=\"line\">    <span class=\"comment\">// for (int i=1;i&lt;=n;++i) t=max(t,cnt[i]);</span></span><br><span class=\"line\">    <span class=\"comment\">// for (int i=1;i&lt;=n;++i) if (cnt[i]==t) ans[u]=ans[u]+(ll)i;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!keep) AddAns(u,<span class=\"number\">-1</span>,<span class=\"number\">0</span>),mx=tot=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,col+i);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>,u,v;i&lt;n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d\"</span>,&amp;u,&amp;v);</span><br><span class=\"line\">        add(u,v);add(v,u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dfs(<span class=\"number\">1</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    solve(<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i) <span class=\"built_in\">printf</span>(<span class=\"string\">\"%lld \"</span>,ans[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"珂朵莉树\"><a href=\"#珂朵莉树\" class=\"headerlink\" title=\"珂朵莉树\"></a>珂朵莉树</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> l,r;</span><br><span class=\"line\">    <span class=\"keyword\">mutable</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    Node(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r=<span class=\"number\">-1</span>,<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>):l(l),r(r),x(x)&#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"keyword\">const</span> Node &amp;nd) <span class=\"keyword\">const</span> &#123;<span class=\"keyword\">return</span> l&lt;nd.l;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ll;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">set</span>&lt;Node&gt;::iterator It;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cmp</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">operator</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">const</span> It&amp; a,<span class=\"keyword\">const</span> It&amp; b)</span> <span class=\"keyword\">const</span> </span>&#123;<span class=\"keyword\">return</span> a-&gt;x&lt;b-&gt;x;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[maxn];</span><br><span class=\"line\"><span class=\"keyword\">int</span> seed,n,m,vmax;</span><br><span class=\"line\"><span class=\"built_in\">set</span>&lt;Node&gt; s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>&amp; a,<span class=\"keyword\">int</span>&amp; b)</span></span>&#123;a^=b^=a^=b;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">Rand</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret=seed;</span><br><span class=\"line\">    seed=((ll)seed*<span class=\"number\">7</span>+<span class=\"number\">13</span>)%<span class=\"number\">1000000007</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;++i)</span><br><span class=\"line\">        s.insert(Node(i,i,a[i]));</span><br><span class=\"line\">    s.insert(Node(n+<span class=\"number\">1</span>,n+<span class=\"number\">1</span>,<span class=\"number\">0</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> ll <span class=\"title\">pow_mod</span><span class=\"params\">(ll a,ll b,ll p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">1</span>%p;a%=p;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;b;b&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b&amp;<span class=\"number\">1</span>) ans=ans*a%p;</span><br><span class=\"line\">        a=a*a%p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> It <span class=\"title\">split</span><span class=\"params\">(<span class=\"keyword\">int</span> pos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    It it=s.lower_bound(Node(pos)); </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it!=s.end() &amp;&amp; it-&gt;l==pos) <span class=\"keyword\">return</span> it;</span><br><span class=\"line\">    --it;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> l=it-&gt;l,r=it-&gt;r,v=it-&gt;x;</span><br><span class=\"line\">    s.erase(it);</span><br><span class=\"line\">    s.insert(Node(l,pos<span class=\"number\">-1</span>,v));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.insert(Node(pos,r,v)).first;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">assign</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    It it2=split(r+<span class=\"number\">1</span>),it1=split(l);</span><br><span class=\"line\">    s.erase(it1,it2);</span><br><span class=\"line\">    s.insert(Node(l,r,x));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    It it2=split(r+<span class=\"number\">1</span>),it1=split(l);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (It i=it1;i!=it2;++i) i-&gt;x+=x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">kth</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;It&gt; v;</span><br><span class=\"line\">    It it2=split(r+<span class=\"number\">1</span>),it1=split(l);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (It i=it1;i!=it2;++i) v.push_back(i);</span><br><span class=\"line\">    sort(v.begin(),v.end(),Cmp());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;v.size();++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// assert(v[i]-&gt;r&gt;=v[i]-&gt;l);//Assertion Failed...Fixed....</span></span><br><span class=\"line\">        x-=v[i]-&gt;r-v[i]-&gt;l+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x&lt;=<span class=\"number\">0</span>) <span class=\"keyword\">return</span> v[i]-&gt;x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"keyword\">int</span> l,<span class=\"keyword\">int</span> r,<span class=\"keyword\">int</span> x,<span class=\"keyword\">int</span> p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ll ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    It it2=split(r+<span class=\"number\">1</span>),it1=split(l);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (It it=it1;it!=it2;++it) ans=((ll)ans+(ll)pow_mod(it-&gt;x,x,p)*(it-&gt;r-it-&gt;l+<span class=\"number\">1</span>)%p)%p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/矩阵树定理总结/Matrix1.jpg","post":"cjv7jjm3j002xv4tygm88wsml","slug":"Matrix1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/多项式算法小结/LCHAK.jpg","post":"cjv7jjm3h002vv4tynplii5bv","slug":"LCHAK.jpg","modified":1,"renderable":1},{"_id":"source/_posts/多项式算法小结/国家集训队2016论文集.pdf","slug":"国家集训队2016论文集.pdf","post":"cjv7jjm3h002vv4tynplii5bv","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cjv7jjm1d0008v4ty000t3gs4","category_id":"cjv7jjm180004v4ty4oyh5cmk","_id":"cjv7jjm1o000fv4ty6lcle2ak"},{"post_id":"cjv7jjm100000v4tyd9toxz68","category_id":"cjv7jjm180004v4ty4oyh5cmk","_id":"cjv7jjm1w000tv4tyi6mjtug2"},{"post_id":"cjv7jjm100000v4tyd9toxz68","category_id":"cjv7jjm1r000kv4tyf239od9l","_id":"cjv7jjm1z000yv4tyqc6wajl9"},{"post_id":"cjv7jjm1f0009v4tycx1lj5ne","category_id":"cjv7jjm1u000ov4tyb38pu0dv","_id":"cjv7jjm200012v4tygov97v4q"},{"post_id":"cjv7jjm1y000xv4tyhltrl8sq","category_id":"cjv7jjm1u000ov4tyb38pu0dv","_id":"cjv7jjm230017v4ty27gbxvzw"},{"post_id":"cjv7jjm150002v4tybf8r38gh","category_id":"cjv7jjm180004v4ty4oyh5cmk","_id":"cjv7jjm25001bv4tysgagd9op"},{"post_id":"cjv7jjm150002v4tybf8r38gh","category_id":"cjv7jjm1r000kv4tyf239od9l","_id":"cjv7jjm26001dv4ty1epe5x0y"},{"post_id":"cjv7jjm1z0010v4ty1ldov5fv","category_id":"cjv7jjm180004v4ty4oyh5cmk","_id":"cjv7jjm28001fv4tyzfuahn2n"},{"post_id":"cjv7jjm1a0006v4tyzi2ogwv7","category_id":"cjv7jjm180004v4ty4oyh5cmk","_id":"cjv7jjm28001hv4tyvzg4jflv"},{"post_id":"cjv7jjm1a0006v4tyzi2ogwv7","category_id":"cjv7jjm1r000kv4tyf239od9l","_id":"cjv7jjm29001iv4ty78z4qfv2"},{"post_id":"cjv7jjm220016v4ty7voz9uw5","category_id":"cjv7jjm1u000ov4tyb38pu0dv","_id":"cjv7jjm29001kv4tyrc1d9wlk"},{"post_id":"cjv7jjm24001av4ty48d4tnqp","category_id":"cjv7jjm1u000ov4tyb38pu0dv","_id":"cjv7jjm2a001mv4tydnbi8fby"},{"post_id":"cjv7jjm1u000qv4tyc5yjpbvl","category_id":"cjv7jjm230018v4tyyiuc6z4w","_id":"cjv7jjm2a001pv4tybvsyxuhd"},{"post_id":"cjv7jjm25001cv4tyyk0iy097","category_id":"cjv7jjm1u000ov4tyb38pu0dv","_id":"cjv7jjm2b001rv4ty87rhkbjs"},{"post_id":"cjv7jjm1w000sv4tyrszvo04b","category_id":"cjv7jjm27001ev4tyx9fci0c7","_id":"cjv7jjm2b001uv4tyipwxh2vy"},{"post_id":"cjv7jjm3g002uv4typl45ydha","category_id":"cjv7jjm1u000ov4tyb38pu0dv","_id":"cjv7jjm3k002yv4ty119kvfry"},{"post_id":"cjv7jjm3h002vv4tynplii5bv","category_id":"cjv7jjm1u000ov4tyb38pu0dv","_id":"cjv7jjm3k002zv4ty852ssptl"},{"post_id":"cjv7jjm3j002xv4tygm88wsml","category_id":"cjv7jjm1u000ov4tyb38pu0dv","_id":"cjv7jjm3k0031v4tyqn5zunvf"},{"post_id":"cjv7jjm5z003mv4tyv5gui1b1","category_id":"cjv7jjm180004v4ty4oyh5cmk","_id":"cjv7jjm62003ov4tyxurimcha"},{"post_id":"cjv7jjm8x003zv4tyod5ijn9k","category_id":"cjv7jjm8y0040v4tybcfn1u9w","_id":"cjv7jjm8z0041v4tyx0cuuw0z"}],"PostTag":[{"post_id":"cjv7jjm100000v4tyd9toxz68","tag_id":"cjv7jjm1a0005v4tytf3ukzwn","_id":"cjv7jjm1i000cv4ty9rngl28g"},{"post_id":"cjv7jjm150002v4tybf8r38gh","tag_id":"cjv7jjm1g000bv4ty44bruodr","_id":"cjv7jjm1v000rv4tyngziu60p"},{"post_id":"cjv7jjm150002v4tybf8r38gh","tag_id":"cjv7jjm1p000hv4ty313olrhr","_id":"cjv7jjm1x000vv4tyabkjkwqm"},{"post_id":"cjv7jjm150002v4tybf8r38gh","tag_id":"cjv7jjm1s000lv4tyny7mhqs0","_id":"cjv7jjm1z000zv4ty2qwi9cke"},{"post_id":"cjv7jjm1a0006v4tyzi2ogwv7","tag_id":"cjv7jjm1p000hv4ty313olrhr","_id":"cjv7jjm200013v4ty9ue6yocu"},{"post_id":"cjv7jjm1d0008v4ty000t3gs4","tag_id":"cjv7jjm1g000bv4ty44bruodr","_id":"cjv7jjm29001lv4typfjqf1m2"},{"post_id":"cjv7jjm1d0008v4ty000t3gs4","tag_id":"cjv7jjm1p000hv4ty313olrhr","_id":"cjv7jjm2a001nv4tyy9w1odv2"},{"post_id":"cjv7jjm1d0008v4ty000t3gs4","tag_id":"cjv7jjm240019v4tyqaxqnmqj","_id":"cjv7jjm2a001qv4ty9gx5j80t"},{"post_id":"cjv7jjm1d0008v4ty000t3gs4","tag_id":"cjv7jjm28001gv4tye3qi6y5f","_id":"cjv7jjm2b001sv4tyzgritlxp"},{"post_id":"cjv7jjm1f0009v4tycx1lj5ne","tag_id":"cjv7jjm29001jv4ty282yke7k","_id":"cjv7jjm2b001vv4ty32f96syi"},{"post_id":"cjv7jjm1s000mv4tyu6klznm2","tag_id":"cjv7jjm2a001ov4tyk9yh2xve","_id":"cjv7jjm2d001yv4tymzobnoco"},{"post_id":"cjv7jjm1s000mv4tyu6klznm2","tag_id":"cjv7jjm2b001tv4tymjmwhb5v","_id":"cjv7jjm2d001zv4ty8hw4kbbx"},{"post_id":"cjv7jjm1s000mv4tyu6klznm2","tag_id":"cjv7jjm2c001wv4tyo4ogn77q","_id":"cjv7jjm2d0021v4tydl2fckpi"},{"post_id":"cjv7jjm1u000qv4tyc5yjpbvl","tag_id":"cjv7jjm2c001xv4tyabv8woh8","_id":"cjv7jjm2e0022v4tyctx5zg4e"},{"post_id":"cjv7jjm1w000sv4tyrszvo04b","tag_id":"cjv7jjm2d0020v4tyjujd84vq","_id":"cjv7jjm2f0025v4tytrdfe1oq"},{"post_id":"cjv7jjm1w000sv4tyrszvo04b","tag_id":"cjv7jjm2e0023v4tyjtsx6n0z","_id":"cjv7jjm2f0026v4tywhx1eutn"},{"post_id":"cjv7jjm1y000xv4tyhltrl8sq","tag_id":"cjv7jjm2e0024v4ty4c1yr0by","_id":"cjv7jjm2g0029v4tyr8b2wjuf"},{"post_id":"cjv7jjm1y000xv4tyhltrl8sq","tag_id":"cjv7jjm2f0027v4tyftnkd5qn","_id":"cjv7jjm2g002av4tybrj0oyq3"},{"post_id":"cjv7jjm1z0010v4ty1ldov5fv","tag_id":"cjv7jjm2g0028v4ty9e6ghj1m","_id":"cjv7jjm2i002dv4tyic9dje9n"},{"post_id":"cjv7jjm1z0010v4ty1ldov5fv","tag_id":"cjv7jjm1p000hv4ty313olrhr","_id":"cjv7jjm2i002ev4tyu3d5kgim"},{"post_id":"cjv7jjm1z0010v4ty1ldov5fv","tag_id":"cjv7jjm2h002bv4ty6161ov3t","_id":"cjv7jjm2j002gv4ty2h7g5fnc"},{"post_id":"cjv7jjm220016v4ty7voz9uw5","tag_id":"cjv7jjm2f0027v4tyftnkd5qn","_id":"cjv7jjm2k002jv4ty3vny8n9p"},{"post_id":"cjv7jjm220016v4ty7voz9uw5","tag_id":"cjv7jjm2i002fv4ty6kt0o110","_id":"cjv7jjm2k002kv4tykov5l2un"},{"post_id":"cjv7jjm220016v4ty7voz9uw5","tag_id":"cjv7jjm2j002hv4tymdqp8x3o","_id":"cjv7jjm2l002mv4ty55ejdqgk"},{"post_id":"cjv7jjm24001av4ty48d4tnqp","tag_id":"cjv7jjm2k002iv4ty2o6q4l9a","_id":"cjv7jjm2l002ov4tyq47a3joz"},{"post_id":"cjv7jjm24001av4ty48d4tnqp","tag_id":"cjv7jjm2k002lv4tybpdr0due","_id":"cjv7jjm2m002pv4ty09p74hr5"},{"post_id":"cjv7jjm25001cv4tyyk0iy097","tag_id":"cjv7jjm2l002nv4ty0z4vcwq2","_id":"cjv7jjm2q002rv4ty6bu1d12y"},{"post_id":"cjv7jjm25001cv4tyyk0iy097","tag_id":"cjv7jjm2a001ov4tyk9yh2xve","_id":"cjv7jjm2q002sv4tyc8jxmlo0"},{"post_id":"cjv7jjm3g002uv4typl45ydha","tag_id":"cjv7jjm3i002wv4ty1orcfn8s","_id":"cjv7jjm3m0035v4tyadf3pd9q"},{"post_id":"cjv7jjm3g002uv4typl45ydha","tag_id":"cjv7jjm2i002fv4ty6kt0o110","_id":"cjv7jjm3m0036v4ty5ift45lr"},{"post_id":"cjv7jjm3g002uv4typl45ydha","tag_id":"cjv7jjm3k0030v4ty8fqb9u2v","_id":"cjv7jjm3m0038v4ty0y3bt798"},{"post_id":"cjv7jjm3g002uv4typl45ydha","tag_id":"cjv7jjm3l0032v4tymkeiyhcm","_id":"cjv7jjm3m0039v4tyho95prgp"},{"post_id":"cjv7jjm3g002uv4typl45ydha","tag_id":"cjv7jjm3l0033v4ty258t60xl","_id":"cjv7jjm3n003bv4tyfsyflfa3"},{"post_id":"cjv7jjm3g002uv4typl45ydha","tag_id":"cjv7jjm2j002hv4tymdqp8x3o","_id":"cjv7jjm3n003cv4tyi4e1inoc"},{"post_id":"cjv7jjm3h002vv4tynplii5bv","tag_id":"cjv7jjm3l0034v4ty6ga10ms0","_id":"cjv7jjm3n003ev4ty1gza24qw"},{"post_id":"cjv7jjm3h002vv4tynplii5bv","tag_id":"cjv7jjm3m0037v4tyuyhbvkwo","_id":"cjv7jjm3n003fv4ty6kavrlvs"},{"post_id":"cjv7jjm3j002xv4tygm88wsml","tag_id":"cjv7jjm1p000hv4ty313olrhr","_id":"cjv7jjm3o003hv4ty93mf2c3n"},{"post_id":"cjv7jjm3j002xv4tygm88wsml","tag_id":"cjv7jjm3m003av4tys7vt2r1y","_id":"cjv7jjm3o003iv4tylbuwc093"},{"post_id":"cjv7jjm3j002xv4tygm88wsml","tag_id":"cjv7jjm3n003dv4tytynq0d3k","_id":"cjv7jjm3o003jv4tyyx4xnwkc"},{"post_id":"cjv7jjm3j002xv4tygm88wsml","tag_id":"cjv7jjm3n003gv4tyym9d51lb","_id":"cjv7jjm3o003kv4tytlmoqszj"},{"post_id":"cjv7jjm3j002xv4tygm88wsml","tag_id":"cjv7jjm1g000bv4ty44bruodr","_id":"cjv7jjm3o003lv4ty72hp7tcz"},{"post_id":"cjv7jjm5z003mv4tyv5gui1b1","tag_id":"cjv7jjm61003nv4tyrvox9grf","_id":"cjv7jjm65003tv4tyfabkwenr"},{"post_id":"cjv7jjm5z003mv4tyv5gui1b1","tag_id":"cjv7jjm62003pv4tyk4n5pdql","_id":"cjv7jjm65003uv4ty9ljm258a"},{"post_id":"cjv7jjm5z003mv4tyv5gui1b1","tag_id":"cjv7jjm63003qv4tyre18n9cr","_id":"cjv7jjm65003vv4tyh66dh82m"},{"post_id":"cjv7jjm5z003mv4tyv5gui1b1","tag_id":"cjv7jjm63003rv4ty93wqqeer","_id":"cjv7jjm65003wv4tyu472rlil"},{"post_id":"cjv7jjm5z003mv4tyv5gui1b1","tag_id":"cjv7jjm63003sv4tyosx3amuh","_id":"cjv7jjm66003xv4ty8d73tsbd"},{"post_id":"cjv7jjm5z003mv4tyv5gui1b1","tag_id":"cjv7jjm2i002fv4ty6kt0o110","_id":"cjv7jjm66003yv4tyzlvcrp4c"}],"Tag":[{"name":"网络流","_id":"cjv7jjm1a0005v4tytf3ukzwn"},{"name":"矩阵树定理","_id":"cjv7jjm1g000bv4ty44bruodr"},{"name":"数学","_id":"cjv7jjm1p000hv4ty313olrhr"},{"name":"计数问题","_id":"cjv7jjm1s000lv4tyny7mhqs0"},{"name":"生成树","_id":"cjv7jjm240019v4tyqaxqnmqj"},{"name":"概率期望","_id":"cjv7jjm28001gv4tye3qi6y5f"},{"name":"LCT","_id":"cjv7jjm29001jv4ty282yke7k"},{"name":"动态规划","_id":"cjv7jjm2a001ov4tyk9yh2xve"},{"name":"斜率优化","_id":"cjv7jjm2b001tv4tymjmwhb5v"},{"name":"单调栈","_id":"cjv7jjm2c001wv4tyo4ogn77q"},{"name":"Todolist","_id":"cjv7jjm2c001xv4tyabv8woh8"},{"name":"颓废","_id":"cjv7jjm2d0020v4tyjujd84vq"},{"name":"套路","_id":"cjv7jjm2e0023v4tyjtsx6n0z"},{"name":"主席树","_id":"cjv7jjm2e0024v4ty4c1yr0by"},{"name":"可持久化","_id":"cjv7jjm2f0027v4tyftnkd5qn"},{"name":"线段树","_id":"cjv7jjm2g0028v4ty9e6ghj1m"},{"name":"欧拉定理","_id":"cjv7jjm2h002bv4ty6161ov3t"},{"name":"平衡树","_id":"cjv7jjm2i002fv4ty6kt0o110"},{"name":"可持久化平衡树","_id":"cjv7jjm2j002hv4tymdqp8x3o"},{"name":"点分治","_id":"cjv7jjm2k002iv4ty2o6q4l9a"},{"name":"分治","_id":"cjv7jjm2k002lv4tybpdr0due"},{"name":"虚树","_id":"cjv7jjm2l002nv4ty0z4vcwq2"},{"name":"暴力","_id":"cjv7jjm3i002wv4ty1orcfn8s"},{"name":"替罪羊树","_id":"cjv7jjm3k0030v4ty8fqb9u2v"},{"name":"splay","_id":"cjv7jjm3l0032v4tymkeiyhcm"},{"name":"treap","_id":"cjv7jjm3l0033v4ty258t60xl"},{"name":"多项式算法","_id":"cjv7jjm3l0034v4ty6ga10ms0"},{"name":"数论","_id":"cjv7jjm3m0037v4tyuyhbvkwo"},{"name":"计数","_id":"cjv7jjm3m003av4tys7vt2r1y"},{"name":"线性代数","_id":"cjv7jjm3n003dv4tytynq0d3k"},{"name":"高斯消元","_id":"cjv7jjm3n003gv4tyym9d51lb"},{"name":"分块","_id":"cjv7jjm61003nv4tyrvox9grf"},{"name":"莫队","_id":"cjv7jjm62003pv4tyk4n5pdql"},{"name":"YNOI","_id":"cjv7jjm63003qv4tyre18n9cr"},{"name":"毒瘤","_id":"cjv7jjm63003rv4ty93wqqeer"},{"name":"数据结构","_id":"cjv7jjm63003sv4tyosx3amuh"}]}}